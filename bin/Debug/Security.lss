
bin\Debug\Security.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039a0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b0  00800060  000039a0  00003a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800210  00800210  00003c04  2**0
                  ALLOC
  3 .fuse         00000002  00820000  00820000  00003c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000260  00000000  00000000  00003c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000578  00000000  00000000  00003e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000386d  00000000  00000000  000043de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a0a  00000000  00000000  00007c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002946  00000000  00000000  00009655  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  0000bf9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000645  00000000  00000000  0000c38c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000c9d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d3eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 33       	cpi	r26, 0x3C	; 60
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 12 	call	0x24fc	; 0x24fc <main>
      8a:	0c 94 ce 1c 	jmp	0x399c	; 0x399c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc0_init>:
#include <avr/interrupt.h>

double dutyCycle=0;

void adc0_init()
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
    ADMUX = (1<<REFS0);   //Setting the Vcc as the reference and Enable ADC0
      9a:	e7 e2       	ldi	r30, 0x27	; 39
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	80 e4       	ldi	r24, 0x40	; 64
      a0:	80 83       	st	Z, r24
    ADCSRA =  (1 << ADEN) | (1 << ADIE) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
      a2:	e6 e2       	ldi	r30, 0x26	; 38
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	8f e8       	ldi	r24, 0x8F	; 143
      a8:	80 83       	st	Z, r24
    adc0_convert();
      aa:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc0_convert>
}
      ae:	cf 91       	pop	r28
      b0:	df 91       	pop	r29
      b2:	08 95       	ret

000000b4 <adc0_convert>:

void adc0_convert()
{
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
    ADCSRA |= (1 << ADSC);
      bc:	a6 e2       	ldi	r26, 0x26	; 38
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	e6 e2       	ldi	r30, 0x26	; 38
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	80 64       	ori	r24, 0x40	; 64
      c8:	8c 93       	st	X, r24
}
      ca:	cf 91       	pop	r28
      cc:	df 91       	pop	r29
      ce:	08 95       	ret

000000d0 <__vector_16>:

ISR(ADC_vect)
{
      d0:	1f 92       	push	r1
      d2:	0f 92       	push	r0
      d4:	0f b6       	in	r0, 0x3f	; 63
      d6:	0f 92       	push	r0
      d8:	11 24       	eor	r1, r1
      da:	2f 93       	push	r18
      dc:	3f 93       	push	r19
      de:	4f 93       	push	r20
      e0:	5f 93       	push	r21
      e2:	6f 93       	push	r22
      e4:	7f 93       	push	r23
      e6:	8f 93       	push	r24
      e8:	9f 93       	push	r25
      ea:	af 93       	push	r26
      ec:	bf 93       	push	r27
      ee:	ef 93       	push	r30
      f0:	ff 93       	push	r31
      f2:	df 93       	push	r29
      f4:	cf 93       	push	r28
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
    dutyCycle = ADC;
      fa:	e4 e2       	ldi	r30, 0x24	; 36
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 81       	ld	r24, Z
     100:	91 81       	ldd	r25, Z+1	; 0x01
     102:	cc 01       	movw	r24, r24
     104:	a0 e0       	ldi	r26, 0x00	; 0
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	bc 01       	movw	r22, r24
     10a:	cd 01       	movw	r24, r26
     10c:	0e 94 cd 19 	call	0x339a	; 0x339a <__floatunsisf>
     110:	dc 01       	movw	r26, r24
     112:	cb 01       	movw	r24, r22
     114:	80 93 10 02 	sts	0x0210, r24
     118:	90 93 11 02 	sts	0x0211, r25
     11c:	a0 93 12 02 	sts	0x0212, r26
     120:	b0 93 13 02 	sts	0x0213, r27
    adc0_convert();
     124:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc0_convert>
}
     128:	cf 91       	pop	r28
     12a:	df 91       	pop	r29
     12c:	ff 91       	pop	r31
     12e:	ef 91       	pop	r30
     130:	bf 91       	pop	r27
     132:	af 91       	pop	r26
     134:	9f 91       	pop	r25
     136:	8f 91       	pop	r24
     138:	7f 91       	pop	r23
     13a:	6f 91       	pop	r22
     13c:	5f 91       	pop	r21
     13e:	4f 91       	pop	r20
     140:	3f 91       	pop	r19
     142:	2f 91       	pop	r18
     144:	0f 90       	pop	r0
     146:	0f be       	out	0x3f, r0	; 63
     148:	0f 90       	pop	r0
     14a:	1f 90       	pop	r1
     14c:	18 95       	reti

0000014e <PWM_init0>:

void PWM_init0()
{
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
     152:	df 93       	push	r29
     154:	cf 93       	push	r28
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1<<3);
     15a:	a7 e3       	ldi	r26, 0x37	; 55
     15c:	b0 e0       	ldi	r27, 0x00	; 0
     15e:	e7 e3       	ldi	r30, 0x37	; 55
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	88 60       	ori	r24, 0x08	; 8
     166:	8c 93       	st	X, r24
    DDRD |= (1<<7);
     168:	a1 e3       	ldi	r26, 0x31	; 49
     16a:	b0 e0       	ldi	r27, 0x00	; 0
     16c:	e1 e3       	ldi	r30, 0x31	; 49
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	80 81       	ld	r24, Z
     172:	80 68       	ori	r24, 0x80	; 128
     174:	8c 93       	st	X, r24
    TCCR2 = (1<<COM21) | (1<<WGM21) | (1<<WGM20); // p125
     176:	e5 e4       	ldi	r30, 0x45	; 69
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	88 e6       	ldi	r24, 0x68	; 104
     17c:	80 83       	st	Z, r24
    TIMSK = (1<<TOIE2);
     17e:	e9 e5       	ldi	r30, 0x59	; 89
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 e4       	ldi	r24, 0x40	; 64
     184:	80 83       	st	Z, r24
    OCR2 = dutyCycle;
     186:	03 e4       	ldi	r16, 0x43	; 67
     188:	10 e0       	ldi	r17, 0x00	; 0
     18a:	80 91 10 02 	lds	r24, 0x0210
     18e:	90 91 11 02 	lds	r25, 0x0211
     192:	a0 91 12 02 	lds	r26, 0x0212
     196:	b0 91 13 02 	lds	r27, 0x0213
     19a:	bc 01       	movw	r22, r24
     19c:	cd 01       	movw	r24, r26
     19e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     1a2:	dc 01       	movw	r26, r24
     1a4:	cb 01       	movw	r24, r22
     1a6:	f8 01       	movw	r30, r16
     1a8:	80 83       	st	Z, r24

    sei();
     1aa:	78 94       	sei
    TCCR2 |= (1<<CS22);  // p125
     1ac:	a5 e4       	ldi	r26, 0x45	; 69
     1ae:	b0 e0       	ldi	r27, 0x00	; 0
     1b0:	e5 e4       	ldi	r30, 0x45	; 69
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	80 81       	ld	r24, Z
     1b6:	84 60       	ori	r24, 0x04	; 4
     1b8:	8c 93       	st	X, r24
}
     1ba:	cf 91       	pop	r28
     1bc:	df 91       	pop	r29
     1be:	1f 91       	pop	r17
     1c0:	0f 91       	pop	r16
     1c2:	08 95       	ret

000001c4 <__vector_5>:

ISR(TIMER2_OVF_vect)   // Interrupt on Overflow
{
     1c4:	1f 92       	push	r1
     1c6:	0f 92       	push	r0
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	0f 92       	push	r0
     1cc:	11 24       	eor	r1, r1
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	2f 93       	push	r18
     1d4:	3f 93       	push	r19
     1d6:	4f 93       	push	r20
     1d8:	5f 93       	push	r21
     1da:	6f 93       	push	r22
     1dc:	7f 93       	push	r23
     1de:	8f 93       	push	r24
     1e0:	9f 93       	push	r25
     1e2:	af 93       	push	r26
     1e4:	bf 93       	push	r27
     1e6:	ef 93       	push	r30
     1e8:	ff 93       	push	r31
     1ea:	df 93       	push	r29
     1ec:	cf 93       	push	r28
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
    OCR2 = dutyCycle;
     1f2:	03 e4       	ldi	r16, 0x43	; 67
     1f4:	10 e0       	ldi	r17, 0x00	; 0
     1f6:	80 91 10 02 	lds	r24, 0x0210
     1fa:	90 91 11 02 	lds	r25, 0x0211
     1fe:	a0 91 12 02 	lds	r26, 0x0212
     202:	b0 91 13 02 	lds	r27, 0x0213
     206:	bc 01       	movw	r22, r24
     208:	cd 01       	movw	r24, r26
     20a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     20e:	dc 01       	movw	r26, r24
     210:	cb 01       	movw	r24, r22
     212:	f8 01       	movw	r30, r16
     214:	80 83       	st	Z, r24
}
     216:	cf 91       	pop	r28
     218:	df 91       	pop	r29
     21a:	ff 91       	pop	r31
     21c:	ef 91       	pop	r30
     21e:	bf 91       	pop	r27
     220:	af 91       	pop	r26
     222:	9f 91       	pop	r25
     224:	8f 91       	pop	r24
     226:	7f 91       	pop	r23
     228:	6f 91       	pop	r22
     22a:	5f 91       	pop	r21
     22c:	4f 91       	pop	r20
     22e:	3f 91       	pop	r19
     230:	2f 91       	pop	r18
     232:	1f 91       	pop	r17
     234:	0f 91       	pop	r16
     236:	0f 90       	pop	r0
     238:	0f be       	out	0x3f, r0	; 63
     23a:	0f 90       	pop	r0
     23c:	1f 90       	pop	r1
     23e:	18 95       	reti

00000240 <key_capture>:
unsigned char double_time=1, enter_request=0, pass_change=0, request_change=0, change_allowed=0,  triers=0;
unsigned int countMe = 0;
unsigned char i=0, pos=0, nCorrect=0;

void key_capture()
{
     240:	df 93       	push	r29
     242:	cf 93       	push	r28
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	e0 97       	sbiw	r28, 0x30	; 48
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
// Change Port Here
DDRC = 0x0F; PORTC = 0xF0; _delay_us(5); key = PINC;
     254:	e4 e3       	ldi	r30, 0x34	; 52
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	8f e0       	ldi	r24, 0x0F	; 15
     25a:	80 83       	st	Z, r24
     25c:	e5 e3       	ldi	r30, 0x35	; 53
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 ef       	ldi	r24, 0xF0	; 240
     262:	80 83       	st	Z, r24
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	a0 ea       	ldi	r26, 0xA0	; 160
     26a:	b0 e4       	ldi	r27, 0x40	; 64
     26c:	8d a7       	std	Y+45, r24	; 0x2d
     26e:	9e a7       	std	Y+46, r25	; 0x2e
     270:	af a7       	std	Y+47, r26	; 0x2f
     272:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     274:	6d a5       	ldd	r22, Y+45	; 0x2d
     276:	7e a5       	ldd	r23, Y+46	; 0x2e
     278:	8f a5       	ldd	r24, Y+47	; 0x2f
     27a:	98 a9       	ldd	r25, Y+48	; 0x30
     27c:	2b ea       	ldi	r18, 0xAB	; 171
     27e:	3a ea       	ldi	r19, 0xAA	; 170
     280:	4a ea       	ldi	r20, 0xAA	; 170
     282:	50 e4       	ldi	r21, 0x40	; 64
     284:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     288:	dc 01       	movw	r26, r24
     28a:	cb 01       	movw	r24, r22
     28c:	89 a7       	std	Y+41, r24	; 0x29
     28e:	9a a7       	std	Y+42, r25	; 0x2a
     290:	ab a7       	std	Y+43, r26	; 0x2b
     292:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     294:	69 a5       	ldd	r22, Y+41	; 0x29
     296:	7a a5       	ldd	r23, Y+42	; 0x2a
     298:	8b a5       	ldd	r24, Y+43	; 0x2b
     29a:	9c a5       	ldd	r25, Y+44	; 0x2c
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e8       	ldi	r20, 0x80	; 128
     2a2:	5f e3       	ldi	r21, 0x3F	; 63
     2a4:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
     2a8:	88 23       	and	r24, r24
     2aa:	1c f4       	brge	.+6      	; 0x2b2 <key_capture+0x72>
		__ticks = 1;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	88 a7       	std	Y+40, r24	; 0x28
     2b0:	91 c0       	rjmp	.+290    	; 0x3d4 <key_capture+0x194>
	else if (__tmp > 255)
     2b2:	69 a5       	ldd	r22, Y+41	; 0x29
     2b4:	7a a5       	ldd	r23, Y+42	; 0x2a
     2b6:	8b a5       	ldd	r24, Y+43	; 0x2b
     2b8:	9c a5       	ldd	r25, Y+44	; 0x2c
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	4f e7       	ldi	r20, 0x7F	; 127
     2c0:	53 e4       	ldi	r21, 0x43	; 67
     2c2:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
     2c6:	18 16       	cp	r1, r24
     2c8:	0c f0       	brlt	.+2      	; 0x2cc <key_capture+0x8c>
     2ca:	7b c0       	rjmp	.+246    	; 0x3c2 <key_capture+0x182>
	{
		_delay_ms(__us / 1000.0);
     2cc:	6d a5       	ldd	r22, Y+45	; 0x2d
     2ce:	7e a5       	ldd	r23, Y+46	; 0x2e
     2d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     2d2:	98 a9       	ldd	r25, Y+48	; 0x30
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	4a e7       	ldi	r20, 0x7A	; 122
     2da:	54 e4       	ldi	r21, 0x44	; 68
     2dc:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__divsf3>
     2e0:	dc 01       	movw	r26, r24
     2e2:	cb 01       	movw	r24, r22
     2e4:	8c a3       	std	Y+36, r24	; 0x24
     2e6:	9d a3       	std	Y+37, r25	; 0x25
     2e8:	ae a3       	std	Y+38, r26	; 0x26
     2ea:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2ec:	6c a1       	ldd	r22, Y+36	; 0x24
     2ee:	7d a1       	ldd	r23, Y+37	; 0x25
     2f0:	8e a1       	ldd	r24, Y+38	; 0x26
     2f2:	9f a1       	ldd	r25, Y+39	; 0x27
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	4a e7       	ldi	r20, 0x7A	; 122
     2fa:	55 e4       	ldi	r21, 0x45	; 69
     2fc:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     300:	dc 01       	movw	r26, r24
     302:	cb 01       	movw	r24, r22
     304:	88 a3       	std	Y+32, r24	; 0x20
     306:	99 a3       	std	Y+33, r25	; 0x21
     308:	aa a3       	std	Y+34, r26	; 0x22
     30a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     30c:	68 a1       	ldd	r22, Y+32	; 0x20
     30e:	79 a1       	ldd	r23, Y+33	; 0x21
     310:	8a a1       	ldd	r24, Y+34	; 0x22
     312:	9b a1       	ldd	r25, Y+35	; 0x23
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5f e3       	ldi	r21, 0x3F	; 63
     31c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
     320:	88 23       	and	r24, r24
     322:	2c f4       	brge	.+10     	; 0x32e <key_capture+0xee>
		__ticks = 1;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	9f 8f       	std	Y+31, r25	; 0x1f
     32a:	8e 8f       	std	Y+30, r24	; 0x1e
     32c:	3f c0       	rjmp	.+126    	; 0x3ac <key_capture+0x16c>
	else if (__tmp > 65535)
     32e:	68 a1       	ldd	r22, Y+32	; 0x20
     330:	79 a1       	ldd	r23, Y+33	; 0x21
     332:	8a a1       	ldd	r24, Y+34	; 0x22
     334:	9b a1       	ldd	r25, Y+35	; 0x23
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	3f ef       	ldi	r19, 0xFF	; 255
     33a:	4f e7       	ldi	r20, 0x7F	; 127
     33c:	57 e4       	ldi	r21, 0x47	; 71
     33e:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
     342:	18 16       	cp	r1, r24
     344:	4c f5       	brge	.+82     	; 0x398 <key_capture+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     346:	6c a1       	ldd	r22, Y+36	; 0x24
     348:	7d a1       	ldd	r23, Y+37	; 0x25
     34a:	8e a1       	ldd	r24, Y+38	; 0x26
     34c:	9f a1       	ldd	r25, Y+39	; 0x27
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	40 e2       	ldi	r20, 0x20	; 32
     354:	51 e4       	ldi	r21, 0x41	; 65
     356:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     35a:	dc 01       	movw	r26, r24
     35c:	cb 01       	movw	r24, r22
     35e:	bc 01       	movw	r22, r24
     360:	cd 01       	movw	r24, r26
     362:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	9f 8f       	std	Y+31, r25	; 0x1f
     36c:	8e 8f       	std	Y+30, r24	; 0x1e
     36e:	0f c0       	rjmp	.+30     	; 0x38e <key_capture+0x14e>
     370:	80 e9       	ldi	r24, 0x90	; 144
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	9d 8f       	std	Y+29, r25	; 0x1d
     376:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     378:	8c 8d       	ldd	r24, Y+28	; 0x1c
     37a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <key_capture+0x13c>
     380:	9d 8f       	std	Y+29, r25	; 0x1d
     382:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     384:	8e 8d       	ldd	r24, Y+30	; 0x1e
     386:	9f 8d       	ldd	r25, Y+31	; 0x1f
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	9f 8f       	std	Y+31, r25	; 0x1f
     38c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     38e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     390:	9f 8d       	ldd	r25, Y+31	; 0x1f
     392:	00 97       	sbiw	r24, 0x00	; 0
     394:	69 f7       	brne	.-38     	; 0x370 <key_capture+0x130>
     396:	24 c0       	rjmp	.+72     	; 0x3e0 <key_capture+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     398:	68 a1       	ldd	r22, Y+32	; 0x20
     39a:	79 a1       	ldd	r23, Y+33	; 0x21
     39c:	8a a1       	ldd	r24, Y+34	; 0x22
     39e:	9b a1       	ldd	r25, Y+35	; 0x23
     3a0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     3a4:	dc 01       	movw	r26, r24
     3a6:	cb 01       	movw	r24, r22
     3a8:	9f 8f       	std	Y+31, r25	; 0x1f
     3aa:	8e 8f       	std	Y+30, r24	; 0x1e
     3ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
     3ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
     3b0:	9b 8f       	std	Y+27, r25	; 0x1b
     3b2:	8a 8f       	std	Y+26, r24	; 0x1a
     3b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     3b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3b8:	01 97       	sbiw	r24, 0x01	; 1
     3ba:	f1 f7       	brne	.-4      	; 0x3b8 <key_capture+0x178>
     3bc:	9b 8f       	std	Y+27, r25	; 0x1b
     3be:	8a 8f       	std	Y+26, r24	; 0x1a
     3c0:	0f c0       	rjmp	.+30     	; 0x3e0 <key_capture+0x1a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3c2:	69 a5       	ldd	r22, Y+41	; 0x29
     3c4:	7a a5       	ldd	r23, Y+42	; 0x2a
     3c6:	8b a5       	ldd	r24, Y+43	; 0x2b
     3c8:	9c a5       	ldd	r25, Y+44	; 0x2c
     3ca:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     3ce:	dc 01       	movw	r26, r24
     3d0:	cb 01       	movw	r24, r22
     3d2:	88 a7       	std	Y+40, r24	; 0x28
     3d4:	88 a5       	ldd	r24, Y+40	; 0x28
     3d6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3d8:	89 8d       	ldd	r24, Y+25	; 0x19
     3da:	8a 95       	dec	r24
     3dc:	f1 f7       	brne	.-4      	; 0x3da <key_capture+0x19a>
     3de:	89 8f       	std	Y+25, r24	; 0x19
     3e0:	e3 e3       	ldi	r30, 0x33	; 51
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	80 93 2b 02 	sts	0x022B, r24
DDRC = 0xF0; PORTC = 0x0F; _delay_us(5); key |= PINC;
     3ea:	e4 e3       	ldi	r30, 0x34	; 52
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 ef       	ldi	r24, 0xF0	; 240
     3f0:	80 83       	st	Z, r24
     3f2:	e5 e3       	ldi	r30, 0x35	; 53
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	8f e0       	ldi	r24, 0x0F	; 15
     3f8:	80 83       	st	Z, r24
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	a0 ea       	ldi	r26, 0xA0	; 160
     400:	b0 e4       	ldi	r27, 0x40	; 64
     402:	8d 8b       	std	Y+21, r24	; 0x15
     404:	9e 8b       	std	Y+22, r25	; 0x16
     406:	af 8b       	std	Y+23, r26	; 0x17
     408:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     40a:	6d 89       	ldd	r22, Y+21	; 0x15
     40c:	7e 89       	ldd	r23, Y+22	; 0x16
     40e:	8f 89       	ldd	r24, Y+23	; 0x17
     410:	98 8d       	ldd	r25, Y+24	; 0x18
     412:	2b ea       	ldi	r18, 0xAB	; 171
     414:	3a ea       	ldi	r19, 0xAA	; 170
     416:	4a ea       	ldi	r20, 0xAA	; 170
     418:	50 e4       	ldi	r21, 0x40	; 64
     41a:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     41e:	dc 01       	movw	r26, r24
     420:	cb 01       	movw	r24, r22
     422:	89 8b       	std	Y+17, r24	; 0x11
     424:	9a 8b       	std	Y+18, r25	; 0x12
     426:	ab 8b       	std	Y+19, r26	; 0x13
     428:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     42a:	69 89       	ldd	r22, Y+17	; 0x11
     42c:	7a 89       	ldd	r23, Y+18	; 0x12
     42e:	8b 89       	ldd	r24, Y+19	; 0x13
     430:	9c 89       	ldd	r25, Y+20	; 0x14
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	40 e8       	ldi	r20, 0x80	; 128
     438:	5f e3       	ldi	r21, 0x3F	; 63
     43a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
     43e:	88 23       	and	r24, r24
     440:	1c f4       	brge	.+6      	; 0x448 <key_capture+0x208>
		__ticks = 1;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	88 8b       	std	Y+16, r24	; 0x10
     446:	91 c0       	rjmp	.+290    	; 0x56a <key_capture+0x32a>
	else if (__tmp > 255)
     448:	69 89       	ldd	r22, Y+17	; 0x11
     44a:	7a 89       	ldd	r23, Y+18	; 0x12
     44c:	8b 89       	ldd	r24, Y+19	; 0x13
     44e:	9c 89       	ldd	r25, Y+20	; 0x14
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	4f e7       	ldi	r20, 0x7F	; 127
     456:	53 e4       	ldi	r21, 0x43	; 67
     458:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
     45c:	18 16       	cp	r1, r24
     45e:	0c f0       	brlt	.+2      	; 0x462 <key_capture+0x222>
     460:	7b c0       	rjmp	.+246    	; 0x558 <key_capture+0x318>
	{
		_delay_ms(__us / 1000.0);
     462:	6d 89       	ldd	r22, Y+21	; 0x15
     464:	7e 89       	ldd	r23, Y+22	; 0x16
     466:	8f 89       	ldd	r24, Y+23	; 0x17
     468:	98 8d       	ldd	r25, Y+24	; 0x18
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	4a e7       	ldi	r20, 0x7A	; 122
     470:	54 e4       	ldi	r21, 0x44	; 68
     472:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__divsf3>
     476:	dc 01       	movw	r26, r24
     478:	cb 01       	movw	r24, r22
     47a:	8c 87       	std	Y+12, r24	; 0x0c
     47c:	9d 87       	std	Y+13, r25	; 0x0d
     47e:	ae 87       	std	Y+14, r26	; 0x0e
     480:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     482:	6c 85       	ldd	r22, Y+12	; 0x0c
     484:	7d 85       	ldd	r23, Y+13	; 0x0d
     486:	8e 85       	ldd	r24, Y+14	; 0x0e
     488:	9f 85       	ldd	r25, Y+15	; 0x0f
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	4a e7       	ldi	r20, 0x7A	; 122
     490:	55 e4       	ldi	r21, 0x45	; 69
     492:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     496:	dc 01       	movw	r26, r24
     498:	cb 01       	movw	r24, r22
     49a:	88 87       	std	Y+8, r24	; 0x08
     49c:	99 87       	std	Y+9, r25	; 0x09
     49e:	aa 87       	std	Y+10, r26	; 0x0a
     4a0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     4a2:	68 85       	ldd	r22, Y+8	; 0x08
     4a4:	79 85       	ldd	r23, Y+9	; 0x09
     4a6:	8a 85       	ldd	r24, Y+10	; 0x0a
     4a8:	9b 85       	ldd	r25, Y+11	; 0x0b
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	40 e8       	ldi	r20, 0x80	; 128
     4b0:	5f e3       	ldi	r21, 0x3F	; 63
     4b2:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
     4b6:	88 23       	and	r24, r24
     4b8:	2c f4       	brge	.+10     	; 0x4c4 <key_capture+0x284>
		__ticks = 1;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	9f 83       	std	Y+7, r25	; 0x07
     4c0:	8e 83       	std	Y+6, r24	; 0x06
     4c2:	3f c0       	rjmp	.+126    	; 0x542 <key_capture+0x302>
	else if (__tmp > 65535)
     4c4:	68 85       	ldd	r22, Y+8	; 0x08
     4c6:	79 85       	ldd	r23, Y+9	; 0x09
     4c8:	8a 85       	ldd	r24, Y+10	; 0x0a
     4ca:	9b 85       	ldd	r25, Y+11	; 0x0b
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	3f ef       	ldi	r19, 0xFF	; 255
     4d0:	4f e7       	ldi	r20, 0x7F	; 127
     4d2:	57 e4       	ldi	r21, 0x47	; 71
     4d4:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
     4d8:	18 16       	cp	r1, r24
     4da:	4c f5       	brge	.+82     	; 0x52e <key_capture+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4dc:	6c 85       	ldd	r22, Y+12	; 0x0c
     4de:	7d 85       	ldd	r23, Y+13	; 0x0d
     4e0:	8e 85       	ldd	r24, Y+14	; 0x0e
     4e2:	9f 85       	ldd	r25, Y+15	; 0x0f
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	40 e2       	ldi	r20, 0x20	; 32
     4ea:	51 e4       	ldi	r21, 0x41	; 65
     4ec:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     4f0:	dc 01       	movw	r26, r24
     4f2:	cb 01       	movw	r24, r22
     4f4:	bc 01       	movw	r22, r24
     4f6:	cd 01       	movw	r24, r26
     4f8:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	9f 83       	std	Y+7, r25	; 0x07
     502:	8e 83       	std	Y+6, r24	; 0x06
     504:	0f c0       	rjmp	.+30     	; 0x524 <key_capture+0x2e4>
     506:	80 e9       	ldi	r24, 0x90	; 144
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	9d 83       	std	Y+5, r25	; 0x05
     50c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     50e:	8c 81       	ldd	r24, Y+4	; 0x04
     510:	9d 81       	ldd	r25, Y+5	; 0x05
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <key_capture+0x2d2>
     516:	9d 83       	std	Y+5, r25	; 0x05
     518:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     51a:	8e 81       	ldd	r24, Y+6	; 0x06
     51c:	9f 81       	ldd	r25, Y+7	; 0x07
     51e:	01 97       	sbiw	r24, 0x01	; 1
     520:	9f 83       	std	Y+7, r25	; 0x07
     522:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     524:	8e 81       	ldd	r24, Y+6	; 0x06
     526:	9f 81       	ldd	r25, Y+7	; 0x07
     528:	00 97       	sbiw	r24, 0x00	; 0
     52a:	69 f7       	brne	.-38     	; 0x506 <key_capture+0x2c6>
     52c:	24 c0       	rjmp	.+72     	; 0x576 <key_capture+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     52e:	68 85       	ldd	r22, Y+8	; 0x08
     530:	79 85       	ldd	r23, Y+9	; 0x09
     532:	8a 85       	ldd	r24, Y+10	; 0x0a
     534:	9b 85       	ldd	r25, Y+11	; 0x0b
     536:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     53a:	dc 01       	movw	r26, r24
     53c:	cb 01       	movw	r24, r22
     53e:	9f 83       	std	Y+7, r25	; 0x07
     540:	8e 83       	std	Y+6, r24	; 0x06
     542:	8e 81       	ldd	r24, Y+6	; 0x06
     544:	9f 81       	ldd	r25, Y+7	; 0x07
     546:	9b 83       	std	Y+3, r25	; 0x03
     548:	8a 83       	std	Y+2, r24	; 0x02
     54a:	8a 81       	ldd	r24, Y+2	; 0x02
     54c:	9b 81       	ldd	r25, Y+3	; 0x03
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	f1 f7       	brne	.-4      	; 0x54e <key_capture+0x30e>
     552:	9b 83       	std	Y+3, r25	; 0x03
     554:	8a 83       	std	Y+2, r24	; 0x02
     556:	0f c0       	rjmp	.+30     	; 0x576 <key_capture+0x336>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     558:	69 89       	ldd	r22, Y+17	; 0x11
     55a:	7a 89       	ldd	r23, Y+18	; 0x12
     55c:	8b 89       	ldd	r24, Y+19	; 0x13
     55e:	9c 89       	ldd	r25, Y+20	; 0x14
     560:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	88 8b       	std	Y+16, r24	; 0x10
     56a:	88 89       	ldd	r24, Y+16	; 0x10
     56c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     56e:	89 81       	ldd	r24, Y+1	; 0x01
     570:	8a 95       	dec	r24
     572:	f1 f7       	brne	.-4      	; 0x570 <key_capture+0x330>
     574:	89 83       	std	Y+1, r24	; 0x01
     576:	e3 e3       	ldi	r30, 0x33	; 51
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	90 81       	ld	r25, Z
     57c:	80 91 2b 02 	lds	r24, 0x022B
     580:	89 2b       	or	r24, r25
     582:	80 93 2b 02 	sts	0x022B, r24
}
     586:	e0 96       	adiw	r28, 0x30	; 48
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	f8 94       	cli
     58c:	de bf       	out	0x3e, r29	; 62
     58e:	0f be       	out	0x3f, r0	; 63
     590:	cd bf       	out	0x3d, r28	; 61
     592:	cf 91       	pop	r28
     594:	df 91       	pop	r29
     596:	08 95       	ret

00000598 <keypad_entry>:

unsigned char keypad_entry()
{
     598:	df 93       	push	r29
     59a:	cf 93       	push	r28
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	29 97       	sbiw	r28, 0x09	; 9
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
DDRD |= (1<<6);
     5ac:	a1 e3       	ldi	r26, 0x31	; 49
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	e1 e3       	ldi	r30, 0x31	; 49
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	80 64       	ori	r24, 0x40	; 64
     5b8:	8c 93       	st	X, r24
TCCR0 = (1<<WGM01);
     5ba:	e3 e5       	ldi	r30, 0x53	; 83
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	88 e0       	ldi	r24, 0x08	; 8
     5c0:	80 83       	st	Z, r24

while(1)
{

key_capture();
     5c2:	0e 94 20 01 	call	0x240	; 0x240 <key_capture>

if(key != 0xFF)
     5c6:	80 91 2b 02 	lds	r24, 0x022B
     5ca:	8f 3f       	cpi	r24, 0xFF	; 255
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <keypad_entry+0x38>
     5ce:	c8 c0       	rjmp	.+400    	; 0x760 <keypad_entry+0x1c8>
    for(i=0; i<16;i++)
     5d0:	10 92 1b 02 	sts	0x021B, r1
     5d4:	c0 c0       	rjmp	.+384    	; 0x756 <keypad_entry+0x1be>
        if(keyMap[i] == key)
     5d6:	80 91 1b 02 	lds	r24, 0x021B
     5da:	88 2f       	mov	r24, r24
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	fc 01       	movw	r30, r24
     5e0:	e0 5a       	subi	r30, 0xA0	; 160
     5e2:	ff 4f       	sbci	r31, 0xFF	; 255
     5e4:	90 81       	ld	r25, Z
     5e6:	80 91 2b 02 	lds	r24, 0x022B
     5ea:	98 17       	cp	r25, r24
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <keypad_entry+0x58>
     5ee:	ae c0       	rjmp	.+348    	; 0x74c <keypad_entry+0x1b4>
        {

            countMe = 0;
     5f0:	10 92 1a 02 	sts	0x021A, r1
     5f4:	10 92 19 02 	sts	0x0219, r1
            TCNT0 = 0;
     5f8:	e2 e5       	ldi	r30, 0x52	; 82
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	10 82       	st	Z, r1
            TCCR0 = (1<<CS02) | (1<<CS00);
     5fe:	e3 e5       	ldi	r30, 0x53	; 83
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	85 e0       	ldi	r24, 0x05	; 5
     604:	80 83       	st	Z, r24
     606:	22 c0       	rjmp	.+68     	; 0x64c <keypad_entry+0xb4>
            while(keyMap[i] == key)
            {

                key_capture();
     608:	0e 94 20 01 	call	0x240	; 0x240 <key_capture>
                //-----------------------------------
                if(TCNT0 == 47)
     60c:	e2 e5       	ldi	r30, 0x52	; 82
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	80 81       	ld	r24, Z
     612:	8f 32       	cpi	r24, 0x2F	; 47
     614:	49 f4       	brne	.+18     	; 0x628 <keypad_entry+0x90>
                {
                    //PORTD |= (1<<6);
                    countMe++;
     616:	80 91 19 02 	lds	r24, 0x0219
     61a:	90 91 1a 02 	lds	r25, 0x021A
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	90 93 1a 02 	sts	0x021A, r25
     624:	80 93 19 02 	sts	0x0219, r24
                }
                if(countMe >= 5)  //3000
     628:	80 91 19 02 	lds	r24, 0x0219
     62c:	90 91 1a 02 	lds	r25, 0x021A
     630:	85 30       	cpi	r24, 0x05	; 5
     632:	91 05       	cpc	r25, r1
     634:	58 f0       	brcs	.+22     	; 0x64c <keypad_entry+0xb4>
                {
                    PORTD ^= (1<<6);
     636:	a2 e3       	ldi	r26, 0x32	; 50
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	e2 e3       	ldi	r30, 0x32	; 50
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	90 81       	ld	r25, Z
     640:	80 e4       	ldi	r24, 0x40	; 64
     642:	89 27       	eor	r24, r25
     644:	8c 93       	st	X, r24
                    request_change = 1;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	80 93 16 02 	sts	0x0216, r24
        {

            countMe = 0;
            TCNT0 = 0;
            TCCR0 = (1<<CS02) | (1<<CS00);
            while(keyMap[i] == key)
     64c:	80 91 1b 02 	lds	r24, 0x021B
     650:	88 2f       	mov	r24, r24
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	fc 01       	movw	r30, r24
     656:	e0 5a       	subi	r30, 0xA0	; 160
     658:	ff 4f       	sbci	r31, 0xFF	; 255
     65a:	90 81       	ld	r25, Z
     65c:	80 91 2b 02 	lds	r24, 0x022B
     660:	98 17       	cp	r25, r24
     662:	91 f2       	breq	.-92     	; 0x608 <keypad_entry+0x70>
                    PORTD ^= (1<<6);
                    request_change = 1;
                }
                //-----------------------------------
            }
            TCCR0 = 0;
     664:	e3 e5       	ldi	r30, 0x53	; 83
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	10 82       	st	Z, r1

            if(arr[i] == '*')
     66a:	80 91 1b 02 	lds	r24, 0x021B
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	fc 01       	movw	r30, r24
     674:	e0 59       	subi	r30, 0x90	; 144
     676:	ff 4f       	sbci	r31, 0xFF	; 255
     678:	80 81       	ld	r24, Z
     67a:	8a 32       	cpi	r24, 0x2A	; 42
     67c:	11 f5       	brne	.+68     	; 0x6c2 <keypad_entry+0x12a>
            {
                LCD_goToRowColumn(1,pos-1);
     67e:	80 91 1c 02 	lds	r24, 0x021C
     682:	88 2f       	mov	r24, r24
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	9c 01       	movw	r18, r24
     688:	21 50       	subi	r18, 0x01	; 1
     68a:	30 40       	sbci	r19, 0x00	; 0
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	b9 01       	movw	r22, r18
     692:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_goToRowColumn>
                LCD_displayCharacter(' ');
     696:	80 e2       	ldi	r24, 0x20	; 32
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LCD_displayCharacter>
                LCD_goToRowColumn(1,pos-2);
     69e:	80 91 1c 02 	lds	r24, 0x021C
     6a2:	88 2f       	mov	r24, r24
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	9c 01       	movw	r18, r24
     6a8:	22 50       	subi	r18, 0x02	; 2
     6aa:	30 40       	sbci	r19, 0x00	; 0
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	b9 01       	movw	r22, r18
     6b2:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_goToRowColumn>
                pos--;
     6b6:	80 91 1c 02 	lds	r24, 0x021C
     6ba:	81 50       	subi	r24, 0x01	; 1
     6bc:	80 93 1c 02 	sts	0x021C, r24
     6c0:	45 c0       	rjmp	.+138    	; 0x74c <keypad_entry+0x1b4>
                continue;
            }

            if(arr[i] == '#')
     6c2:	80 91 1b 02 	lds	r24, 0x021B
     6c6:	88 2f       	mov	r24, r24
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	fc 01       	movw	r30, r24
     6cc:	e0 59       	subi	r30, 0x90	; 144
     6ce:	ff 4f       	sbci	r31, 0xFF	; 255
     6d0:	80 81       	ld	r24, Z
     6d2:	83 32       	cpi	r24, 0x23	; 35
     6d4:	c1 f4       	brne	.+48     	; 0x706 <keypad_entry+0x16e>
            {
                if((request_change == 0) || (pass_change == 1)){enter_request=1; break;}
     6d6:	80 91 16 02 	lds	r24, 0x0216
     6da:	88 23       	and	r24, r24
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <keypad_entry+0x14e>
     6de:	80 91 15 02 	lds	r24, 0x0215
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	21 f4       	brne	.+8      	; 0x6ee <keypad_entry+0x156>
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	80 93 14 02 	sts	0x0214, r24
     6ec:	39 c0       	rjmp	.+114    	; 0x760 <keypad_entry+0x1c8>
                else if ( (request_change == 1) && (pass_change == 0) )
     6ee:	80 91 16 02 	lds	r24, 0x0216
     6f2:	81 30       	cpi	r24, 0x01	; 1
     6f4:	41 f4       	brne	.+16     	; 0x706 <keypad_entry+0x16e>
     6f6:	80 91 15 02 	lds	r24, 0x0215
     6fa:	88 23       	and	r24, r24
     6fc:	21 f4       	brne	.+8      	; 0x706 <keypad_entry+0x16e>
                {
                    password_change();
     6fe:	0e 94 22 07 	call	0xe44	; 0xe44 <password_change>
                    return 0;
     702:	19 86       	std	Y+9, r1	; 0x09
     704:	d3 c0       	rjmp	.+422    	; 0x8ac <__stack+0x4d>
                }

            }

            LCD_goToRowColumn(1,pos);
     706:	80 91 1c 02 	lds	r24, 0x021C
     70a:	28 2f       	mov	r18, r24
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	b9 01       	movw	r22, r18
     714:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_goToRowColumn>
            LCD_displayCharacter('*');
     718:	8a e2       	ldi	r24, 0x2A	; 42
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LCD_displayCharacter>
            entered[pos] = arr[i];
     720:	80 91 1c 02 	lds	r24, 0x021C
     724:	28 2f       	mov	r18, r24
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	80 91 1b 02 	lds	r24, 0x021B
     72c:	88 2f       	mov	r24, r24
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	fc 01       	movw	r30, r24
     732:	e0 59       	subi	r30, 0x90	; 144
     734:	ff 4f       	sbci	r31, 0xFF	; 255
     736:	80 81       	ld	r24, Z
     738:	f9 01       	movw	r30, r18
     73a:	eb 5d       	subi	r30, 0xDB	; 219
     73c:	fd 4f       	sbci	r31, 0xFD	; 253
     73e:	80 83       	st	Z, r24

            pos++;
     740:	80 91 1c 02 	lds	r24, 0x021C
     744:	8f 5f       	subi	r24, 0xFF	; 255
     746:	80 93 1c 02 	sts	0x021C, r24
     74a:	0a c0       	rjmp	.+20     	; 0x760 <keypad_entry+0x1c8>
{

key_capture();

if(key != 0xFF)
    for(i=0; i<16;i++)
     74c:	80 91 1b 02 	lds	r24, 0x021B
     750:	8f 5f       	subi	r24, 0xFF	; 255
     752:	80 93 1b 02 	sts	0x021B, r24
     756:	80 91 1b 02 	lds	r24, 0x021B
     75a:	80 31       	cpi	r24, 0x10	; 16
     75c:	08 f4       	brcc	.+2      	; 0x760 <keypad_entry+0x1c8>
     75e:	3b cf       	rjmp	.-394    	; 0x5d6 <keypad_entry+0x3e>
            pos++;
            break;
        }

// Check The Password
if((enter_request==1) & (pos==6))
     760:	80 91 14 02 	lds	r24, 0x0214
     764:	18 86       	std	Y+8, r1	; 0x08
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	11 f4       	brne	.+4      	; 0x76e <keypad_entry+0x1d6>
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	88 87       	std	Y+8, r24	; 0x08
     76e:	80 91 1c 02 	lds	r24, 0x021C
     772:	1f 82       	std	Y+7, r1	; 0x07
     774:	86 30       	cpi	r24, 0x06	; 6
     776:	11 f4       	brne	.+4      	; 0x77c <keypad_entry+0x1e4>
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	9f 83       	std	Y+7, r25	; 0x07
     77c:	88 85       	ldd	r24, Y+8	; 0x08
     77e:	9f 81       	ldd	r25, Y+7	; 0x07
     780:	89 23       	and	r24, r25
     782:	88 23       	and	r24, r24
     784:	09 f4       	brne	.+2      	; 0x788 <keypad_entry+0x1f0>
     786:	1d cf       	rjmp	.-454    	; 0x5c2 <keypad_entry+0x2a>
{
    enter_request = 0;
     788:	10 92 14 02 	sts	0x0214, r1
    pos = 0;
     78c:	10 92 1c 02 	sts	0x021C, r1
    nCorrect=0;
     790:	10 92 1d 02 	sts	0x021D, r1

    if(change_allowed == 1)
     794:	80 91 17 02 	lds	r24, 0x0217
     798:	81 30       	cpi	r24, 0x01	; 1
     79a:	f1 f4       	brne	.+60     	; 0x7d8 <keypad_entry+0x240>
    {
        for(i=0;i<6;i++) password[i] = entered[i];
     79c:	10 92 1b 02 	sts	0x021B, r1
     7a0:	15 c0       	rjmp	.+42     	; 0x7cc <keypad_entry+0x234>
     7a2:	80 91 1b 02 	lds	r24, 0x021B
     7a6:	28 2f       	mov	r18, r24
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	80 91 1b 02 	lds	r24, 0x021B
     7ae:	88 2f       	mov	r24, r24
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	fc 01       	movw	r30, r24
     7b4:	eb 5d       	subi	r30, 0xDB	; 219
     7b6:	fd 4f       	sbci	r31, 0xFD	; 253
     7b8:	80 81       	ld	r24, Z
     7ba:	f9 01       	movw	r30, r18
     7bc:	e0 58       	subi	r30, 0x80	; 128
     7be:	ff 4f       	sbci	r31, 0xFF	; 255
     7c0:	80 83       	st	Z, r24
     7c2:	80 91 1b 02 	lds	r24, 0x021B
     7c6:	8f 5f       	subi	r24, 0xFF	; 255
     7c8:	80 93 1b 02 	sts	0x021B, r24
     7cc:	80 91 1b 02 	lds	r24, 0x021B
     7d0:	86 30       	cpi	r24, 0x06	; 6
     7d2:	38 f3       	brcs	.-50     	; 0x7a2 <keypad_entry+0x20a>
        return 0;
     7d4:	19 86       	std	Y+9, r1	; 0x09
     7d6:	6a c0       	rjmp	.+212    	; 0x8ac <__stack+0x4d>
    }

    for(i=0; i<6;i++) if(entered[i] == password[i]) nCorrect++;
     7d8:	10 92 1b 02 	sts	0x021B, r1
     7dc:	1c c0       	rjmp	.+56     	; 0x816 <keypad_entry+0x27e>
     7de:	80 91 1b 02 	lds	r24, 0x021B
     7e2:	88 2f       	mov	r24, r24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	fc 01       	movw	r30, r24
     7e8:	eb 5d       	subi	r30, 0xDB	; 219
     7ea:	fd 4f       	sbci	r31, 0xFD	; 253
     7ec:	20 81       	ld	r18, Z
     7ee:	80 91 1b 02 	lds	r24, 0x021B
     7f2:	88 2f       	mov	r24, r24
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	fc 01       	movw	r30, r24
     7f8:	e0 58       	subi	r30, 0x80	; 128
     7fa:	ff 4f       	sbci	r31, 0xFF	; 255
     7fc:	80 81       	ld	r24, Z
     7fe:	28 17       	cp	r18, r24
     800:	29 f4       	brne	.+10     	; 0x80c <keypad_entry+0x274>
     802:	80 91 1d 02 	lds	r24, 0x021D
     806:	8f 5f       	subi	r24, 0xFF	; 255
     808:	80 93 1d 02 	sts	0x021D, r24
     80c:	80 91 1b 02 	lds	r24, 0x021B
     810:	8f 5f       	subi	r24, 0xFF	; 255
     812:	80 93 1b 02 	sts	0x021B, r24
     816:	80 91 1b 02 	lds	r24, 0x021B
     81a:	86 30       	cpi	r24, 0x06	; 6
     81c:	00 f3       	brcs	.-64     	; 0x7de <keypad_entry+0x246>

    if((nCorrect==6) & (request_change==0)){granted(); return 1;}
     81e:	80 91 1d 02 	lds	r24, 0x021D
     822:	1e 82       	std	Y+6, r1	; 0x06
     824:	86 30       	cpi	r24, 0x06	; 6
     826:	11 f4       	brne	.+4      	; 0x82c <keypad_entry+0x294>
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	8e 83       	std	Y+6, r24	; 0x06
     82c:	80 91 16 02 	lds	r24, 0x0216
     830:	1d 82       	std	Y+5, r1	; 0x05
     832:	88 23       	and	r24, r24
     834:	11 f4       	brne	.+4      	; 0x83a <keypad_entry+0x2a2>
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	9d 83       	std	Y+5, r25	; 0x05
     83a:	8e 81       	ldd	r24, Y+6	; 0x06
     83c:	9d 81       	ldd	r25, Y+5	; 0x05
     83e:	89 23       	and	r24, r25
     840:	88 23       	and	r24, r24
     842:	29 f0       	breq	.+10     	; 0x84e <keypad_entry+0x2b6>
     844:	0e 94 60 04 	call	0x8c0	; 0x8c0 <granted>
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	89 87       	std	Y+9, r24	; 0x09
     84c:	2f c0       	rjmp	.+94     	; 0x8ac <__stack+0x4d>
    else if((nCorrect==6) & (request_change==1)) return 2;        //change_allowed = 1;
     84e:	80 91 1d 02 	lds	r24, 0x021D
     852:	1c 82       	std	Y+4, r1	; 0x04
     854:	86 30       	cpi	r24, 0x06	; 6
     856:	11 f4       	brne	.+4      	; 0x85c <keypad_entry+0x2c4>
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	9c 83       	std	Y+4, r25	; 0x04
     85c:	80 91 16 02 	lds	r24, 0x0216
     860:	1b 82       	std	Y+3, r1	; 0x03
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	11 f4       	brne	.+4      	; 0x86a <__stack+0xb>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	8b 83       	std	Y+3, r24	; 0x03
     86a:	8c 81       	ldd	r24, Y+4	; 0x04
     86c:	9b 81       	ldd	r25, Y+3	; 0x03
     86e:	89 23       	and	r24, r25
     870:	88 23       	and	r24, r24
     872:	19 f0       	breq	.+6      	; 0x87a <__stack+0x1b>
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	89 87       	std	Y+9, r24	; 0x09
     878:	19 c0       	rjmp	.+50     	; 0x8ac <__stack+0x4d>
    else if((nCorrect!=6) & (request_change==1)) return 3;         //change_allowed = 0;
     87a:	80 91 1d 02 	lds	r24, 0x021D
     87e:	1a 82       	std	Y+2, r1	; 0x02
     880:	86 30       	cpi	r24, 0x06	; 6
     882:	11 f0       	breq	.+4      	; 0x888 <__stack+0x29>
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	9a 83       	std	Y+2, r25	; 0x02
     888:	80 91 16 02 	lds	r24, 0x0216
     88c:	19 82       	std	Y+1, r1	; 0x01
     88e:	81 30       	cpi	r24, 0x01	; 1
     890:	11 f4       	brne	.+4      	; 0x896 <__stack+0x37>
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	89 83       	std	Y+1, r24	; 0x01
     896:	8a 81       	ldd	r24, Y+2	; 0x02
     898:	99 81       	ldd	r25, Y+1	; 0x01
     89a:	89 23       	and	r24, r25
     89c:	88 23       	and	r24, r24
     89e:	19 f0       	breq	.+6      	; 0x8a6 <__stack+0x47>
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	89 87       	std	Y+9, r24	; 0x09
     8a4:	03 c0       	rjmp	.+6      	; 0x8ac <__stack+0x4d>
    else {denied(); return 0;}
     8a6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <denied>
     8aa:	19 86       	std	Y+9, r1	; 0x09

}
}}
     8ac:	89 85       	ldd	r24, Y+9	; 0x09
     8ae:	29 96       	adiw	r28, 0x09	; 9
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	08 95       	ret

000008c0 <granted>:


void granted()
{
     8c0:	df 93       	push	r29
     8c2:	cf 93       	push	r28
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	aa 97       	sbiw	r28, 0x2a	; 42
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
    LCD_displayStringRowColumn(1,0,"Granted!");
     8d4:	27 e8       	ldi	r18, 0x87	; 135
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	a9 01       	movw	r20, r18
     8e2:	0e 94 38 12 	call	0x2470	; 0x2470 <LCD_displayStringRowColumn>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	aa ef       	ldi	r26, 0xFA	; 250
     8ec:	b3 e4       	ldi	r27, 0x43	; 67
     8ee:	8f a3       	std	Y+39, r24	; 0x27
     8f0:	98 a7       	std	Y+40, r25	; 0x28
     8f2:	a9 a7       	std	Y+41, r26	; 0x29
     8f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8f6:	6f a1       	ldd	r22, Y+39	; 0x27
     8f8:	78 a5       	ldd	r23, Y+40	; 0x28
     8fa:	89 a5       	ldd	r24, Y+41	; 0x29
     8fc:	9a a5       	ldd	r25, Y+42	; 0x2a
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	4a e7       	ldi	r20, 0x7A	; 122
     904:	55 e4       	ldi	r21, 0x45	; 69
     906:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     90a:	dc 01       	movw	r26, r24
     90c:	cb 01       	movw	r24, r22
     90e:	8b a3       	std	Y+35, r24	; 0x23
     910:	9c a3       	std	Y+36, r25	; 0x24
     912:	ad a3       	std	Y+37, r26	; 0x25
     914:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     916:	6b a1       	ldd	r22, Y+35	; 0x23
     918:	7c a1       	ldd	r23, Y+36	; 0x24
     91a:	8d a1       	ldd	r24, Y+37	; 0x25
     91c:	9e a1       	ldd	r25, Y+38	; 0x26
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e8       	ldi	r20, 0x80	; 128
     924:	5f e3       	ldi	r21, 0x3F	; 63
     926:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
     92a:	88 23       	and	r24, r24
     92c:	2c f4       	brge	.+10     	; 0x938 <granted+0x78>
		__ticks = 1;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	9a a3       	std	Y+34, r25	; 0x22
     934:	89 a3       	std	Y+33, r24	; 0x21
     936:	3f c0       	rjmp	.+126    	; 0x9b6 <granted+0xf6>
	else if (__tmp > 65535)
     938:	6b a1       	ldd	r22, Y+35	; 0x23
     93a:	7c a1       	ldd	r23, Y+36	; 0x24
     93c:	8d a1       	ldd	r24, Y+37	; 0x25
     93e:	9e a1       	ldd	r25, Y+38	; 0x26
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	3f ef       	ldi	r19, 0xFF	; 255
     944:	4f e7       	ldi	r20, 0x7F	; 127
     946:	57 e4       	ldi	r21, 0x47	; 71
     948:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
     94c:	18 16       	cp	r1, r24
     94e:	4c f5       	brge	.+82     	; 0x9a2 <granted+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     950:	6f a1       	ldd	r22, Y+39	; 0x27
     952:	78 a5       	ldd	r23, Y+40	; 0x28
     954:	89 a5       	ldd	r24, Y+41	; 0x29
     956:	9a a5       	ldd	r25, Y+42	; 0x2a
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	40 e2       	ldi	r20, 0x20	; 32
     95e:	51 e4       	ldi	r21, 0x41	; 65
     960:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     964:	dc 01       	movw	r26, r24
     966:	cb 01       	movw	r24, r22
     968:	bc 01       	movw	r22, r24
     96a:	cd 01       	movw	r24, r26
     96c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     970:	dc 01       	movw	r26, r24
     972:	cb 01       	movw	r24, r22
     974:	9a a3       	std	Y+34, r25	; 0x22
     976:	89 a3       	std	Y+33, r24	; 0x21
     978:	0f c0       	rjmp	.+30     	; 0x998 <granted+0xd8>
     97a:	80 e9       	ldi	r24, 0x90	; 144
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	98 a3       	std	Y+32, r25	; 0x20
     980:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     982:	8f 8d       	ldd	r24, Y+31	; 0x1f
     984:	98 a1       	ldd	r25, Y+32	; 0x20
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	f1 f7       	brne	.-4      	; 0x986 <granted+0xc6>
     98a:	98 a3       	std	Y+32, r25	; 0x20
     98c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     98e:	89 a1       	ldd	r24, Y+33	; 0x21
     990:	9a a1       	ldd	r25, Y+34	; 0x22
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	9a a3       	std	Y+34, r25	; 0x22
     996:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     998:	89 a1       	ldd	r24, Y+33	; 0x21
     99a:	9a a1       	ldd	r25, Y+34	; 0x22
     99c:	00 97       	sbiw	r24, 0x00	; 0
     99e:	69 f7       	brne	.-38     	; 0x97a <granted+0xba>
     9a0:	14 c0       	rjmp	.+40     	; 0x9ca <granted+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a2:	6b a1       	ldd	r22, Y+35	; 0x23
     9a4:	7c a1       	ldd	r23, Y+36	; 0x24
     9a6:	8d a1       	ldd	r24, Y+37	; 0x25
     9a8:	9e a1       	ldd	r25, Y+38	; 0x26
     9aa:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	9a a3       	std	Y+34, r25	; 0x22
     9b4:	89 a3       	std	Y+33, r24	; 0x21
     9b6:	89 a1       	ldd	r24, Y+33	; 0x21
     9b8:	9a a1       	ldd	r25, Y+34	; 0x22
     9ba:	9e 8f       	std	Y+30, r25	; 0x1e
     9bc:	8d 8f       	std	Y+29, r24	; 0x1d
     9be:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <granted+0x102>
     9c6:	9e 8f       	std	Y+30, r25	; 0x1e
     9c8:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    motor_forward();
     9ca:	0e 94 8e 07 	call	0xf1c	; 0xf1c <motor_forward>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	aa e7       	ldi	r26, 0x7A	; 122
     9d4:	b5 e4       	ldi	r27, 0x45	; 69
     9d6:	89 8f       	std	Y+25, r24	; 0x19
     9d8:	9a 8f       	std	Y+26, r25	; 0x1a
     9da:	ab 8f       	std	Y+27, r26	; 0x1b
     9dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9de:	69 8d       	ldd	r22, Y+25	; 0x19
     9e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	4a e7       	ldi	r20, 0x7A	; 122
     9ec:	55 e4       	ldi	r21, 0x45	; 69
     9ee:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     9f2:	dc 01       	movw	r26, r24
     9f4:	cb 01       	movw	r24, r22
     9f6:	8d 8b       	std	Y+21, r24	; 0x15
     9f8:	9e 8b       	std	Y+22, r25	; 0x16
     9fa:	af 8b       	std	Y+23, r26	; 0x17
     9fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9fe:	6d 89       	ldd	r22, Y+21	; 0x15
     a00:	7e 89       	ldd	r23, Y+22	; 0x16
     a02:	8f 89       	ldd	r24, Y+23	; 0x17
     a04:	98 8d       	ldd	r25, Y+24	; 0x18
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e8       	ldi	r20, 0x80	; 128
     a0c:	5f e3       	ldi	r21, 0x3F	; 63
     a0e:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
     a12:	88 23       	and	r24, r24
     a14:	2c f4       	brge	.+10     	; 0xa20 <granted+0x160>
		__ticks = 1;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	9c 8b       	std	Y+20, r25	; 0x14
     a1c:	8b 8b       	std	Y+19, r24	; 0x13
     a1e:	3f c0       	rjmp	.+126    	; 0xa9e <granted+0x1de>
	else if (__tmp > 65535)
     a20:	6d 89       	ldd	r22, Y+21	; 0x15
     a22:	7e 89       	ldd	r23, Y+22	; 0x16
     a24:	8f 89       	ldd	r24, Y+23	; 0x17
     a26:	98 8d       	ldd	r25, Y+24	; 0x18
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	3f ef       	ldi	r19, 0xFF	; 255
     a2c:	4f e7       	ldi	r20, 0x7F	; 127
     a2e:	57 e4       	ldi	r21, 0x47	; 71
     a30:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
     a34:	18 16       	cp	r1, r24
     a36:	4c f5       	brge	.+82     	; 0xa8a <granted+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a38:	69 8d       	ldd	r22, Y+25	; 0x19
     a3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 e2       	ldi	r20, 0x20	; 32
     a46:	51 e4       	ldi	r21, 0x41	; 65
     a48:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     a4c:	dc 01       	movw	r26, r24
     a4e:	cb 01       	movw	r24, r22
     a50:	bc 01       	movw	r22, r24
     a52:	cd 01       	movw	r24, r26
     a54:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     a58:	dc 01       	movw	r26, r24
     a5a:	cb 01       	movw	r24, r22
     a5c:	9c 8b       	std	Y+20, r25	; 0x14
     a5e:	8b 8b       	std	Y+19, r24	; 0x13
     a60:	0f c0       	rjmp	.+30     	; 0xa80 <granted+0x1c0>
     a62:	80 e9       	ldi	r24, 0x90	; 144
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	9a 8b       	std	Y+18, r25	; 0x12
     a68:	89 8b       	std	Y+17, r24	; 0x11
     a6a:	89 89       	ldd	r24, Y+17	; 0x11
     a6c:	9a 89       	ldd	r25, Y+18	; 0x12
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <granted+0x1ae>
     a72:	9a 8b       	std	Y+18, r25	; 0x12
     a74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a76:	8b 89       	ldd	r24, Y+19	; 0x13
     a78:	9c 89       	ldd	r25, Y+20	; 0x14
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	9c 8b       	std	Y+20, r25	; 0x14
     a7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a80:	8b 89       	ldd	r24, Y+19	; 0x13
     a82:	9c 89       	ldd	r25, Y+20	; 0x14
     a84:	00 97       	sbiw	r24, 0x00	; 0
     a86:	69 f7       	brne	.-38     	; 0xa62 <granted+0x1a2>
     a88:	14 c0       	rjmp	.+40     	; 0xab2 <granted+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a8a:	6d 89       	ldd	r22, Y+21	; 0x15
     a8c:	7e 89       	ldd	r23, Y+22	; 0x16
     a8e:	8f 89       	ldd	r24, Y+23	; 0x17
     a90:	98 8d       	ldd	r25, Y+24	; 0x18
     a92:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	9c 8b       	std	Y+20, r25	; 0x14
     a9c:	8b 8b       	std	Y+19, r24	; 0x13
     a9e:	8b 89       	ldd	r24, Y+19	; 0x13
     aa0:	9c 89       	ldd	r25, Y+20	; 0x14
     aa2:	98 8b       	std	Y+16, r25	; 0x10
     aa4:	8f 87       	std	Y+15, r24	; 0x0f
     aa6:	8f 85       	ldd	r24, Y+15	; 0x0f
     aa8:	98 89       	ldd	r25, Y+16	; 0x10
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	f1 f7       	brne	.-4      	; 0xaaa <granted+0x1ea>
     aae:	98 8b       	std	Y+16, r25	; 0x10
     ab0:	8f 87       	std	Y+15, r24	; 0x0f
    //Check limit switch in a while loop
    //Wait 10 seconds
    _delay_ms(4000);
    motor_backward();
     ab2:	0e 94 a3 07 	call	0xf46	; 0xf46 <motor_backward>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	aa e7       	ldi	r26, 0x7A	; 122
     abc:	b5 e4       	ldi	r27, 0x45	; 69
     abe:	8b 87       	std	Y+11, r24	; 0x0b
     ac0:	9c 87       	std	Y+12, r25	; 0x0c
     ac2:	ad 87       	std	Y+13, r26	; 0x0d
     ac4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ac6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ac8:	7c 85       	ldd	r23, Y+12	; 0x0c
     aca:	8d 85       	ldd	r24, Y+13	; 0x0d
     acc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	4a e7       	ldi	r20, 0x7A	; 122
     ad4:	55 e4       	ldi	r21, 0x45	; 69
     ad6:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     ada:	dc 01       	movw	r26, r24
     adc:	cb 01       	movw	r24, r22
     ade:	8f 83       	std	Y+7, r24	; 0x07
     ae0:	98 87       	std	Y+8, r25	; 0x08
     ae2:	a9 87       	std	Y+9, r26	; 0x09
     ae4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ae6:	6f 81       	ldd	r22, Y+7	; 0x07
     ae8:	78 85       	ldd	r23, Y+8	; 0x08
     aea:	89 85       	ldd	r24, Y+9	; 0x09
     aec:	9a 85       	ldd	r25, Y+10	; 0x0a
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e8       	ldi	r20, 0x80	; 128
     af4:	5f e3       	ldi	r21, 0x3F	; 63
     af6:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
     afa:	88 23       	and	r24, r24
     afc:	2c f4       	brge	.+10     	; 0xb08 <granted+0x248>
		__ticks = 1;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	9e 83       	std	Y+6, r25	; 0x06
     b04:	8d 83       	std	Y+5, r24	; 0x05
     b06:	3f c0       	rjmp	.+126    	; 0xb86 <granted+0x2c6>
	else if (__tmp > 65535)
     b08:	6f 81       	ldd	r22, Y+7	; 0x07
     b0a:	78 85       	ldd	r23, Y+8	; 0x08
     b0c:	89 85       	ldd	r24, Y+9	; 0x09
     b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	3f ef       	ldi	r19, 0xFF	; 255
     b14:	4f e7       	ldi	r20, 0x7F	; 127
     b16:	57 e4       	ldi	r21, 0x47	; 71
     b18:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
     b1c:	18 16       	cp	r1, r24
     b1e:	4c f5       	brge	.+82     	; 0xb72 <granted+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b20:	6b 85       	ldd	r22, Y+11	; 0x0b
     b22:	7c 85       	ldd	r23, Y+12	; 0x0c
     b24:	8d 85       	ldd	r24, Y+13	; 0x0d
     b26:	9e 85       	ldd	r25, Y+14	; 0x0e
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	40 e2       	ldi	r20, 0x20	; 32
     b2e:	51 e4       	ldi	r21, 0x41	; 65
     b30:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	bc 01       	movw	r22, r24
     b3a:	cd 01       	movw	r24, r26
     b3c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     b40:	dc 01       	movw	r26, r24
     b42:	cb 01       	movw	r24, r22
     b44:	9e 83       	std	Y+6, r25	; 0x06
     b46:	8d 83       	std	Y+5, r24	; 0x05
     b48:	0f c0       	rjmp	.+30     	; 0xb68 <granted+0x2a8>
     b4a:	80 e9       	ldi	r24, 0x90	; 144
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	9c 83       	std	Y+4, r25	; 0x04
     b50:	8b 83       	std	Y+3, r24	; 0x03
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	9c 81       	ldd	r25, Y+4	; 0x04
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <granted+0x296>
     b5a:	9c 83       	std	Y+4, r25	; 0x04
     b5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b5e:	8d 81       	ldd	r24, Y+5	; 0x05
     b60:	9e 81       	ldd	r25, Y+6	; 0x06
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	9e 83       	std	Y+6, r25	; 0x06
     b66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b68:	8d 81       	ldd	r24, Y+5	; 0x05
     b6a:	9e 81       	ldd	r25, Y+6	; 0x06
     b6c:	00 97       	sbiw	r24, 0x00	; 0
     b6e:	69 f7       	brne	.-38     	; 0xb4a <granted+0x28a>
     b70:	14 c0       	rjmp	.+40     	; 0xb9a <granted+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b72:	6f 81       	ldd	r22, Y+7	; 0x07
     b74:	78 85       	ldd	r23, Y+8	; 0x08
     b76:	89 85       	ldd	r24, Y+9	; 0x09
     b78:	9a 85       	ldd	r25, Y+10	; 0x0a
     b7a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	9e 83       	std	Y+6, r25	; 0x06
     b84:	8d 83       	std	Y+5, r24	; 0x05
     b86:	8d 81       	ldd	r24, Y+5	; 0x05
     b88:	9e 81       	ldd	r25, Y+6	; 0x06
     b8a:	9a 83       	std	Y+2, r25	; 0x02
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	9a 81       	ldd	r25, Y+2	; 0x02
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	f1 f7       	brne	.-4      	; 0xb92 <granted+0x2d2>
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	89 83       	std	Y+1, r24	; 0x01
    //Check limit switch in a while loop
    _delay_ms(4000);
    motor_stop();
     b9a:	0e 94 b8 07 	call	0xf70	; 0xf70 <motor_stop>
}
     b9e:	aa 96       	adiw	r28, 0x2a	; 42
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <denied>:

void denied()
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	6c 97       	sbiw	r28, 0x1c	; 28
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
    triers++;
     bc4:	80 91 18 02 	lds	r24, 0x0218
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	80 93 18 02 	sts	0x0218, r24

    if(triers == 3)
     bce:	80 91 18 02 	lds	r24, 0x0218
     bd2:	83 30       	cpi	r24, 0x03	; 3
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <denied+0x28>
     bd6:	98 c0       	rjmp	.+304    	; 0xd08 <denied+0x158>
    {
        triers = 0;
     bd8:	10 92 18 02 	sts	0x0218, r1
        LCD_displayStringRowColumn(1,0,"Wait!");
     bdc:	20 e9       	ldi	r18, 0x90	; 144
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	a9 01       	movw	r20, r18
     bea:	0e 94 38 12 	call	0x2470	; 0x2470 <LCD_displayStringRowColumn>
        _delay_ms(5000 / double_time);
     bee:	80 91 86 00 	lds	r24, 0x0086
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	88 e8       	ldi	r24, 0x88	; 136
     bf8:	93 e1       	ldi	r25, 0x13	; 19
     bfa:	b9 01       	movw	r22, r18
     bfc:	0e 94 3b 1c 	call	0x3876	; 0x3876 <__divmodhi4>
     c00:	cb 01       	movw	r24, r22
     c02:	aa 27       	eor	r26, r26
     c04:	97 fd       	sbrc	r25, 7
     c06:	a0 95       	com	r26
     c08:	ba 2f       	mov	r27, r26
     c0a:	bc 01       	movw	r22, r24
     c0c:	cd 01       	movw	r24, r26
     c0e:	0e 94 1b 19 	call	0x3236	; 0x3236 <__floatsisf>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	89 8f       	std	Y+25, r24	; 0x19
     c18:	9a 8f       	std	Y+26, r25	; 0x1a
     c1a:	ab 8f       	std	Y+27, r26	; 0x1b
     c1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c1e:	69 8d       	ldd	r22, Y+25	; 0x19
     c20:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	4a e7       	ldi	r20, 0x7A	; 122
     c2c:	55 e4       	ldi	r21, 0x45	; 69
     c2e:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	8d 8b       	std	Y+21, r24	; 0x15
     c38:	9e 8b       	std	Y+22, r25	; 0x16
     c3a:	af 8b       	std	Y+23, r26	; 0x17
     c3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c3e:	6d 89       	ldd	r22, Y+21	; 0x15
     c40:	7e 89       	ldd	r23, Y+22	; 0x16
     c42:	8f 89       	ldd	r24, Y+23	; 0x17
     c44:	98 8d       	ldd	r25, Y+24	; 0x18
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e8       	ldi	r20, 0x80	; 128
     c4c:	5f e3       	ldi	r21, 0x3F	; 63
     c4e:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
     c52:	88 23       	and	r24, r24
     c54:	2c f4       	brge	.+10     	; 0xc60 <denied+0xb0>
		__ticks = 1;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	9c 8b       	std	Y+20, r25	; 0x14
     c5c:	8b 8b       	std	Y+19, r24	; 0x13
     c5e:	3f c0       	rjmp	.+126    	; 0xcde <denied+0x12e>
	else if (__tmp > 65535)
     c60:	6d 89       	ldd	r22, Y+21	; 0x15
     c62:	7e 89       	ldd	r23, Y+22	; 0x16
     c64:	8f 89       	ldd	r24, Y+23	; 0x17
     c66:	98 8d       	ldd	r25, Y+24	; 0x18
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	3f ef       	ldi	r19, 0xFF	; 255
     c6c:	4f e7       	ldi	r20, 0x7F	; 127
     c6e:	57 e4       	ldi	r21, 0x47	; 71
     c70:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
     c74:	18 16       	cp	r1, r24
     c76:	4c f5       	brge	.+82     	; 0xcca <denied+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c78:	69 8d       	ldd	r22, Y+25	; 0x19
     c7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e2       	ldi	r20, 0x20	; 32
     c86:	51 e4       	ldi	r21, 0x41	; 65
     c88:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	bc 01       	movw	r22, r24
     c92:	cd 01       	movw	r24, r26
     c94:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     c98:	dc 01       	movw	r26, r24
     c9a:	cb 01       	movw	r24, r22
     c9c:	9c 8b       	std	Y+20, r25	; 0x14
     c9e:	8b 8b       	std	Y+19, r24	; 0x13
     ca0:	0f c0       	rjmp	.+30     	; 0xcc0 <denied+0x110>
     ca2:	80 e9       	ldi	r24, 0x90	; 144
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	9a 8b       	std	Y+18, r25	; 0x12
     ca8:	89 8b       	std	Y+17, r24	; 0x11
     caa:	89 89       	ldd	r24, Y+17	; 0x11
     cac:	9a 89       	ldd	r25, Y+18	; 0x12
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	f1 f7       	brne	.-4      	; 0xcae <denied+0xfe>
     cb2:	9a 8b       	std	Y+18, r25	; 0x12
     cb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb6:	8b 89       	ldd	r24, Y+19	; 0x13
     cb8:	9c 89       	ldd	r25, Y+20	; 0x14
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	9c 8b       	std	Y+20, r25	; 0x14
     cbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc0:	8b 89       	ldd	r24, Y+19	; 0x13
     cc2:	9c 89       	ldd	r25, Y+20	; 0x14
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	69 f7       	brne	.-38     	; 0xca2 <denied+0xf2>
     cc8:	14 c0       	rjmp	.+40     	; 0xcf2 <denied+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cca:	6d 89       	ldd	r22, Y+21	; 0x15
     ccc:	7e 89       	ldd	r23, Y+22	; 0x16
     cce:	8f 89       	ldd	r24, Y+23	; 0x17
     cd0:	98 8d       	ldd	r25, Y+24	; 0x18
     cd2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	9c 8b       	std	Y+20, r25	; 0x14
     cdc:	8b 8b       	std	Y+19, r24	; 0x13
     cde:	8b 89       	ldd	r24, Y+19	; 0x13
     ce0:	9c 89       	ldd	r25, Y+20	; 0x14
     ce2:	98 8b       	std	Y+16, r25	; 0x10
     ce4:	8f 87       	std	Y+15, r24	; 0x0f
     ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce8:	98 89       	ldd	r25, Y+16	; 0x10
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	f1 f7       	brne	.-4      	; 0xcea <denied+0x13a>
     cee:	98 8b       	std	Y+16, r25	; 0x10
     cf0:	8f 87       	std	Y+15, r24	; 0x0f
        default_screen();
     cf2:	0e 94 0a 07 	call	0xe14	; 0xe14 <default_screen>
        double_time = double_time*2;
     cf6:	80 91 86 00 	lds	r24, 0x0086
     cfa:	88 2f       	mov	r24, r24
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	80 93 86 00 	sts	0x0086, r24
     d06:	7d c0       	rjmp	.+250    	; 0xe02 <denied+0x252>
    }
    else
    {
        LCD_displayStringRowColumn(1,0,"Try Again!");
     d08:	26 e9       	ldi	r18, 0x96	; 150
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	a9 01       	movw	r20, r18
     d16:	0e 94 38 12 	call	0x2470	; 0x2470 <LCD_displayStringRowColumn>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	aa ef       	ldi	r26, 0xFA	; 250
     d20:	b3 e4       	ldi	r27, 0x43	; 67
     d22:	8b 87       	std	Y+11, r24	; 0x0b
     d24:	9c 87       	std	Y+12, r25	; 0x0c
     d26:	ad 87       	std	Y+13, r26	; 0x0d
     d28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d30:	9e 85       	ldd	r25, Y+14	; 0x0e
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	4a e7       	ldi	r20, 0x7A	; 122
     d38:	55 e4       	ldi	r21, 0x45	; 69
     d3a:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	8f 83       	std	Y+7, r24	; 0x07
     d44:	98 87       	std	Y+8, r25	; 0x08
     d46:	a9 87       	std	Y+9, r26	; 0x09
     d48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d4a:	6f 81       	ldd	r22, Y+7	; 0x07
     d4c:	78 85       	ldd	r23, Y+8	; 0x08
     d4e:	89 85       	ldd	r24, Y+9	; 0x09
     d50:	9a 85       	ldd	r25, Y+10	; 0x0a
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e8       	ldi	r20, 0x80	; 128
     d58:	5f e3       	ldi	r21, 0x3F	; 63
     d5a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
     d5e:	88 23       	and	r24, r24
     d60:	2c f4       	brge	.+10     	; 0xd6c <denied+0x1bc>
		__ticks = 1;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9e 83       	std	Y+6, r25	; 0x06
     d68:	8d 83       	std	Y+5, r24	; 0x05
     d6a:	3f c0       	rjmp	.+126    	; 0xdea <denied+0x23a>
	else if (__tmp > 65535)
     d6c:	6f 81       	ldd	r22, Y+7	; 0x07
     d6e:	78 85       	ldd	r23, Y+8	; 0x08
     d70:	89 85       	ldd	r24, Y+9	; 0x09
     d72:	9a 85       	ldd	r25, Y+10	; 0x0a
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	3f ef       	ldi	r19, 0xFF	; 255
     d78:	4f e7       	ldi	r20, 0x7F	; 127
     d7a:	57 e4       	ldi	r21, 0x47	; 71
     d7c:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
     d80:	18 16       	cp	r1, r24
     d82:	4c f5       	brge	.+82     	; 0xdd6 <denied+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d84:	6b 85       	ldd	r22, Y+11	; 0x0b
     d86:	7c 85       	ldd	r23, Y+12	; 0x0c
     d88:	8d 85       	ldd	r24, Y+13	; 0x0d
     d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	9e 83       	std	Y+6, r25	; 0x06
     daa:	8d 83       	std	Y+5, r24	; 0x05
     dac:	0f c0       	rjmp	.+30     	; 0xdcc <denied+0x21c>
     dae:	80 e9       	ldi	r24, 0x90	; 144
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	9c 83       	std	Y+4, r25	; 0x04
     db4:	8b 83       	std	Y+3, r24	; 0x03
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	9c 81       	ldd	r25, Y+4	; 0x04
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <denied+0x20a>
     dbe:	9c 83       	std	Y+4, r25	; 0x04
     dc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	9e 83       	std	Y+6, r25	; 0x06
     dca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dcc:	8d 81       	ldd	r24, Y+5	; 0x05
     dce:	9e 81       	ldd	r25, Y+6	; 0x06
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	69 f7       	brne	.-38     	; 0xdae <denied+0x1fe>
     dd4:	14 c0       	rjmp	.+40     	; 0xdfe <denied+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd6:	6f 81       	ldd	r22, Y+7	; 0x07
     dd8:	78 85       	ldd	r23, Y+8	; 0x08
     dda:	89 85       	ldd	r24, Y+9	; 0x09
     ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dde:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9e 83       	std	Y+6, r25	; 0x06
     de8:	8d 83       	std	Y+5, r24	; 0x05
     dea:	8d 81       	ldd	r24, Y+5	; 0x05
     dec:	9e 81       	ldd	r25, Y+6	; 0x06
     dee:	9a 83       	std	Y+2, r25	; 0x02
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <denied+0x246>
     dfa:	9a 83       	std	Y+2, r25	; 0x02
     dfc:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);
        default_screen();
     dfe:	0e 94 0a 07 	call	0xe14	; 0xe14 <default_screen>
    }

}
     e02:	6c 96       	adiw	r28, 0x1c	; 28
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <default_screen>:

void default_screen()
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
LCD_clearScreen();
     e1c:	0e 94 74 12 	call	0x24e8	; 0x24e8 <LCD_clearScreen>
LCD_displayStringRowColumn(0,0,"Enter Password:");
     e20:	21 ea       	ldi	r18, 0xA1	; 161
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	a9 01       	movw	r20, r18
     e2e:	0e 94 38 12 	call	0x2470	; 0x2470 <LCD_displayStringRowColumn>
LCD_goToRowColumn(1,0);
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_goToRowColumn>
}
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <password_change>:

void password_change()
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
    pass_change = 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 15 02 	sts	0x0215, r24
    LCD_clearScreen();
     e52:	0e 94 74 12 	call	0x24e8	; 0x24e8 <LCD_clearScreen>
    LCD_displayStringRowColumn(0,0,"Old Password:");
     e56:	21 eb       	ldi	r18, 0xB1	; 177
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	a9 01       	movw	r20, r18
     e64:	0e 94 38 12 	call	0x2470	; 0x2470 <LCD_displayStringRowColumn>
    LCD_goToRowColumn(1,0);
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_goToRowColumn>

    if(keypad_entry()==2)
     e74:	0e 94 cc 02 	call	0x598	; 0x598 <keypad_entry>
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	51 f5       	brne	.+84     	; 0xed0 <password_change+0x8c>
    {
        change_allowed = 1;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	80 93 17 02 	sts	0x0217, r24
        LCD_clearScreen();
     e82:	0e 94 74 12 	call	0x24e8	; 0x24e8 <LCD_clearScreen>
        LCD_displayStringRowColumn(0,0,"New Password:");
     e86:	2f eb       	ldi	r18, 0xBF	; 191
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	a9 01       	movw	r20, r18
     e94:	0e 94 38 12 	call	0x2470	; 0x2470 <LCD_displayStringRowColumn>
        LCD_goToRowColumn(1,0);
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_goToRowColumn>

        change_allowed = keypad_entry();
     ea4:	0e 94 cc 02 	call	0x598	; 0x598 <keypad_entry>
     ea8:	80 93 17 02 	sts	0x0217, r24

        LCD_clearScreen();
     eac:	0e 94 74 12 	call	0x24e8	; 0x24e8 <LCD_clearScreen>
        LCD_displayStringRowColumn(0,0,"Password Updated");
     eb0:	2d ec       	ldi	r18, 0xCD	; 205
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	a9 01       	movw	r20, r18
     ebe:	0e 94 38 12 	call	0x2470	; 0x2470 <LCD_displayStringRowColumn>
        LCD_goToRowColumn(1,0);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_goToRowColumn>
     ece:	15 c0       	rjmp	.+42     	; 0xefa <password_change+0xb6>
    }
    else if(keypad_entry()==3)
     ed0:	0e 94 cc 02 	call	0x598	; 0x598 <keypad_entry>
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	89 f4       	brne	.+34     	; 0xefa <password_change+0xb6>
    {
        LCD_clearScreen();
     ed8:	0e 94 74 12 	call	0x24e8	; 0x24e8 <LCD_clearScreen>
        LCD_displayStringRowColumn(0,0,"Wrong Password!");
     edc:	2e ed       	ldi	r18, 0xDE	; 222
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	a9 01       	movw	r20, r18
     eea:	0e 94 38 12 	call	0x2470	; 0x2470 <LCD_displayStringRowColumn>
        LCD_goToRowColumn(1,0);
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_goToRowColumn>
    }
PORTD ^= (1<<6);
     efa:	a2 e3       	ldi	r26, 0x32	; 50
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e2 e3       	ldi	r30, 0x32	; 50
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	90 81       	ld	r25, Z
     f04:	80 e4       	ldi	r24, 0x40	; 64
     f06:	89 27       	eor	r24, r25
     f08:	8c 93       	st	X, r24
default_screen();
     f0a:	0e 94 0a 07 	call	0xe14	; 0xe14 <default_screen>
request_change = 0;
     f0e:	10 92 16 02 	sts	0x0216, r1
pass_change = 0;
     f12:	10 92 15 02 	sts	0x0215, r1
}
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <motor_forward>:

void motor_forward()
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
    PORTD &= ~(1<<4);
     f24:	a2 e3       	ldi	r26, 0x32	; 50
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e2 e3       	ldi	r30, 0x32	; 50
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 7e       	andi	r24, 0xEF	; 239
     f30:	8c 93       	st	X, r24
    PORTD |= (1<<3);
     f32:	a2 e3       	ldi	r26, 0x32	; 50
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e2 e3       	ldi	r30, 0x32	; 50
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	88 60       	ori	r24, 0x08	; 8
     f3e:	8c 93       	st	X, r24
}
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <motor_backward>:

void motor_backward()
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
    PORTD &= ~(1<<3);
     f4e:	a2 e3       	ldi	r26, 0x32	; 50
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e2 e3       	ldi	r30, 0x32	; 50
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	87 7f       	andi	r24, 0xF7	; 247
     f5a:	8c 93       	st	X, r24
    PORTD |= (1<<4);
     f5c:	a2 e3       	ldi	r26, 0x32	; 50
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e2 e3       	ldi	r30, 0x32	; 50
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	80 61       	ori	r24, 0x10	; 16
     f68:	8c 93       	st	X, r24
}
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <motor_stop>:

void motor_stop()
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
    PORTD &= ~(1<<3);
     f78:	a2 e3       	ldi	r26, 0x32	; 50
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e2 e3       	ldi	r30, 0x32	; 50
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	87 7f       	andi	r24, 0xF7	; 247
     f84:	8c 93       	st	X, r24
    PORTD &= ~(1<<4);
     f86:	a2 e3       	ldi	r26, 0x32	; 50
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e2 e3       	ldi	r30, 0x32	; 50
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	8f 7e       	andi	r24, 0xEF	; 239
     f92:	8c 93       	st	X, r24
}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <timer0_init>:

void timer0_init()
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = (1<<WGM01);
     fa2:	e3 e5       	ldi	r30, 0x53	; 83
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	88 e0       	ldi	r24, 0x08	; 8
     fa8:	80 83       	st	Z, r24
    sei();
     faa:	78 94       	sei
}
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <LCD_init>:
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	6c 97       	sbiw	r28, 0x1c	; 28
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a0 ef       	ldi	r26, 0xF0	; 240
     fcc:	b1 e4       	ldi	r27, 0x41	; 65
     fce:	89 8f       	std	Y+25, r24	; 0x19
     fd0:	9a 8f       	std	Y+26, r25	; 0x1a
     fd2:	ab 8f       	std	Y+27, r26	; 0x1b
     fd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	4a e7       	ldi	r20, 0x7A	; 122
     fe4:	55 e4       	ldi	r21, 0x45	; 69
     fe6:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	8d 8b       	std	Y+21, r24	; 0x15
     ff0:	9e 8b       	std	Y+22, r25	; 0x16
     ff2:	af 8b       	std	Y+23, r26	; 0x17
     ff4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ff6:	6d 89       	ldd	r22, Y+21	; 0x15
     ff8:	7e 89       	ldd	r23, Y+22	; 0x16
     ffa:	8f 89       	ldd	r24, Y+23	; 0x17
     ffc:	98 8d       	ldd	r25, Y+24	; 0x18
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e8       	ldi	r20, 0x80	; 128
    1004:	5f e3       	ldi	r21, 0x3F	; 63
    1006:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    100a:	88 23       	and	r24, r24
    100c:	2c f4       	brge	.+10     	; 0x1018 <LCD_init+0x66>
		__ticks = 1;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9c 8b       	std	Y+20, r25	; 0x14
    1014:	8b 8b       	std	Y+19, r24	; 0x13
    1016:	3f c0       	rjmp	.+126    	; 0x1096 <LCD_init+0xe4>
	else if (__tmp > 65535)
    1018:	6d 89       	ldd	r22, Y+21	; 0x15
    101a:	7e 89       	ldd	r23, Y+22	; 0x16
    101c:	8f 89       	ldd	r24, Y+23	; 0x17
    101e:	98 8d       	ldd	r25, Y+24	; 0x18
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	3f ef       	ldi	r19, 0xFF	; 255
    1024:	4f e7       	ldi	r20, 0x7F	; 127
    1026:	57 e4       	ldi	r21, 0x47	; 71
    1028:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    102c:	18 16       	cp	r1, r24
    102e:	4c f5       	brge	.+82     	; 0x1082 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1030:	69 8d       	ldd	r22, Y+25	; 0x19
    1032:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1034:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1036:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e2       	ldi	r20, 0x20	; 32
    103e:	51 e4       	ldi	r21, 0x41	; 65
    1040:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
    1058:	0f c0       	rjmp	.+30     	; 0x1078 <LCD_init+0xc6>
    105a:	80 e9       	ldi	r24, 0x90	; 144
    105c:	91 e0       	ldi	r25, 0x01	; 1
    105e:	9a 8b       	std	Y+18, r25	; 0x12
    1060:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1062:	89 89       	ldd	r24, Y+17	; 0x11
    1064:	9a 89       	ldd	r25, Y+18	; 0x12
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <LCD_init+0xb4>
    106a:	9a 8b       	std	Y+18, r25	; 0x12
    106c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106e:	8b 89       	ldd	r24, Y+19	; 0x13
    1070:	9c 89       	ldd	r25, Y+20	; 0x14
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	9c 8b       	std	Y+20, r25	; 0x14
    1076:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1078:	8b 89       	ldd	r24, Y+19	; 0x13
    107a:	9c 89       	ldd	r25, Y+20	; 0x14
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	69 f7       	brne	.-38     	; 0x105a <LCD_init+0xa8>
    1080:	14 c0       	rjmp	.+40     	; 0x10aa <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1082:	6d 89       	ldd	r22, Y+21	; 0x15
    1084:	7e 89       	ldd	r23, Y+22	; 0x16
    1086:	8f 89       	ldd	r24, Y+23	; 0x17
    1088:	98 8d       	ldd	r25, Y+24	; 0x18
    108a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	9c 8b       	std	Y+20, r25	; 0x14
    1094:	8b 8b       	std	Y+19, r24	; 0x13
    1096:	8b 89       	ldd	r24, Y+19	; 0x13
    1098:	9c 89       	ldd	r25, Y+20	; 0x14
    109a:	98 8b       	std	Y+16, r25	; 0x10
    109c:	8f 87       	std	Y+15, r24	; 0x0f
    109e:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a0:	98 89       	ldd	r25, Y+16	; 0x10
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <LCD_init+0xf0>
    10a6:	98 8b       	std	Y+16, r25	; 0x10
    10a8:	8f 87       	std	Y+15, r24	; 0x0f
    10aa:	ea e3       	ldi	r30, 0x3A	; 58
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	80 83       	st	Z, r24
    10b2:	a7 e3       	ldi	r26, 0x37	; 55
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e7 e3       	ldi	r30, 0x37	; 55
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	8e 60       	ori	r24, 0x0E	; 14
    10be:	8c 93       	st	X, r24
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <LCD_sendCommand>
    10c6:	8c e0       	ldi	r24, 0x0C	; 12
    10c8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <LCD_sendCommand>
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <LCD_sendCommand>
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a0 ef       	ldi	r26, 0xF0	; 240
    10d8:	b1 e4       	ldi	r27, 0x41	; 65
    10da:	8b 87       	std	Y+11, r24	; 0x0b
    10dc:	9c 87       	std	Y+12, r25	; 0x0c
    10de:	ad 87       	std	Y+13, r26	; 0x0d
    10e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	4a e7       	ldi	r20, 0x7A	; 122
    10f0:	55 e4       	ldi	r21, 0x45	; 69
    10f2:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	8f 83       	std	Y+7, r24	; 0x07
    10fc:	98 87       	std	Y+8, r25	; 0x08
    10fe:	a9 87       	std	Y+9, r26	; 0x09
    1100:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1102:	6f 81       	ldd	r22, Y+7	; 0x07
    1104:	78 85       	ldd	r23, Y+8	; 0x08
    1106:	89 85       	ldd	r24, Y+9	; 0x09
    1108:	9a 85       	ldd	r25, Y+10	; 0x0a
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e8       	ldi	r20, 0x80	; 128
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    1116:	88 23       	and	r24, r24
    1118:	2c f4       	brge	.+10     	; 0x1124 <LCD_init+0x172>
		__ticks = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	9e 83       	std	Y+6, r25	; 0x06
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	3f c0       	rjmp	.+126    	; 0x11a2 <LCD_init+0x1f0>
	else if (__tmp > 65535)
    1124:	6f 81       	ldd	r22, Y+7	; 0x07
    1126:	78 85       	ldd	r23, Y+8	; 0x08
    1128:	89 85       	ldd	r24, Y+9	; 0x09
    112a:	9a 85       	ldd	r25, Y+10	; 0x0a
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	3f ef       	ldi	r19, 0xFF	; 255
    1130:	4f e7       	ldi	r20, 0x7F	; 127
    1132:	57 e4       	ldi	r21, 0x47	; 71
    1134:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    1138:	18 16       	cp	r1, r24
    113a:	4c f5       	brge	.+82     	; 0x118e <LCD_init+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113c:	6b 85       	ldd	r22, Y+11	; 0x0b
    113e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1140:	8d 85       	ldd	r24, Y+13	; 0x0d
    1142:	9e 85       	ldd	r25, Y+14	; 0x0e
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e2       	ldi	r20, 0x20	; 32
    114a:	51 e4       	ldi	r21, 0x41	; 65
    114c:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	9e 83       	std	Y+6, r25	; 0x06
    1162:	8d 83       	std	Y+5, r24	; 0x05
    1164:	0f c0       	rjmp	.+30     	; 0x1184 <LCD_init+0x1d2>
    1166:	80 e9       	ldi	r24, 0x90	; 144
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	9c 83       	std	Y+4, r25	; 0x04
    116c:	8b 83       	std	Y+3, r24	; 0x03
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <LCD_init+0x1c0>
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	69 f7       	brne	.-38     	; 0x1166 <LCD_init+0x1b4>
    118c:	14 c0       	rjmp	.+40     	; 0x11b6 <LCD_init+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    118e:	6f 81       	ldd	r22, Y+7	; 0x07
    1190:	78 85       	ldd	r23, Y+8	; 0x08
    1192:	89 85       	ldd	r24, Y+9	; 0x09
    1194:	9a 85       	ldd	r25, Y+10	; 0x0a
    1196:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <LCD_init+0x1fc>
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	6c 96       	adiw	r28, 0x1c	; 28
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <LCD_sendCommand>:
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	c5 56       	subi	r28, 0x65	; 101
    11d6:	d0 40       	sbci	r29, 0x00	; 0
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	fe 01       	movw	r30, r28
    11e4:	eb 59       	subi	r30, 0x9B	; 155
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	80 83       	st	Z, r24
    11ea:	de 01       	movw	r26, r28
    11ec:	ac 59       	subi	r26, 0x9C	; 156
    11ee:	bf 4f       	sbci	r27, 0xFF	; 255
    11f0:	fe 01       	movw	r30, r28
    11f2:	eb 59       	subi	r30, 0x9B	; 155
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	80 81       	ld	r24, Z
    11f8:	80 7f       	andi	r24, 0xF0	; 240
    11fa:	8c 93       	st	X, r24
    11fc:	de 01       	movw	r26, r28
    11fe:	ad 59       	subi	r26, 0x9D	; 157
    1200:	bf 4f       	sbci	r27, 0xFF	; 255
    1202:	fe 01       	movw	r30, r28
    1204:	eb 59       	subi	r30, 0x9B	; 155
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 81       	ld	r24, Z
    120a:	82 95       	swap	r24
    120c:	80 7f       	andi	r24, 0xF0	; 240
    120e:	8c 93       	st	X, r24
    1210:	a8 e3       	ldi	r26, 0x38	; 56
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e8 e3       	ldi	r30, 0x38	; 56
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8d 7f       	andi	r24, 0xFD	; 253
    121c:	8c 93       	st	X, r24
    121e:	a8 e3       	ldi	r26, 0x38	; 56
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e8 e3       	ldi	r30, 0x38	; 56
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8b 7f       	andi	r24, 0xFB	; 251
    122a:	8c 93       	st	X, r24
    122c:	fe 01       	movw	r30, r28
    122e:	e1 5a       	subi	r30, 0xA1	; 161
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a0 e8       	ldi	r26, 0x80	; 128
    1238:	bf e3       	ldi	r27, 0x3F	; 63
    123a:	80 83       	st	Z, r24
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	a2 83       	std	Z+2, r26	; 0x02
    1240:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1242:	8e 01       	movw	r16, r28
    1244:	05 5a       	subi	r16, 0xA5	; 165
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	fe 01       	movw	r30, r28
    124a:	e1 5a       	subi	r30, 0xA1	; 161
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	60 81       	ld	r22, Z
    1250:	71 81       	ldd	r23, Z+1	; 0x01
    1252:	82 81       	ldd	r24, Z+2	; 0x02
    1254:	93 81       	ldd	r25, Z+3	; 0x03
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	4a e7       	ldi	r20, 0x7A	; 122
    125c:	55 e4       	ldi	r21, 0x45	; 69
    125e:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	f8 01       	movw	r30, r16
    1268:	80 83       	st	Z, r24
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	a2 83       	std	Z+2, r26	; 0x02
    126e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1270:	fe 01       	movw	r30, r28
    1272:	e5 5a       	subi	r30, 0xA5	; 165
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	60 81       	ld	r22, Z
    1278:	71 81       	ldd	r23, Z+1	; 0x01
    127a:	82 81       	ldd	r24, Z+2	; 0x02
    127c:	93 81       	ldd	r25, Z+3	; 0x03
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e8       	ldi	r20, 0x80	; 128
    1284:	5f e3       	ldi	r21, 0x3F	; 63
    1286:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    128a:	88 23       	and	r24, r24
    128c:	44 f4       	brge	.+16     	; 0x129e <LCD_sendCommand+0xd6>
		__ticks = 1;
    128e:	fe 01       	movw	r30, r28
    1290:	e7 5a       	subi	r30, 0xA7	; 167
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	91 83       	std	Z+1, r25	; 0x01
    129a:	80 83       	st	Z, r24
    129c:	64 c0       	rjmp	.+200    	; 0x1366 <LCD_sendCommand+0x19e>
	else if (__tmp > 65535)
    129e:	fe 01       	movw	r30, r28
    12a0:	e5 5a       	subi	r30, 0xA5	; 165
    12a2:	ff 4f       	sbci	r31, 0xFF	; 255
    12a4:	60 81       	ld	r22, Z
    12a6:	71 81       	ldd	r23, Z+1	; 0x01
    12a8:	82 81       	ldd	r24, Z+2	; 0x02
    12aa:	93 81       	ldd	r25, Z+3	; 0x03
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	3f ef       	ldi	r19, 0xFF	; 255
    12b0:	4f e7       	ldi	r20, 0x7F	; 127
    12b2:	57 e4       	ldi	r21, 0x47	; 71
    12b4:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    12b8:	18 16       	cp	r1, r24
    12ba:	0c f0       	brlt	.+2      	; 0x12be <LCD_sendCommand+0xf6>
    12bc:	43 c0       	rjmp	.+134    	; 0x1344 <LCD_sendCommand+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12be:	fe 01       	movw	r30, r28
    12c0:	e1 5a       	subi	r30, 0xA1	; 161
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	60 81       	ld	r22, Z
    12c6:	71 81       	ldd	r23, Z+1	; 0x01
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	93 81       	ldd	r25, Z+3	; 0x03
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e2       	ldi	r20, 0x20	; 32
    12d2:	51 e4       	ldi	r21, 0x41	; 65
    12d4:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	8e 01       	movw	r16, r28
    12de:	07 5a       	subi	r16, 0xA7	; 167
    12e0:	1f 4f       	sbci	r17, 0xFF	; 255
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	f8 01       	movw	r30, r16
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	80 83       	st	Z, r24
    12f4:	1f c0       	rjmp	.+62     	; 0x1334 <LCD_sendCommand+0x16c>
    12f6:	fe 01       	movw	r30, r28
    12f8:	e9 5a       	subi	r30, 0xA9	; 169
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	80 e9       	ldi	r24, 0x90	; 144
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	80 83       	st	Z, r24
    1304:	fe 01       	movw	r30, r28
    1306:	e9 5a       	subi	r30, 0xA9	; 169
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <LCD_sendCommand+0x146>
    1312:	fe 01       	movw	r30, r28
    1314:	e9 5a       	subi	r30, 0xA9	; 169
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131c:	de 01       	movw	r26, r28
    131e:	a7 5a       	subi	r26, 0xA7	; 167
    1320:	bf 4f       	sbci	r27, 0xFF	; 255
    1322:	fe 01       	movw	r30, r28
    1324:	e7 5a       	subi	r30, 0xA7	; 167
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	80 81       	ld	r24, Z
    132a:	91 81       	ldd	r25, Z+1	; 0x01
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	11 96       	adiw	r26, 0x01	; 1
    1330:	9c 93       	st	X, r25
    1332:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1334:	fe 01       	movw	r30, r28
    1336:	e7 5a       	subi	r30, 0xA7	; 167
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	80 81       	ld	r24, Z
    133c:	91 81       	ldd	r25, Z+1	; 0x01
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	d1 f6       	brne	.-76     	; 0x12f6 <LCD_sendCommand+0x12e>
    1342:	27 c0       	rjmp	.+78     	; 0x1392 <LCD_sendCommand+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1344:	8e 01       	movw	r16, r28
    1346:	07 5a       	subi	r16, 0xA7	; 167
    1348:	1f 4f       	sbci	r17, 0xFF	; 255
    134a:	fe 01       	movw	r30, r28
    134c:	e5 5a       	subi	r30, 0xA5	; 165
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	60 81       	ld	r22, Z
    1352:	71 81       	ldd	r23, Z+1	; 0x01
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	f8 01       	movw	r30, r16
    1362:	91 83       	std	Z+1, r25	; 0x01
    1364:	80 83       	st	Z, r24
    1366:	de 01       	movw	r26, r28
    1368:	ab 5a       	subi	r26, 0xAB	; 171
    136a:	bf 4f       	sbci	r27, 0xFF	; 255
    136c:	fe 01       	movw	r30, r28
    136e:	e7 5a       	subi	r30, 0xA7	; 167
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	80 81       	ld	r24, Z
    1374:	91 81       	ldd	r25, Z+1	; 0x01
    1376:	8d 93       	st	X+, r24
    1378:	9c 93       	st	X, r25
    137a:	fe 01       	movw	r30, r28
    137c:	eb 5a       	subi	r30, 0xAB	; 171
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <LCD_sendCommand+0x1bc>
    1388:	fe 01       	movw	r30, r28
    138a:	eb 5a       	subi	r30, 0xAB	; 171
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	91 83       	std	Z+1, r25	; 0x01
    1390:	80 83       	st	Z, r24
    1392:	a8 e3       	ldi	r26, 0x38	; 56
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e8 e3       	ldi	r30, 0x38	; 56
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	88 60       	ori	r24, 0x08	; 8
    139e:	8c 93       	st	X, r24
    13a0:	fe 01       	movw	r30, r28
    13a2:	ef 5a       	subi	r30, 0xAF	; 175
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a0 e8       	ldi	r26, 0x80	; 128
    13ac:	bf e3       	ldi	r27, 0x3F	; 63
    13ae:	80 83       	st	Z, r24
    13b0:	91 83       	std	Z+1, r25	; 0x01
    13b2:	a2 83       	std	Z+2, r26	; 0x02
    13b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b6:	8e 01       	movw	r16, r28
    13b8:	03 5b       	subi	r16, 0xB3	; 179
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	fe 01       	movw	r30, r28
    13be:	ef 5a       	subi	r30, 0xAF	; 175
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	60 81       	ld	r22, Z
    13c4:	71 81       	ldd	r23, Z+1	; 0x01
    13c6:	82 81       	ldd	r24, Z+2	; 0x02
    13c8:	93 81       	ldd	r25, Z+3	; 0x03
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	4a e7       	ldi	r20, 0x7A	; 122
    13d0:	55 e4       	ldi	r21, 0x45	; 69
    13d2:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	f8 01       	movw	r30, r16
    13dc:	80 83       	st	Z, r24
    13de:	91 83       	std	Z+1, r25	; 0x01
    13e0:	a2 83       	std	Z+2, r26	; 0x02
    13e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13e4:	fe 01       	movw	r30, r28
    13e6:	e3 5b       	subi	r30, 0xB3	; 179
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	60 81       	ld	r22, Z
    13ec:	71 81       	ldd	r23, Z+1	; 0x01
    13ee:	82 81       	ldd	r24, Z+2	; 0x02
    13f0:	93 81       	ldd	r25, Z+3	; 0x03
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5f e3       	ldi	r21, 0x3F	; 63
    13fa:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    13fe:	88 23       	and	r24, r24
    1400:	44 f4       	brge	.+16     	; 0x1412 <LCD_sendCommand+0x24a>
		__ticks = 1;
    1402:	fe 01       	movw	r30, r28
    1404:	e5 5b       	subi	r30, 0xB5	; 181
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	91 83       	std	Z+1, r25	; 0x01
    140e:	80 83       	st	Z, r24
    1410:	64 c0       	rjmp	.+200    	; 0x14da <LCD_sendCommand+0x312>
	else if (__tmp > 65535)
    1412:	fe 01       	movw	r30, r28
    1414:	e3 5b       	subi	r30, 0xB3	; 179
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	93 81       	ldd	r25, Z+3	; 0x03
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	3f ef       	ldi	r19, 0xFF	; 255
    1424:	4f e7       	ldi	r20, 0x7F	; 127
    1426:	57 e4       	ldi	r21, 0x47	; 71
    1428:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    142c:	18 16       	cp	r1, r24
    142e:	0c f0       	brlt	.+2      	; 0x1432 <LCD_sendCommand+0x26a>
    1430:	43 c0       	rjmp	.+134    	; 0x14b8 <LCD_sendCommand+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1432:	fe 01       	movw	r30, r28
    1434:	ef 5a       	subi	r30, 0xAF	; 175
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	60 81       	ld	r22, Z
    143a:	71 81       	ldd	r23, Z+1	; 0x01
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e2       	ldi	r20, 0x20	; 32
    1446:	51 e4       	ldi	r21, 0x41	; 65
    1448:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	8e 01       	movw	r16, r28
    1452:	05 5b       	subi	r16, 0xB5	; 181
    1454:	1f 4f       	sbci	r17, 0xFF	; 255
    1456:	bc 01       	movw	r22, r24
    1458:	cd 01       	movw	r24, r26
    145a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	f8 01       	movw	r30, r16
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	80 83       	st	Z, r24
    1468:	1f c0       	rjmp	.+62     	; 0x14a8 <LCD_sendCommand+0x2e0>
    146a:	fe 01       	movw	r30, r28
    146c:	e7 5b       	subi	r30, 0xB7	; 183
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	80 e9       	ldi	r24, 0x90	; 144
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	80 83       	st	Z, r24
    1478:	fe 01       	movw	r30, r28
    147a:	e7 5b       	subi	r30, 0xB7	; 183
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	80 81       	ld	r24, Z
    1480:	91 81       	ldd	r25, Z+1	; 0x01
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <LCD_sendCommand+0x2ba>
    1486:	fe 01       	movw	r30, r28
    1488:	e7 5b       	subi	r30, 0xB7	; 183
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	91 83       	std	Z+1, r25	; 0x01
    148e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1490:	de 01       	movw	r26, r28
    1492:	a5 5b       	subi	r26, 0xB5	; 181
    1494:	bf 4f       	sbci	r27, 0xFF	; 255
    1496:	fe 01       	movw	r30, r28
    1498:	e5 5b       	subi	r30, 0xB5	; 181
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	11 96       	adiw	r26, 0x01	; 1
    14a4:	9c 93       	st	X, r25
    14a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a8:	fe 01       	movw	r30, r28
    14aa:	e5 5b       	subi	r30, 0xB5	; 181
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	80 81       	ld	r24, Z
    14b0:	91 81       	ldd	r25, Z+1	; 0x01
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	d1 f6       	brne	.-76     	; 0x146a <LCD_sendCommand+0x2a2>
    14b6:	27 c0       	rjmp	.+78     	; 0x1506 <LCD_sendCommand+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b8:	8e 01       	movw	r16, r28
    14ba:	05 5b       	subi	r16, 0xB5	; 181
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	fe 01       	movw	r30, r28
    14c0:	e3 5b       	subi	r30, 0xB3	; 179
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	60 81       	ld	r22, Z
    14c6:	71 81       	ldd	r23, Z+1	; 0x01
    14c8:	82 81       	ldd	r24, Z+2	; 0x02
    14ca:	93 81       	ldd	r25, Z+3	; 0x03
    14cc:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	f8 01       	movw	r30, r16
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	80 83       	st	Z, r24
    14da:	de 01       	movw	r26, r28
    14dc:	a9 5b       	subi	r26, 0xB9	; 185
    14de:	bf 4f       	sbci	r27, 0xFF	; 255
    14e0:	fe 01       	movw	r30, r28
    14e2:	e5 5b       	subi	r30, 0xB5	; 181
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	8d 93       	st	X+, r24
    14ec:	9c 93       	st	X, r25
    14ee:	fe 01       	movw	r30, r28
    14f0:	e9 5b       	subi	r30, 0xB9	; 185
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <LCD_sendCommand+0x330>
    14fc:	fe 01       	movw	r30, r28
    14fe:	e9 5b       	subi	r30, 0xB9	; 185
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	91 83       	std	Z+1, r25	; 0x01
    1504:	80 83       	st	Z, r24
    1506:	ab e3       	ldi	r26, 0x3B	; 59
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	fe 01       	movw	r30, r28
    150c:	ec 59       	subi	r30, 0x9C	; 156
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	80 81       	ld	r24, Z
    1512:	8c 93       	st	X, r24
    1514:	fe 01       	movw	r30, r28
    1516:	ed 5b       	subi	r30, 0xBD	; 189
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a0 e8       	ldi	r26, 0x80	; 128
    1520:	bf e3       	ldi	r27, 0x3F	; 63
    1522:	80 83       	st	Z, r24
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	a2 83       	std	Z+2, r26	; 0x02
    1528:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152a:	8e 01       	movw	r16, r28
    152c:	01 5c       	subi	r16, 0xC1	; 193
    152e:	1f 4f       	sbci	r17, 0xFF	; 255
    1530:	fe 01       	movw	r30, r28
    1532:	ed 5b       	subi	r30, 0xBD	; 189
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	60 81       	ld	r22, Z
    1538:	71 81       	ldd	r23, Z+1	; 0x01
    153a:	82 81       	ldd	r24, Z+2	; 0x02
    153c:	93 81       	ldd	r25, Z+3	; 0x03
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	4a e7       	ldi	r20, 0x7A	; 122
    1544:	55 e4       	ldi	r21, 0x45	; 69
    1546:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	f8 01       	movw	r30, r16
    1550:	80 83       	st	Z, r24
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	a2 83       	std	Z+2, r26	; 0x02
    1556:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1558:	fe 01       	movw	r30, r28
    155a:	ff 96       	adiw	r30, 0x3f	; 63
    155c:	60 81       	ld	r22, Z
    155e:	71 81       	ldd	r23, Z+1	; 0x01
    1560:	82 81       	ldd	r24, Z+2	; 0x02
    1562:	93 81       	ldd	r25, Z+3	; 0x03
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 e8       	ldi	r20, 0x80	; 128
    156a:	5f e3       	ldi	r21, 0x3F	; 63
    156c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    1570:	88 23       	and	r24, r24
    1572:	2c f4       	brge	.+10     	; 0x157e <LCD_sendCommand+0x3b6>
		__ticks = 1;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	9e af       	std	Y+62, r25	; 0x3e
    157a:	8d af       	std	Y+61, r24	; 0x3d
    157c:	46 c0       	rjmp	.+140    	; 0x160a <LCD_sendCommand+0x442>
	else if (__tmp > 65535)
    157e:	fe 01       	movw	r30, r28
    1580:	ff 96       	adiw	r30, 0x3f	; 63
    1582:	60 81       	ld	r22, Z
    1584:	71 81       	ldd	r23, Z+1	; 0x01
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	3f ef       	ldi	r19, 0xFF	; 255
    158e:	4f e7       	ldi	r20, 0x7F	; 127
    1590:	57 e4       	ldi	r21, 0x47	; 71
    1592:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    1596:	18 16       	cp	r1, r24
    1598:	64 f5       	brge	.+88     	; 0x15f2 <LCD_sendCommand+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159a:	fe 01       	movw	r30, r28
    159c:	ed 5b       	subi	r30, 0xBD	; 189
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	82 81       	ldd	r24, Z+2	; 0x02
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e2       	ldi	r20, 0x20	; 32
    15ae:	51 e4       	ldi	r21, 0x41	; 65
    15b0:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9e af       	std	Y+62, r25	; 0x3e
    15c6:	8d af       	std	Y+61, r24	; 0x3d
    15c8:	0f c0       	rjmp	.+30     	; 0x15e8 <LCD_sendCommand+0x420>
    15ca:	80 e9       	ldi	r24, 0x90	; 144
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	9c af       	std	Y+60, r25	; 0x3c
    15d0:	8b af       	std	Y+59, r24	; 0x3b
    15d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    15d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <LCD_sendCommand+0x40e>
    15da:	9c af       	std	Y+60, r25	; 0x3c
    15dc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15de:	8d ad       	ldd	r24, Y+61	; 0x3d
    15e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	9e af       	std	Y+62, r25	; 0x3e
    15e6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    15ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	69 f7       	brne	.-38     	; 0x15ca <LCD_sendCommand+0x402>
    15f0:	16 c0       	rjmp	.+44     	; 0x161e <LCD_sendCommand+0x456>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f2:	fe 01       	movw	r30, r28
    15f4:	ff 96       	adiw	r30, 0x3f	; 63
    15f6:	60 81       	ld	r22, Z
    15f8:	71 81       	ldd	r23, Z+1	; 0x01
    15fa:	82 81       	ldd	r24, Z+2	; 0x02
    15fc:	93 81       	ldd	r25, Z+3	; 0x03
    15fe:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	9e af       	std	Y+62, r25	; 0x3e
    1608:	8d af       	std	Y+61, r24	; 0x3d
    160a:	8d ad       	ldd	r24, Y+61	; 0x3d
    160c:	9e ad       	ldd	r25, Y+62	; 0x3e
    160e:	9a af       	std	Y+58, r25	; 0x3a
    1610:	89 af       	std	Y+57, r24	; 0x39
    1612:	89 ad       	ldd	r24, Y+57	; 0x39
    1614:	9a ad       	ldd	r25, Y+58	; 0x3a
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <LCD_sendCommand+0x44e>
    161a:	9a af       	std	Y+58, r25	; 0x3a
    161c:	89 af       	std	Y+57, r24	; 0x39
    161e:	a8 e3       	ldi	r26, 0x38	; 56
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e8 e3       	ldi	r30, 0x38	; 56
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	87 7f       	andi	r24, 0xF7	; 247
    162a:	8c 93       	st	X, r24
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a0 e8       	ldi	r26, 0x80	; 128
    1632:	bf e3       	ldi	r27, 0x3F	; 63
    1634:	8d ab       	std	Y+53, r24	; 0x35
    1636:	9e ab       	std	Y+54, r25	; 0x36
    1638:	af ab       	std	Y+55, r26	; 0x37
    163a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163c:	6d a9       	ldd	r22, Y+53	; 0x35
    163e:	7e a9       	ldd	r23, Y+54	; 0x36
    1640:	8f a9       	ldd	r24, Y+55	; 0x37
    1642:	98 ad       	ldd	r25, Y+56	; 0x38
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	4a e7       	ldi	r20, 0x7A	; 122
    164a:	55 e4       	ldi	r21, 0x45	; 69
    164c:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	89 ab       	std	Y+49, r24	; 0x31
    1656:	9a ab       	std	Y+50, r25	; 0x32
    1658:	ab ab       	std	Y+51, r26	; 0x33
    165a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    165c:	69 a9       	ldd	r22, Y+49	; 0x31
    165e:	7a a9       	ldd	r23, Y+50	; 0x32
    1660:	8b a9       	ldd	r24, Y+51	; 0x33
    1662:	9c a9       	ldd	r25, Y+52	; 0x34
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	5f e3       	ldi	r21, 0x3F	; 63
    166c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    1670:	88 23       	and	r24, r24
    1672:	2c f4       	brge	.+10     	; 0x167e <LCD_sendCommand+0x4b6>
		__ticks = 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	98 ab       	std	Y+48, r25	; 0x30
    167a:	8f a7       	std	Y+47, r24	; 0x2f
    167c:	3f c0       	rjmp	.+126    	; 0x16fc <LCD_sendCommand+0x534>
	else if (__tmp > 65535)
    167e:	69 a9       	ldd	r22, Y+49	; 0x31
    1680:	7a a9       	ldd	r23, Y+50	; 0x32
    1682:	8b a9       	ldd	r24, Y+51	; 0x33
    1684:	9c a9       	ldd	r25, Y+52	; 0x34
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	4f e7       	ldi	r20, 0x7F	; 127
    168c:	57 e4       	ldi	r21, 0x47	; 71
    168e:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    1692:	18 16       	cp	r1, r24
    1694:	4c f5       	brge	.+82     	; 0x16e8 <LCD_sendCommand+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1696:	6d a9       	ldd	r22, Y+53	; 0x35
    1698:	7e a9       	ldd	r23, Y+54	; 0x36
    169a:	8f a9       	ldd	r24, Y+55	; 0x37
    169c:	98 ad       	ldd	r25, Y+56	; 0x38
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e2       	ldi	r20, 0x20	; 32
    16a4:	51 e4       	ldi	r21, 0x41	; 65
    16a6:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	bc 01       	movw	r22, r24
    16b0:	cd 01       	movw	r24, r26
    16b2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	98 ab       	std	Y+48, r25	; 0x30
    16bc:	8f a7       	std	Y+47, r24	; 0x2f
    16be:	0f c0       	rjmp	.+30     	; 0x16de <LCD_sendCommand+0x516>
    16c0:	80 e9       	ldi	r24, 0x90	; 144
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	9e a7       	std	Y+46, r25	; 0x2e
    16c6:	8d a7       	std	Y+45, r24	; 0x2d
    16c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    16ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <LCD_sendCommand+0x504>
    16d0:	9e a7       	std	Y+46, r25	; 0x2e
    16d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d6:	98 a9       	ldd	r25, Y+48	; 0x30
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	98 ab       	std	Y+48, r25	; 0x30
    16dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16de:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e0:	98 a9       	ldd	r25, Y+48	; 0x30
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	69 f7       	brne	.-38     	; 0x16c0 <LCD_sendCommand+0x4f8>
    16e6:	14 c0       	rjmp	.+40     	; 0x1710 <LCD_sendCommand+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e8:	69 a9       	ldd	r22, Y+49	; 0x31
    16ea:	7a a9       	ldd	r23, Y+50	; 0x32
    16ec:	8b a9       	ldd	r24, Y+51	; 0x33
    16ee:	9c a9       	ldd	r25, Y+52	; 0x34
    16f0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	98 ab       	std	Y+48, r25	; 0x30
    16fa:	8f a7       	std	Y+47, r24	; 0x2f
    16fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    16fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1700:	9c a7       	std	Y+44, r25	; 0x2c
    1702:	8b a7       	std	Y+43, r24	; 0x2b
    1704:	8b a5       	ldd	r24, Y+43	; 0x2b
    1706:	9c a5       	ldd	r25, Y+44	; 0x2c
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <LCD_sendCommand+0x540>
    170c:	9c a7       	std	Y+44, r25	; 0x2c
    170e:	8b a7       	std	Y+43, r24	; 0x2b
    1710:	a8 e3       	ldi	r26, 0x38	; 56
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e8 e3       	ldi	r30, 0x38	; 56
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	88 60       	ori	r24, 0x08	; 8
    171c:	8c 93       	st	X, r24
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a0 e8       	ldi	r26, 0x80	; 128
    1724:	bf e3       	ldi	r27, 0x3F	; 63
    1726:	8f a3       	std	Y+39, r24	; 0x27
    1728:	98 a7       	std	Y+40, r25	; 0x28
    172a:	a9 a7       	std	Y+41, r26	; 0x29
    172c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172e:	6f a1       	ldd	r22, Y+39	; 0x27
    1730:	78 a5       	ldd	r23, Y+40	; 0x28
    1732:	89 a5       	ldd	r24, Y+41	; 0x29
    1734:	9a a5       	ldd	r25, Y+42	; 0x2a
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	4a e7       	ldi	r20, 0x7A	; 122
    173c:	55 e4       	ldi	r21, 0x45	; 69
    173e:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	8b a3       	std	Y+35, r24	; 0x23
    1748:	9c a3       	std	Y+36, r25	; 0x24
    174a:	ad a3       	std	Y+37, r26	; 0x25
    174c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    174e:	6b a1       	ldd	r22, Y+35	; 0x23
    1750:	7c a1       	ldd	r23, Y+36	; 0x24
    1752:	8d a1       	ldd	r24, Y+37	; 0x25
    1754:	9e a1       	ldd	r25, Y+38	; 0x26
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e8       	ldi	r20, 0x80	; 128
    175c:	5f e3       	ldi	r21, 0x3F	; 63
    175e:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    1762:	88 23       	and	r24, r24
    1764:	2c f4       	brge	.+10     	; 0x1770 <LCD_sendCommand+0x5a8>
		__ticks = 1;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9a a3       	std	Y+34, r25	; 0x22
    176c:	89 a3       	std	Y+33, r24	; 0x21
    176e:	3f c0       	rjmp	.+126    	; 0x17ee <LCD_sendCommand+0x626>
	else if (__tmp > 65535)
    1770:	6b a1       	ldd	r22, Y+35	; 0x23
    1772:	7c a1       	ldd	r23, Y+36	; 0x24
    1774:	8d a1       	ldd	r24, Y+37	; 0x25
    1776:	9e a1       	ldd	r25, Y+38	; 0x26
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	3f ef       	ldi	r19, 0xFF	; 255
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	57 e4       	ldi	r21, 0x47	; 71
    1780:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    1784:	18 16       	cp	r1, r24
    1786:	4c f5       	brge	.+82     	; 0x17da <LCD_sendCommand+0x612>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1788:	6f a1       	ldd	r22, Y+39	; 0x27
    178a:	78 a5       	ldd	r23, Y+40	; 0x28
    178c:	89 a5       	ldd	r24, Y+41	; 0x29
    178e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e2       	ldi	r20, 0x20	; 32
    1796:	51 e4       	ldi	r21, 0x41	; 65
    1798:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	9a a3       	std	Y+34, r25	; 0x22
    17ae:	89 a3       	std	Y+33, r24	; 0x21
    17b0:	0f c0       	rjmp	.+30     	; 0x17d0 <LCD_sendCommand+0x608>
    17b2:	80 e9       	ldi	r24, 0x90	; 144
    17b4:	91 e0       	ldi	r25, 0x01	; 1
    17b6:	98 a3       	std	Y+32, r25	; 0x20
    17b8:	8f 8f       	std	Y+31, r24	; 0x1f
    17ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17bc:	98 a1       	ldd	r25, Y+32	; 0x20
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <LCD_sendCommand+0x5f6>
    17c2:	98 a3       	std	Y+32, r25	; 0x20
    17c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c6:	89 a1       	ldd	r24, Y+33	; 0x21
    17c8:	9a a1       	ldd	r25, Y+34	; 0x22
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	9a a3       	std	Y+34, r25	; 0x22
    17ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d0:	89 a1       	ldd	r24, Y+33	; 0x21
    17d2:	9a a1       	ldd	r25, Y+34	; 0x22
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	69 f7       	brne	.-38     	; 0x17b2 <LCD_sendCommand+0x5ea>
    17d8:	14 c0       	rjmp	.+40     	; 0x1802 <LCD_sendCommand+0x63a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17da:	6b a1       	ldd	r22, Y+35	; 0x23
    17dc:	7c a1       	ldd	r23, Y+36	; 0x24
    17de:	8d a1       	ldd	r24, Y+37	; 0x25
    17e0:	9e a1       	ldd	r25, Y+38	; 0x26
    17e2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	9a a3       	std	Y+34, r25	; 0x22
    17ec:	89 a3       	std	Y+33, r24	; 0x21
    17ee:	89 a1       	ldd	r24, Y+33	; 0x21
    17f0:	9a a1       	ldd	r25, Y+34	; 0x22
    17f2:	9e 8f       	std	Y+30, r25	; 0x1e
    17f4:	8d 8f       	std	Y+29, r24	; 0x1d
    17f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <LCD_sendCommand+0x632>
    17fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1800:	8d 8f       	std	Y+29, r24	; 0x1d
    1802:	ab e3       	ldi	r26, 0x3B	; 59
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	fe 01       	movw	r30, r28
    1808:	ed 59       	subi	r30, 0x9D	; 157
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	80 81       	ld	r24, Z
    180e:	8c 93       	st	X, r24
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a0 e8       	ldi	r26, 0x80	; 128
    1816:	bf e3       	ldi	r27, 0x3F	; 63
    1818:	89 8f       	std	Y+25, r24	; 0x19
    181a:	9a 8f       	std	Y+26, r25	; 0x1a
    181c:	ab 8f       	std	Y+27, r26	; 0x1b
    181e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1820:	69 8d       	ldd	r22, Y+25	; 0x19
    1822:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1824:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1826:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	4a e7       	ldi	r20, 0x7A	; 122
    182e:	55 e4       	ldi	r21, 0x45	; 69
    1830:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	8d 8b       	std	Y+21, r24	; 0x15
    183a:	9e 8b       	std	Y+22, r25	; 0x16
    183c:	af 8b       	std	Y+23, r26	; 0x17
    183e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1840:	6d 89       	ldd	r22, Y+21	; 0x15
    1842:	7e 89       	ldd	r23, Y+22	; 0x16
    1844:	8f 89       	ldd	r24, Y+23	; 0x17
    1846:	98 8d       	ldd	r25, Y+24	; 0x18
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e8       	ldi	r20, 0x80	; 128
    184e:	5f e3       	ldi	r21, 0x3F	; 63
    1850:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    1854:	88 23       	and	r24, r24
    1856:	2c f4       	brge	.+10     	; 0x1862 <LCD_sendCommand+0x69a>
		__ticks = 1;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	9c 8b       	std	Y+20, r25	; 0x14
    185e:	8b 8b       	std	Y+19, r24	; 0x13
    1860:	3f c0       	rjmp	.+126    	; 0x18e0 <LCD_sendCommand+0x718>
	else if (__tmp > 65535)
    1862:	6d 89       	ldd	r22, Y+21	; 0x15
    1864:	7e 89       	ldd	r23, Y+22	; 0x16
    1866:	8f 89       	ldd	r24, Y+23	; 0x17
    1868:	98 8d       	ldd	r25, Y+24	; 0x18
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	3f ef       	ldi	r19, 0xFF	; 255
    186e:	4f e7       	ldi	r20, 0x7F	; 127
    1870:	57 e4       	ldi	r21, 0x47	; 71
    1872:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    1876:	18 16       	cp	r1, r24
    1878:	4c f5       	brge	.+82     	; 0x18cc <LCD_sendCommand+0x704>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187a:	69 8d       	ldd	r22, Y+25	; 0x19
    187c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    187e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1880:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e2       	ldi	r20, 0x20	; 32
    1888:	51 e4       	ldi	r21, 0x41	; 65
    188a:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	bc 01       	movw	r22, r24
    1894:	cd 01       	movw	r24, r26
    1896:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	9c 8b       	std	Y+20, r25	; 0x14
    18a0:	8b 8b       	std	Y+19, r24	; 0x13
    18a2:	0f c0       	rjmp	.+30     	; 0x18c2 <LCD_sendCommand+0x6fa>
    18a4:	80 e9       	ldi	r24, 0x90	; 144
    18a6:	91 e0       	ldi	r25, 0x01	; 1
    18a8:	9a 8b       	std	Y+18, r25	; 0x12
    18aa:	89 8b       	std	Y+17, r24	; 0x11
    18ac:	89 89       	ldd	r24, Y+17	; 0x11
    18ae:	9a 89       	ldd	r25, Y+18	; 0x12
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCD_sendCommand+0x6e8>
    18b4:	9a 8b       	std	Y+18, r25	; 0x12
    18b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ba:	9c 89       	ldd	r25, Y+20	; 0x14
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	9c 8b       	std	Y+20, r25	; 0x14
    18c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c2:	8b 89       	ldd	r24, Y+19	; 0x13
    18c4:	9c 89       	ldd	r25, Y+20	; 0x14
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	69 f7       	brne	.-38     	; 0x18a4 <LCD_sendCommand+0x6dc>
    18ca:	14 c0       	rjmp	.+40     	; 0x18f4 <LCD_sendCommand+0x72c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18cc:	6d 89       	ldd	r22, Y+21	; 0x15
    18ce:	7e 89       	ldd	r23, Y+22	; 0x16
    18d0:	8f 89       	ldd	r24, Y+23	; 0x17
    18d2:	98 8d       	ldd	r25, Y+24	; 0x18
    18d4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	9c 8b       	std	Y+20, r25	; 0x14
    18de:	8b 8b       	std	Y+19, r24	; 0x13
    18e0:	8b 89       	ldd	r24, Y+19	; 0x13
    18e2:	9c 89       	ldd	r25, Y+20	; 0x14
    18e4:	98 8b       	std	Y+16, r25	; 0x10
    18e6:	8f 87       	std	Y+15, r24	; 0x0f
    18e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ea:	98 89       	ldd	r25, Y+16	; 0x10
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_sendCommand+0x724>
    18f0:	98 8b       	std	Y+16, r25	; 0x10
    18f2:	8f 87       	std	Y+15, r24	; 0x0f
    18f4:	a8 e3       	ldi	r26, 0x38	; 56
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e8 e3       	ldi	r30, 0x38	; 56
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	87 7f       	andi	r24, 0xF7	; 247
    1900:	8c 93       	st	X, r24
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	a0 e8       	ldi	r26, 0x80	; 128
    1908:	bf e3       	ldi	r27, 0x3F	; 63
    190a:	8b 87       	std	Y+11, r24	; 0x0b
    190c:	9c 87       	std	Y+12, r25	; 0x0c
    190e:	ad 87       	std	Y+13, r26	; 0x0d
    1910:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1912:	6b 85       	ldd	r22, Y+11	; 0x0b
    1914:	7c 85       	ldd	r23, Y+12	; 0x0c
    1916:	8d 85       	ldd	r24, Y+13	; 0x0d
    1918:	9e 85       	ldd	r25, Y+14	; 0x0e
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	4a e7       	ldi	r20, 0x7A	; 122
    1920:	55 e4       	ldi	r21, 0x45	; 69
    1922:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	8f 83       	std	Y+7, r24	; 0x07
    192c:	98 87       	std	Y+8, r25	; 0x08
    192e:	a9 87       	std	Y+9, r26	; 0x09
    1930:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1932:	6f 81       	ldd	r22, Y+7	; 0x07
    1934:	78 85       	ldd	r23, Y+8	; 0x08
    1936:	89 85       	ldd	r24, Y+9	; 0x09
    1938:	9a 85       	ldd	r25, Y+10	; 0x0a
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e8       	ldi	r20, 0x80	; 128
    1940:	5f e3       	ldi	r21, 0x3F	; 63
    1942:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    1946:	88 23       	and	r24, r24
    1948:	2c f4       	brge	.+10     	; 0x1954 <LCD_sendCommand+0x78c>
		__ticks = 1;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9e 83       	std	Y+6, r25	; 0x06
    1950:	8d 83       	std	Y+5, r24	; 0x05
    1952:	3f c0       	rjmp	.+126    	; 0x19d2 <LCD_sendCommand+0x80a>
	else if (__tmp > 65535)
    1954:	6f 81       	ldd	r22, Y+7	; 0x07
    1956:	78 85       	ldd	r23, Y+8	; 0x08
    1958:	89 85       	ldd	r24, Y+9	; 0x09
    195a:	9a 85       	ldd	r25, Y+10	; 0x0a
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	3f ef       	ldi	r19, 0xFF	; 255
    1960:	4f e7       	ldi	r20, 0x7F	; 127
    1962:	57 e4       	ldi	r21, 0x47	; 71
    1964:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    1968:	18 16       	cp	r1, r24
    196a:	4c f5       	brge	.+82     	; 0x19be <LCD_sendCommand+0x7f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196c:	6b 85       	ldd	r22, Y+11	; 0x0b
    196e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1970:	8d 85       	ldd	r24, Y+13	; 0x0d
    1972:	9e 85       	ldd	r25, Y+14	; 0x0e
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e2       	ldi	r20, 0x20	; 32
    197a:	51 e4       	ldi	r21, 0x41	; 65
    197c:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	9e 83       	std	Y+6, r25	; 0x06
    1992:	8d 83       	std	Y+5, r24	; 0x05
    1994:	0f c0       	rjmp	.+30     	; 0x19b4 <LCD_sendCommand+0x7ec>
    1996:	80 e9       	ldi	r24, 0x90	; 144
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	9c 83       	std	Y+4, r25	; 0x04
    199c:	8b 83       	std	Y+3, r24	; 0x03
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <LCD_sendCommand+0x7da>
    19a6:	9c 83       	std	Y+4, r25	; 0x04
    19a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	9e 81       	ldd	r25, Y+6	; 0x06
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	9e 83       	std	Y+6, r25	; 0x06
    19b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	9e 81       	ldd	r25, Y+6	; 0x06
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	69 f7       	brne	.-38     	; 0x1996 <LCD_sendCommand+0x7ce>
    19bc:	14 c0       	rjmp	.+40     	; 0x19e6 <LCD_sendCommand+0x81e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19be:	6f 81       	ldd	r22, Y+7	; 0x07
    19c0:	78 85       	ldd	r23, Y+8	; 0x08
    19c2:	89 85       	ldd	r24, Y+9	; 0x09
    19c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c6:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	8d 81       	ldd	r24, Y+5	; 0x05
    19d4:	9e 81       	ldd	r25, Y+6	; 0x06
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <LCD_sendCommand+0x816>
    19e2:	9a 83       	std	Y+2, r25	; 0x02
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	cb 59       	subi	r28, 0x9B	; 155
    19e8:	df 4f       	sbci	r29, 0xFF	; 255
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	1f 91       	pop	r17
    19fa:	0f 91       	pop	r16
    19fc:	08 95       	ret

000019fe <LCD_displayCharacter>:
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	c3 57       	subi	r28, 0x73	; 115
    1a0c:	d0 40       	sbci	r29, 0x00	; 0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	fe 01       	movw	r30, r28
    1a1a:	ed 58       	subi	r30, 0x8D	; 141
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 83       	st	Z, r24
    1a20:	de 01       	movw	r26, r28
    1a22:	ae 58       	subi	r26, 0x8E	; 142
    1a24:	bf 4f       	sbci	r27, 0xFF	; 255
    1a26:	fe 01       	movw	r30, r28
    1a28:	ed 58       	subi	r30, 0x8D	; 141
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	80 81       	ld	r24, Z
    1a2e:	80 7f       	andi	r24, 0xF0	; 240
    1a30:	8c 93       	st	X, r24
    1a32:	de 01       	movw	r26, r28
    1a34:	af 58       	subi	r26, 0x8F	; 143
    1a36:	bf 4f       	sbci	r27, 0xFF	; 255
    1a38:	fe 01       	movw	r30, r28
    1a3a:	ed 58       	subi	r30, 0x8D	; 141
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	80 81       	ld	r24, Z
    1a40:	82 95       	swap	r24
    1a42:	80 7f       	andi	r24, 0xF0	; 240
    1a44:	8c 93       	st	X, r24
    1a46:	a8 e3       	ldi	r26, 0x38	; 56
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e8 e3       	ldi	r30, 0x38	; 56
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	82 60       	ori	r24, 0x02	; 2
    1a52:	8c 93       	st	X, r24
    1a54:	a8 e3       	ldi	r26, 0x38	; 56
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e8 e3       	ldi	r30, 0x38	; 56
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8b 7f       	andi	r24, 0xFB	; 251
    1a60:	8c 93       	st	X, r24
    1a62:	fe 01       	movw	r30, r28
    1a64:	e3 59       	subi	r30, 0x93	; 147
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a0 e8       	ldi	r26, 0x80	; 128
    1a6e:	bf e3       	ldi	r27, 0x3F	; 63
    1a70:	80 83       	st	Z, r24
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	a2 83       	std	Z+2, r26	; 0x02
    1a76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a78:	8e 01       	movw	r16, r28
    1a7a:	07 59       	subi	r16, 0x97	; 151
    1a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e3 59       	subi	r30, 0x93	; 147
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	60 81       	ld	r22, Z
    1a86:	71 81       	ldd	r23, Z+1	; 0x01
    1a88:	82 81       	ldd	r24, Z+2	; 0x02
    1a8a:	93 81       	ldd	r25, Z+3	; 0x03
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	4a e7       	ldi	r20, 0x7A	; 122
    1a92:	55 e4       	ldi	r21, 0x45	; 69
    1a94:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	f8 01       	movw	r30, r16
    1a9e:	80 83       	st	Z, r24
    1aa0:	91 83       	std	Z+1, r25	; 0x01
    1aa2:	a2 83       	std	Z+2, r26	; 0x02
    1aa4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e7 59       	subi	r30, 0x97	; 151
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	60 81       	ld	r22, Z
    1aae:	71 81       	ldd	r23, Z+1	; 0x01
    1ab0:	82 81       	ldd	r24, Z+2	; 0x02
    1ab2:	93 81       	ldd	r25, Z+3	; 0x03
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e8       	ldi	r20, 0x80	; 128
    1aba:	5f e3       	ldi	r21, 0x3F	; 63
    1abc:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    1ac0:	88 23       	and	r24, r24
    1ac2:	44 f4       	brge	.+16     	; 0x1ad4 <LCD_displayCharacter+0xd6>
		__ticks = 1;
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e9 59       	subi	r30, 0x99	; 153
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	80 83       	st	Z, r24
    1ad2:	64 c0       	rjmp	.+200    	; 0x1b9c <LCD_displayCharacter+0x19e>
	else if (__tmp > 65535)
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e7 59       	subi	r30, 0x97	; 151
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	60 81       	ld	r22, Z
    1adc:	71 81       	ldd	r23, Z+1	; 0x01
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	3f ef       	ldi	r19, 0xFF	; 255
    1ae6:	4f e7       	ldi	r20, 0x7F	; 127
    1ae8:	57 e4       	ldi	r21, 0x47	; 71
    1aea:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    1aee:	18 16       	cp	r1, r24
    1af0:	0c f0       	brlt	.+2      	; 0x1af4 <LCD_displayCharacter+0xf6>
    1af2:	43 c0       	rjmp	.+134    	; 0x1b7a <LCD_displayCharacter+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	fe 01       	movw	r30, r28
    1af6:	e3 59       	subi	r30, 0x93	; 147
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	60 81       	ld	r22, Z
    1afc:	71 81       	ldd	r23, Z+1	; 0x01
    1afe:	82 81       	ldd	r24, Z+2	; 0x02
    1b00:	93 81       	ldd	r25, Z+3	; 0x03
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e2       	ldi	r20, 0x20	; 32
    1b08:	51 e4       	ldi	r21, 0x41	; 65
    1b0a:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	8e 01       	movw	r16, r28
    1b14:	09 59       	subi	r16, 0x99	; 153
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	f8 01       	movw	r30, r16
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	80 83       	st	Z, r24
    1b2a:	1f c0       	rjmp	.+62     	; 0x1b6a <LCD_displayCharacter+0x16c>
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	eb 59       	subi	r30, 0x9B	; 155
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	80 e9       	ldi	r24, 0x90	; 144
    1b34:	91 e0       	ldi	r25, 0x01	; 1
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	80 83       	st	Z, r24
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	eb 59       	subi	r30, 0x9B	; 155
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	91 81       	ldd	r25, Z+1	; 0x01
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_displayCharacter+0x146>
    1b48:	fe 01       	movw	r30, r28
    1b4a:	eb 59       	subi	r30, 0x9B	; 155
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b52:	de 01       	movw	r26, r28
    1b54:	a9 59       	subi	r26, 0x99	; 153
    1b56:	bf 4f       	sbci	r27, 0xFF	; 255
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e9 59       	subi	r30, 0x99	; 153
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	11 96       	adiw	r26, 0x01	; 1
    1b66:	9c 93       	st	X, r25
    1b68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	e9 59       	subi	r30, 0x99	; 153
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	80 81       	ld	r24, Z
    1b72:	91 81       	ldd	r25, Z+1	; 0x01
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	d1 f6       	brne	.-76     	; 0x1b2c <LCD_displayCharacter+0x12e>
    1b78:	27 c0       	rjmp	.+78     	; 0x1bc8 <LCD_displayCharacter+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7a:	8e 01       	movw	r16, r28
    1b7c:	09 59       	subi	r16, 0x99	; 153
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	fe 01       	movw	r30, r28
    1b82:	e7 59       	subi	r30, 0x97	; 151
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	60 81       	ld	r22, Z
    1b88:	71 81       	ldd	r23, Z+1	; 0x01
    1b8a:	82 81       	ldd	r24, Z+2	; 0x02
    1b8c:	93 81       	ldd	r25, Z+3	; 0x03
    1b8e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	f8 01       	movw	r30, r16
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24
    1b9c:	de 01       	movw	r26, r28
    1b9e:	ad 59       	subi	r26, 0x9D	; 157
    1ba0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e9 59       	subi	r30, 0x99	; 153
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	80 81       	ld	r24, Z
    1baa:	91 81       	ldd	r25, Z+1	; 0x01
    1bac:	8d 93       	st	X+, r24
    1bae:	9c 93       	st	X, r25
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	ed 59       	subi	r30, 0x9D	; 157
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 81       	ld	r24, Z
    1bb8:	91 81       	ldd	r25, Z+1	; 0x01
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_displayCharacter+0x1bc>
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	ed 59       	subi	r30, 0x9D	; 157
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	80 83       	st	Z, r24
    1bc8:	a8 e3       	ldi	r26, 0x38	; 56
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e8 e3       	ldi	r30, 0x38	; 56
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	88 60       	ori	r24, 0x08	; 8
    1bd4:	8c 93       	st	X, r24
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e1 5a       	subi	r30, 0xA1	; 161
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a0 e8       	ldi	r26, 0x80	; 128
    1be2:	bf e3       	ldi	r27, 0x3F	; 63
    1be4:	80 83       	st	Z, r24
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	a2 83       	std	Z+2, r26	; 0x02
    1bea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bec:	8e 01       	movw	r16, r28
    1bee:	05 5a       	subi	r16, 0xA5	; 165
    1bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e1 5a       	subi	r30, 0xA1	; 161
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	60 81       	ld	r22, Z
    1bfa:	71 81       	ldd	r23, Z+1	; 0x01
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a e7       	ldi	r20, 0x7A	; 122
    1c06:	55 e4       	ldi	r21, 0x45	; 69
    1c08:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	f8 01       	movw	r30, r16
    1c12:	80 83       	st	Z, r24
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	a2 83       	std	Z+2, r26	; 0x02
    1c18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e5 5a       	subi	r30, 0xA5	; 165
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	44 f4       	brge	.+16     	; 0x1c48 <LCD_displayCharacter+0x24a>
		__ticks = 1;
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e7 5a       	subi	r30, 0xA7	; 167
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	64 c0       	rjmp	.+200    	; 0x1d10 <LCD_displayCharacter+0x312>
	else if (__tmp > 65535)
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e5 5a       	subi	r30, 0xA5	; 165
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	3f ef       	ldi	r19, 0xFF	; 255
    1c5a:	4f e7       	ldi	r20, 0x7F	; 127
    1c5c:	57 e4       	ldi	r21, 0x47	; 71
    1c5e:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    1c62:	18 16       	cp	r1, r24
    1c64:	0c f0       	brlt	.+2      	; 0x1c68 <LCD_displayCharacter+0x26a>
    1c66:	43 c0       	rjmp	.+134    	; 0x1cee <LCD_displayCharacter+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c68:	fe 01       	movw	r30, r28
    1c6a:	e1 5a       	subi	r30, 0xA1	; 161
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	60 81       	ld	r22, Z
    1c70:	71 81       	ldd	r23, Z+1	; 0x01
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e2       	ldi	r20, 0x20	; 32
    1c7c:	51 e4       	ldi	r21, 0x41	; 65
    1c7e:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	8e 01       	movw	r16, r28
    1c88:	07 5a       	subi	r16, 0xA7	; 167
    1c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	f8 01       	movw	r30, r16
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
    1c9e:	1f c0       	rjmp	.+62     	; 0x1cde <LCD_displayCharacter+0x2e0>
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	e9 5a       	subi	r30, 0xA9	; 169
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 e9       	ldi	r24, 0x90	; 144
    1ca8:	91 e0       	ldi	r25, 0x01	; 1
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	80 83       	st	Z, r24
    1cae:	fe 01       	movw	r30, r28
    1cb0:	e9 5a       	subi	r30, 0xA9	; 169
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	80 81       	ld	r24, Z
    1cb6:	91 81       	ldd	r25, Z+1	; 0x01
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <LCD_displayCharacter+0x2ba>
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e9 5a       	subi	r30, 0xA9	; 169
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc6:	de 01       	movw	r26, r28
    1cc8:	a7 5a       	subi	r26, 0xA7	; 167
    1cca:	bf 4f       	sbci	r27, 0xFF	; 255
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e7 5a       	subi	r30, 0xA7	; 167
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	91 81       	ldd	r25, Z+1	; 0x01
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	11 96       	adiw	r26, 0x01	; 1
    1cda:	9c 93       	st	X, r25
    1cdc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e7 5a       	subi	r30, 0xA7	; 167
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 81       	ld	r24, Z
    1ce6:	91 81       	ldd	r25, Z+1	; 0x01
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	d1 f6       	brne	.-76     	; 0x1ca0 <LCD_displayCharacter+0x2a2>
    1cec:	27 c0       	rjmp	.+78     	; 0x1d3c <LCD_displayCharacter+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cee:	8e 01       	movw	r16, r28
    1cf0:	07 5a       	subi	r16, 0xA7	; 167
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	e5 5a       	subi	r30, 0xA5	; 165
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	80 83       	st	Z, r24
    1d10:	de 01       	movw	r26, r28
    1d12:	ab 5a       	subi	r26, 0xAB	; 171
    1d14:	bf 4f       	sbci	r27, 0xFF	; 255
    1d16:	fe 01       	movw	r30, r28
    1d18:	e7 5a       	subi	r30, 0xA7	; 167
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	8d 93       	st	X+, r24
    1d22:	9c 93       	st	X, r25
    1d24:	fe 01       	movw	r30, r28
    1d26:	eb 5a       	subi	r30, 0xAB	; 171
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_displayCharacter+0x330>
    1d32:	fe 01       	movw	r30, r28
    1d34:	eb 5a       	subi	r30, 0xAB	; 171
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	91 83       	std	Z+1, r25	; 0x01
    1d3a:	80 83       	st	Z, r24
    1d3c:	ab e3       	ldi	r26, 0x3B	; 59
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	fe 01       	movw	r30, r28
    1d42:	ee 58       	subi	r30, 0x8E	; 142
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	8c 93       	st	X, r24
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ef 5a       	subi	r30, 0xAF	; 175
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a0 e8       	ldi	r26, 0x80	; 128
    1d56:	bf e3       	ldi	r27, 0x3F	; 63
    1d58:	80 83       	st	Z, r24
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	a2 83       	std	Z+2, r26	; 0x02
    1d5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d60:	8e 01       	movw	r16, r28
    1d62:	03 5b       	subi	r16, 0xB3	; 179
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	fe 01       	movw	r30, r28
    1d68:	ef 5a       	subi	r30, 0xAF	; 175
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a e7       	ldi	r20, 0x7A	; 122
    1d7a:	55 e4       	ldi	r21, 0x45	; 69
    1d7c:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	f8 01       	movw	r30, r16
    1d86:	80 83       	st	Z, r24
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	a2 83       	std	Z+2, r26	; 0x02
    1d8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e3 5b       	subi	r30, 0xB3	; 179
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	60 81       	ld	r22, Z
    1d96:	71 81       	ldd	r23, Z+1	; 0x01
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	93 81       	ldd	r25, Z+3	; 0x03
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e8       	ldi	r20, 0x80	; 128
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	44 f4       	brge	.+16     	; 0x1dbc <LCD_displayCharacter+0x3be>
		__ticks = 1;
    1dac:	fe 01       	movw	r30, r28
    1dae:	e5 5b       	subi	r30, 0xB5	; 181
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	80 83       	st	Z, r24
    1dba:	64 c0       	rjmp	.+200    	; 0x1e84 <LCD_displayCharacter+0x486>
	else if (__tmp > 65535)
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e3 5b       	subi	r30, 0xB3	; 179
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	60 81       	ld	r22, Z
    1dc4:	71 81       	ldd	r23, Z+1	; 0x01
    1dc6:	82 81       	ldd	r24, Z+2	; 0x02
    1dc8:	93 81       	ldd	r25, Z+3	; 0x03
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	0c f0       	brlt	.+2      	; 0x1ddc <LCD_displayCharacter+0x3de>
    1dda:	43 c0       	rjmp	.+134    	; 0x1e62 <LCD_displayCharacter+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	fe 01       	movw	r30, r28
    1dde:	ef 5a       	subi	r30, 0xAF	; 175
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	60 81       	ld	r22, Z
    1de4:	71 81       	ldd	r23, Z+1	; 0x01
    1de6:	82 81       	ldd	r24, Z+2	; 0x02
    1de8:	93 81       	ldd	r25, Z+3	; 0x03
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e2       	ldi	r20, 0x20	; 32
    1df0:	51 e4       	ldi	r21, 0x41	; 65
    1df2:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8e 01       	movw	r16, r28
    1dfc:	05 5b       	subi	r16, 0xB5	; 181
    1dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
    1e12:	1f c0       	rjmp	.+62     	; 0x1e52 <LCD_displayCharacter+0x454>
    1e14:	fe 01       	movw	r30, r28
    1e16:	e7 5b       	subi	r30, 0xB7	; 183
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 e9       	ldi	r24, 0x90	; 144
    1e1c:	91 e0       	ldi	r25, 0x01	; 1
    1e1e:	91 83       	std	Z+1, r25	; 0x01
    1e20:	80 83       	st	Z, r24
    1e22:	fe 01       	movw	r30, r28
    1e24:	e7 5b       	subi	r30, 0xB7	; 183
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	80 81       	ld	r24, Z
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_displayCharacter+0x42e>
    1e30:	fe 01       	movw	r30, r28
    1e32:	e7 5b       	subi	r30, 0xB7	; 183
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3a:	de 01       	movw	r26, r28
    1e3c:	a5 5b       	subi	r26, 0xB5	; 181
    1e3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e40:	fe 01       	movw	r30, r28
    1e42:	e5 5b       	subi	r30, 0xB5	; 181
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	80 81       	ld	r24, Z
    1e48:	91 81       	ldd	r25, Z+1	; 0x01
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	11 96       	adiw	r26, 0x01	; 1
    1e4e:	9c 93       	st	X, r25
    1e50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	fe 01       	movw	r30, r28
    1e54:	e5 5b       	subi	r30, 0xB5	; 181
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	d1 f6       	brne	.-76     	; 0x1e14 <LCD_displayCharacter+0x416>
    1e60:	27 c0       	rjmp	.+78     	; 0x1eb0 <LCD_displayCharacter+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e62:	8e 01       	movw	r16, r28
    1e64:	05 5b       	subi	r16, 0xB5	; 181
    1e66:	1f 4f       	sbci	r17, 0xFF	; 255
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e3 5b       	subi	r30, 0xB3	; 179
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	f8 01       	movw	r30, r16
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	80 83       	st	Z, r24
    1e84:	de 01       	movw	r26, r28
    1e86:	a9 5b       	subi	r26, 0xB9	; 185
    1e88:	bf 4f       	sbci	r27, 0xFF	; 255
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e5 5b       	subi	r30, 0xB5	; 181
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	80 81       	ld	r24, Z
    1e92:	91 81       	ldd	r25, Z+1	; 0x01
    1e94:	8d 93       	st	X+, r24
    1e96:	9c 93       	st	X, r25
    1e98:	fe 01       	movw	r30, r28
    1e9a:	e9 5b       	subi	r30, 0xB9	; 185
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	80 81       	ld	r24, Z
    1ea0:	91 81       	ldd	r25, Z+1	; 0x01
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <LCD_displayCharacter+0x4a4>
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	e9 5b       	subi	r30, 0xB9	; 185
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
    1eb0:	a8 e3       	ldi	r26, 0x38	; 56
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e8 e3       	ldi	r30, 0x38	; 56
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	87 7f       	andi	r24, 0xF7	; 247
    1ebc:	8c 93       	st	X, r24
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ed 5b       	subi	r30, 0xBD	; 189
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a0 e8       	ldi	r26, 0x80	; 128
    1eca:	bf e3       	ldi	r27, 0x3F	; 63
    1ecc:	80 83       	st	Z, r24
    1ece:	91 83       	std	Z+1, r25	; 0x01
    1ed0:	a2 83       	std	Z+2, r26	; 0x02
    1ed2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed4:	8e 01       	movw	r16, r28
    1ed6:	01 5c       	subi	r16, 0xC1	; 193
    1ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eda:	fe 01       	movw	r30, r28
    1edc:	ed 5b       	subi	r30, 0xBD	; 189
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	60 81       	ld	r22, Z
    1ee2:	71 81       	ldd	r23, Z+1	; 0x01
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	4a e7       	ldi	r20, 0x7A	; 122
    1eee:	55 e4       	ldi	r21, 0x45	; 69
    1ef0:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	f8 01       	movw	r30, r16
    1efa:	80 83       	st	Z, r24
    1efc:	91 83       	std	Z+1, r25	; 0x01
    1efe:	a2 83       	std	Z+2, r26	; 0x02
    1f00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f02:	fe 01       	movw	r30, r28
    1f04:	ff 96       	adiw	r30, 0x3f	; 63
    1f06:	60 81       	ld	r22, Z
    1f08:	71 81       	ldd	r23, Z+1	; 0x01
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	93 81       	ldd	r25, Z+3	; 0x03
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e8       	ldi	r20, 0x80	; 128
    1f14:	5f e3       	ldi	r21, 0x3F	; 63
    1f16:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    1f1a:	88 23       	and	r24, r24
    1f1c:	2c f4       	brge	.+10     	; 0x1f28 <LCD_displayCharacter+0x52a>
		__ticks = 1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	9e af       	std	Y+62, r25	; 0x3e
    1f24:	8d af       	std	Y+61, r24	; 0x3d
    1f26:	46 c0       	rjmp	.+140    	; 0x1fb4 <LCD_displayCharacter+0x5b6>
	else if (__tmp > 65535)
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ff 96       	adiw	r30, 0x3f	; 63
    1f2c:	60 81       	ld	r22, Z
    1f2e:	71 81       	ldd	r23, Z+1	; 0x01
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	93 81       	ldd	r25, Z+3	; 0x03
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	3f ef       	ldi	r19, 0xFF	; 255
    1f38:	4f e7       	ldi	r20, 0x7F	; 127
    1f3a:	57 e4       	ldi	r21, 0x47	; 71
    1f3c:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    1f40:	18 16       	cp	r1, r24
    1f42:	64 f5       	brge	.+88     	; 0x1f9c <LCD_displayCharacter+0x59e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f44:	fe 01       	movw	r30, r28
    1f46:	ed 5b       	subi	r30, 0xBD	; 189
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9e af       	std	Y+62, r25	; 0x3e
    1f70:	8d af       	std	Y+61, r24	; 0x3d
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <LCD_displayCharacter+0x594>
    1f74:	80 e9       	ldi	r24, 0x90	; 144
    1f76:	91 e0       	ldi	r25, 0x01	; 1
    1f78:	9c af       	std	Y+60, r25	; 0x3c
    1f7a:	8b af       	std	Y+59, r24	; 0x3b
    1f7c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f7e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LCD_displayCharacter+0x582>
    1f84:	9c af       	std	Y+60, r25	; 0x3c
    1f86:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	9e af       	std	Y+62, r25	; 0x3e
    1f90:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f92:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f94:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <LCD_displayCharacter+0x576>
    1f9a:	16 c0       	rjmp	.+44     	; 0x1fc8 <LCD_displayCharacter+0x5ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	ff 96       	adiw	r30, 0x3f	; 63
    1fa0:	60 81       	ld	r22, Z
    1fa2:	71 81       	ldd	r23, Z+1	; 0x01
    1fa4:	82 81       	ldd	r24, Z+2	; 0x02
    1fa6:	93 81       	ldd	r25, Z+3	; 0x03
    1fa8:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	9e af       	std	Y+62, r25	; 0x3e
    1fb2:	8d af       	std	Y+61, r24	; 0x3d
    1fb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fb8:	9a af       	std	Y+58, r25	; 0x3a
    1fba:	89 af       	std	Y+57, r24	; 0x39
    1fbc:	89 ad       	ldd	r24, Y+57	; 0x39
    1fbe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <LCD_displayCharacter+0x5c2>
    1fc4:	9a af       	std	Y+58, r25	; 0x3a
    1fc6:	89 af       	std	Y+57, r24	; 0x39
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	a0 e8       	ldi	r26, 0x80	; 128
    1fce:	bf e3       	ldi	r27, 0x3F	; 63
    1fd0:	8d ab       	std	Y+53, r24	; 0x35
    1fd2:	9e ab       	std	Y+54, r25	; 0x36
    1fd4:	af ab       	std	Y+55, r26	; 0x37
    1fd6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd8:	6d a9       	ldd	r22, Y+53	; 0x35
    1fda:	7e a9       	ldd	r23, Y+54	; 0x36
    1fdc:	8f a9       	ldd	r24, Y+55	; 0x37
    1fde:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4a e7       	ldi	r20, 0x7A	; 122
    1fe6:	55 e4       	ldi	r21, 0x45	; 69
    1fe8:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	89 ab       	std	Y+49, r24	; 0x31
    1ff2:	9a ab       	std	Y+50, r25	; 0x32
    1ff4:	ab ab       	std	Y+51, r26	; 0x33
    1ff6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ff8:	69 a9       	ldd	r22, Y+49	; 0x31
    1ffa:	7a a9       	ldd	r23, Y+50	; 0x32
    1ffc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ffe:	9c a9       	ldd	r25, Y+52	; 0x34
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    200c:	88 23       	and	r24, r24
    200e:	2c f4       	brge	.+10     	; 0x201a <LCD_displayCharacter+0x61c>
		__ticks = 1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	98 ab       	std	Y+48, r25	; 0x30
    2016:	8f a7       	std	Y+47, r24	; 0x2f
    2018:	3f c0       	rjmp	.+126    	; 0x2098 <LCD_displayCharacter+0x69a>
	else if (__tmp > 65535)
    201a:	69 a9       	ldd	r22, Y+49	; 0x31
    201c:	7a a9       	ldd	r23, Y+50	; 0x32
    201e:	8b a9       	ldd	r24, Y+51	; 0x33
    2020:	9c a9       	ldd	r25, Y+52	; 0x34
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	3f ef       	ldi	r19, 0xFF	; 255
    2026:	4f e7       	ldi	r20, 0x7F	; 127
    2028:	57 e4       	ldi	r21, 0x47	; 71
    202a:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    202e:	18 16       	cp	r1, r24
    2030:	4c f5       	brge	.+82     	; 0x2084 <LCD_displayCharacter+0x686>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2032:	6d a9       	ldd	r22, Y+53	; 0x35
    2034:	7e a9       	ldd	r23, Y+54	; 0x36
    2036:	8f a9       	ldd	r24, Y+55	; 0x37
    2038:	98 ad       	ldd	r25, Y+56	; 0x38
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e2       	ldi	r20, 0x20	; 32
    2040:	51 e4       	ldi	r21, 0x41	; 65
    2042:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	bc 01       	movw	r22, r24
    204c:	cd 01       	movw	r24, r26
    204e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	98 ab       	std	Y+48, r25	; 0x30
    2058:	8f a7       	std	Y+47, r24	; 0x2f
    205a:	0f c0       	rjmp	.+30     	; 0x207a <LCD_displayCharacter+0x67c>
    205c:	80 e9       	ldi	r24, 0x90	; 144
    205e:	91 e0       	ldi	r25, 0x01	; 1
    2060:	9e a7       	std	Y+46, r25	; 0x2e
    2062:	8d a7       	std	Y+45, r24	; 0x2d
    2064:	8d a5       	ldd	r24, Y+45	; 0x2d
    2066:	9e a5       	ldd	r25, Y+46	; 0x2e
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <LCD_displayCharacter+0x66a>
    206c:	9e a7       	std	Y+46, r25	; 0x2e
    206e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2070:	8f a5       	ldd	r24, Y+47	; 0x2f
    2072:	98 a9       	ldd	r25, Y+48	; 0x30
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	98 ab       	std	Y+48, r25	; 0x30
    2078:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207a:	8f a5       	ldd	r24, Y+47	; 0x2f
    207c:	98 a9       	ldd	r25, Y+48	; 0x30
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	69 f7       	brne	.-38     	; 0x205c <LCD_displayCharacter+0x65e>
    2082:	14 c0       	rjmp	.+40     	; 0x20ac <LCD_displayCharacter+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2084:	69 a9       	ldd	r22, Y+49	; 0x31
    2086:	7a a9       	ldd	r23, Y+50	; 0x32
    2088:	8b a9       	ldd	r24, Y+51	; 0x33
    208a:	9c a9       	ldd	r25, Y+52	; 0x34
    208c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	98 ab       	std	Y+48, r25	; 0x30
    2096:	8f a7       	std	Y+47, r24	; 0x2f
    2098:	8f a5       	ldd	r24, Y+47	; 0x2f
    209a:	98 a9       	ldd	r25, Y+48	; 0x30
    209c:	9c a7       	std	Y+44, r25	; 0x2c
    209e:	8b a7       	std	Y+43, r24	; 0x2b
    20a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <LCD_displayCharacter+0x6a6>
    20a8:	9c a7       	std	Y+44, r25	; 0x2c
    20aa:	8b a7       	std	Y+43, r24	; 0x2b
    20ac:	a8 e3       	ldi	r26, 0x38	; 56
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e8 e3       	ldi	r30, 0x38	; 56
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	88 60       	ori	r24, 0x08	; 8
    20b8:	8c 93       	st	X, r24
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a0 e8       	ldi	r26, 0x80	; 128
    20c0:	bf e3       	ldi	r27, 0x3F	; 63
    20c2:	8f a3       	std	Y+39, r24	; 0x27
    20c4:	98 a7       	std	Y+40, r25	; 0x28
    20c6:	a9 a7       	std	Y+41, r26	; 0x29
    20c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ca:	6f a1       	ldd	r22, Y+39	; 0x27
    20cc:	78 a5       	ldd	r23, Y+40	; 0x28
    20ce:	89 a5       	ldd	r24, Y+41	; 0x29
    20d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4a e7       	ldi	r20, 0x7A	; 122
    20d8:	55 e4       	ldi	r21, 0x45	; 69
    20da:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	8b a3       	std	Y+35, r24	; 0x23
    20e4:	9c a3       	std	Y+36, r25	; 0x24
    20e6:	ad a3       	std	Y+37, r26	; 0x25
    20e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ea:	6b a1       	ldd	r22, Y+35	; 0x23
    20ec:	7c a1       	ldd	r23, Y+36	; 0x24
    20ee:	8d a1       	ldd	r24, Y+37	; 0x25
    20f0:	9e a1       	ldd	r25, Y+38	; 0x26
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	5f e3       	ldi	r21, 0x3F	; 63
    20fa:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    20fe:	88 23       	and	r24, r24
    2100:	2c f4       	brge	.+10     	; 0x210c <LCD_displayCharacter+0x70e>
		__ticks = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9a a3       	std	Y+34, r25	; 0x22
    2108:	89 a3       	std	Y+33, r24	; 0x21
    210a:	3f c0       	rjmp	.+126    	; 0x218a <LCD_displayCharacter+0x78c>
	else if (__tmp > 65535)
    210c:	6b a1       	ldd	r22, Y+35	; 0x23
    210e:	7c a1       	ldd	r23, Y+36	; 0x24
    2110:	8d a1       	ldd	r24, Y+37	; 0x25
    2112:	9e a1       	ldd	r25, Y+38	; 0x26
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	3f ef       	ldi	r19, 0xFF	; 255
    2118:	4f e7       	ldi	r20, 0x7F	; 127
    211a:	57 e4       	ldi	r21, 0x47	; 71
    211c:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    2120:	18 16       	cp	r1, r24
    2122:	4c f5       	brge	.+82     	; 0x2176 <LCD_displayCharacter+0x778>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2124:	6f a1       	ldd	r22, Y+39	; 0x27
    2126:	78 a5       	ldd	r23, Y+40	; 0x28
    2128:	89 a5       	ldd	r24, Y+41	; 0x29
    212a:	9a a5       	ldd	r25, Y+42	; 0x2a
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e2       	ldi	r20, 0x20	; 32
    2132:	51 e4       	ldi	r21, 0x41	; 65
    2134:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9a a3       	std	Y+34, r25	; 0x22
    214a:	89 a3       	std	Y+33, r24	; 0x21
    214c:	0f c0       	rjmp	.+30     	; 0x216c <LCD_displayCharacter+0x76e>
    214e:	80 e9       	ldi	r24, 0x90	; 144
    2150:	91 e0       	ldi	r25, 0x01	; 1
    2152:	98 a3       	std	Y+32, r25	; 0x20
    2154:	8f 8f       	std	Y+31, r24	; 0x1f
    2156:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2158:	98 a1       	ldd	r25, Y+32	; 0x20
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <LCD_displayCharacter+0x75c>
    215e:	98 a3       	std	Y+32, r25	; 0x20
    2160:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2162:	89 a1       	ldd	r24, Y+33	; 0x21
    2164:	9a a1       	ldd	r25, Y+34	; 0x22
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	9a a3       	std	Y+34, r25	; 0x22
    216a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216c:	89 a1       	ldd	r24, Y+33	; 0x21
    216e:	9a a1       	ldd	r25, Y+34	; 0x22
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	69 f7       	brne	.-38     	; 0x214e <LCD_displayCharacter+0x750>
    2174:	14 c0       	rjmp	.+40     	; 0x219e <LCD_displayCharacter+0x7a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2176:	6b a1       	ldd	r22, Y+35	; 0x23
    2178:	7c a1       	ldd	r23, Y+36	; 0x24
    217a:	8d a1       	ldd	r24, Y+37	; 0x25
    217c:	9e a1       	ldd	r25, Y+38	; 0x26
    217e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9a a3       	std	Y+34, r25	; 0x22
    2188:	89 a3       	std	Y+33, r24	; 0x21
    218a:	89 a1       	ldd	r24, Y+33	; 0x21
    218c:	9a a1       	ldd	r25, Y+34	; 0x22
    218e:	9e 8f       	std	Y+30, r25	; 0x1e
    2190:	8d 8f       	std	Y+29, r24	; 0x1d
    2192:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2194:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <LCD_displayCharacter+0x798>
    219a:	9e 8f       	std	Y+30, r25	; 0x1e
    219c:	8d 8f       	std	Y+29, r24	; 0x1d
    219e:	ab e3       	ldi	r26, 0x3B	; 59
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	fe 01       	movw	r30, r28
    21a4:	ef 58       	subi	r30, 0x8F	; 143
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 81       	ld	r24, Z
    21aa:	8c 93       	st	X, r24
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	a0 e8       	ldi	r26, 0x80	; 128
    21b2:	bf e3       	ldi	r27, 0x3F	; 63
    21b4:	89 8f       	std	Y+25, r24	; 0x19
    21b6:	9a 8f       	std	Y+26, r25	; 0x1a
    21b8:	ab 8f       	std	Y+27, r26	; 0x1b
    21ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21bc:	69 8d       	ldd	r22, Y+25	; 0x19
    21be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4a e7       	ldi	r20, 0x7A	; 122
    21ca:	55 e4       	ldi	r21, 0x45	; 69
    21cc:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	8d 8b       	std	Y+21, r24	; 0x15
    21d6:	9e 8b       	std	Y+22, r25	; 0x16
    21d8:	af 8b       	std	Y+23, r26	; 0x17
    21da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21dc:	6d 89       	ldd	r22, Y+21	; 0x15
    21de:	7e 89       	ldd	r23, Y+22	; 0x16
    21e0:	8f 89       	ldd	r24, Y+23	; 0x17
    21e2:	98 8d       	ldd	r25, Y+24	; 0x18
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e8       	ldi	r20, 0x80	; 128
    21ea:	5f e3       	ldi	r21, 0x3F	; 63
    21ec:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    21f0:	88 23       	and	r24, r24
    21f2:	2c f4       	brge	.+10     	; 0x21fe <LCD_displayCharacter+0x800>
		__ticks = 1;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9c 8b       	std	Y+20, r25	; 0x14
    21fa:	8b 8b       	std	Y+19, r24	; 0x13
    21fc:	3f c0       	rjmp	.+126    	; 0x227c <LCD_displayCharacter+0x87e>
	else if (__tmp > 65535)
    21fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2200:	7e 89       	ldd	r23, Y+22	; 0x16
    2202:	8f 89       	ldd	r24, Y+23	; 0x17
    2204:	98 8d       	ldd	r25, Y+24	; 0x18
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	3f ef       	ldi	r19, 0xFF	; 255
    220a:	4f e7       	ldi	r20, 0x7F	; 127
    220c:	57 e4       	ldi	r21, 0x47	; 71
    220e:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    2212:	18 16       	cp	r1, r24
    2214:	4c f5       	brge	.+82     	; 0x2268 <LCD_displayCharacter+0x86a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2216:	69 8d       	ldd	r22, Y+25	; 0x19
    2218:	7a 8d       	ldd	r23, Y+26	; 0x1a
    221a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e2       	ldi	r20, 0x20	; 32
    2224:	51 e4       	ldi	r21, 0x41	; 65
    2226:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9c 8b       	std	Y+20, r25	; 0x14
    223c:	8b 8b       	std	Y+19, r24	; 0x13
    223e:	0f c0       	rjmp	.+30     	; 0x225e <LCD_displayCharacter+0x860>
    2240:	80 e9       	ldi	r24, 0x90	; 144
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	9a 8b       	std	Y+18, r25	; 0x12
    2246:	89 8b       	std	Y+17, r24	; 0x11
    2248:	89 89       	ldd	r24, Y+17	; 0x11
    224a:	9a 89       	ldd	r25, Y+18	; 0x12
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <LCD_displayCharacter+0x84e>
    2250:	9a 8b       	std	Y+18, r25	; 0x12
    2252:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2254:	8b 89       	ldd	r24, Y+19	; 0x13
    2256:	9c 89       	ldd	r25, Y+20	; 0x14
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	9c 8b       	std	Y+20, r25	; 0x14
    225c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225e:	8b 89       	ldd	r24, Y+19	; 0x13
    2260:	9c 89       	ldd	r25, Y+20	; 0x14
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	69 f7       	brne	.-38     	; 0x2240 <LCD_displayCharacter+0x842>
    2266:	14 c0       	rjmp	.+40     	; 0x2290 <LCD_displayCharacter+0x892>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2268:	6d 89       	ldd	r22, Y+21	; 0x15
    226a:	7e 89       	ldd	r23, Y+22	; 0x16
    226c:	8f 89       	ldd	r24, Y+23	; 0x17
    226e:	98 8d       	ldd	r25, Y+24	; 0x18
    2270:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	9c 8b       	std	Y+20, r25	; 0x14
    227a:	8b 8b       	std	Y+19, r24	; 0x13
    227c:	8b 89       	ldd	r24, Y+19	; 0x13
    227e:	9c 89       	ldd	r25, Y+20	; 0x14
    2280:	98 8b       	std	Y+16, r25	; 0x10
    2282:	8f 87       	std	Y+15, r24	; 0x0f
    2284:	8f 85       	ldd	r24, Y+15	; 0x0f
    2286:	98 89       	ldd	r25, Y+16	; 0x10
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_displayCharacter+0x88a>
    228c:	98 8b       	std	Y+16, r25	; 0x10
    228e:	8f 87       	std	Y+15, r24	; 0x0f
    2290:	a8 e3       	ldi	r26, 0x38	; 56
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e8 e3       	ldi	r30, 0x38	; 56
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	87 7f       	andi	r24, 0xF7	; 247
    229c:	8c 93       	st	X, r24
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	a0 e8       	ldi	r26, 0x80	; 128
    22a4:	bf e3       	ldi	r27, 0x3F	; 63
    22a6:	8b 87       	std	Y+11, r24	; 0x0b
    22a8:	9c 87       	std	Y+12, r25	; 0x0c
    22aa:	ad 87       	std	Y+13, r26	; 0x0d
    22ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	4a e7       	ldi	r20, 0x7A	; 122
    22bc:	55 e4       	ldi	r21, 0x45	; 69
    22be:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	8f 83       	std	Y+7, r24	; 0x07
    22c8:	98 87       	std	Y+8, r25	; 0x08
    22ca:	a9 87       	std	Y+9, r26	; 0x09
    22cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ce:	6f 81       	ldd	r22, Y+7	; 0x07
    22d0:	78 85       	ldd	r23, Y+8	; 0x08
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e8       	ldi	r20, 0x80	; 128
    22dc:	5f e3       	ldi	r21, 0x3F	; 63
    22de:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    22e2:	88 23       	and	r24, r24
    22e4:	2c f4       	brge	.+10     	; 0x22f0 <LCD_displayCharacter+0x8f2>
		__ticks = 1;
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	3f c0       	rjmp	.+126    	; 0x236e <LCD_displayCharacter+0x970>
	else if (__tmp > 65535)
    22f0:	6f 81       	ldd	r22, Y+7	; 0x07
    22f2:	78 85       	ldd	r23, Y+8	; 0x08
    22f4:	89 85       	ldd	r24, Y+9	; 0x09
    22f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	3f ef       	ldi	r19, 0xFF	; 255
    22fc:	4f e7       	ldi	r20, 0x7F	; 127
    22fe:	57 e4       	ldi	r21, 0x47	; 71
    2300:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    2304:	18 16       	cp	r1, r24
    2306:	4c f5       	brge	.+82     	; 0x235a <LCD_displayCharacter+0x95c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2308:	6b 85       	ldd	r22, Y+11	; 0x0b
    230a:	7c 85       	ldd	r23, Y+12	; 0x0c
    230c:	8d 85       	ldd	r24, Y+13	; 0x0d
    230e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	51 e4       	ldi	r21, 0x41	; 65
    2318:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	bc 01       	movw	r22, r24
    2322:	cd 01       	movw	r24, r26
    2324:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	9e 83       	std	Y+6, r25	; 0x06
    232e:	8d 83       	std	Y+5, r24	; 0x05
    2330:	0f c0       	rjmp	.+30     	; 0x2350 <LCD_displayCharacter+0x952>
    2332:	80 e9       	ldi	r24, 0x90	; 144
    2334:	91 e0       	ldi	r25, 0x01	; 1
    2336:	9c 83       	std	Y+4, r25	; 0x04
    2338:	8b 83       	std	Y+3, r24	; 0x03
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <LCD_displayCharacter+0x940>
    2342:	9c 83       	std	Y+4, r25	; 0x04
    2344:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2346:	8d 81       	ldd	r24, Y+5	; 0x05
    2348:	9e 81       	ldd	r25, Y+6	; 0x06
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	9e 83       	std	Y+6, r25	; 0x06
    234e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2350:	8d 81       	ldd	r24, Y+5	; 0x05
    2352:	9e 81       	ldd	r25, Y+6	; 0x06
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	69 f7       	brne	.-38     	; 0x2332 <LCD_displayCharacter+0x934>
    2358:	14 c0       	rjmp	.+40     	; 0x2382 <LCD_displayCharacter+0x984>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235a:	6f 81       	ldd	r22, Y+7	; 0x07
    235c:	78 85       	ldd	r23, Y+8	; 0x08
    235e:	89 85       	ldd	r24, Y+9	; 0x09
    2360:	9a 85       	ldd	r25, Y+10	; 0x0a
    2362:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	9e 81       	ldd	r25, Y+6	; 0x06
    2372:	9a 83       	std	Y+2, r25	; 0x02
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	f1 f7       	brne	.-4      	; 0x237a <LCD_displayCharacter+0x97c>
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 83       	std	Y+1, r24	; 0x01
    2382:	cd 58       	subi	r28, 0x8D	; 141
    2384:	df 4f       	sbci	r29, 0xFF	; 255
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	08 95       	ret

0000239a <LCD_displayString>:
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <LCD_displayString+0x6>
    23a0:	0f 92       	push	r0
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	9b 83       	std	Y+3, r25	; 0x03
    23a8:	8a 83       	std	Y+2, r24	; 0x02
    23aa:	19 82       	std	Y+1, r1	; 0x01
    23ac:	0e c0       	rjmp	.+28     	; 0x23ca <LCD_displayString+0x30>
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	9b 81       	ldd	r25, Y+3	; 0x03
    23b8:	fc 01       	movw	r30, r24
    23ba:	e2 0f       	add	r30, r18
    23bc:	f3 1f       	adc	r31, r19
    23be:	80 81       	ld	r24, Z
    23c0:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LCD_displayCharacter>
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	8f 5f       	subi	r24, 0xFF	; 255
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	9b 81       	ldd	r25, Y+3	; 0x03
    23d4:	fc 01       	movw	r30, r24
    23d6:	e2 0f       	add	r30, r18
    23d8:	f3 1f       	adc	r31, r19
    23da:	80 81       	ld	r24, Z
    23dc:	88 23       	and	r24, r24
    23de:	39 f7       	brne	.-50     	; 0x23ae <LCD_displayString+0x14>
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <LCD_goToRowColumn>:
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <LCD_goToRowColumn+0x6>
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <LCD_goToRowColumn+0x8>
    23f4:	0f 92       	push	r0
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	8a 83       	std	Y+2, r24	; 0x02
    23fc:	6b 83       	std	Y+3, r22	; 0x03
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	3d 83       	std	Y+5, r19	; 0x05
    2406:	2c 83       	std	Y+4, r18	; 0x04
    2408:	8c 81       	ldd	r24, Y+4	; 0x04
    240a:	9d 81       	ldd	r25, Y+5	; 0x05
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	91 05       	cpc	r25, r1
    2410:	c1 f0       	breq	.+48     	; 0x2442 <LCD_goToRowColumn+0x56>
    2412:	2c 81       	ldd	r18, Y+4	; 0x04
    2414:	3d 81       	ldd	r19, Y+5	; 0x05
    2416:	22 30       	cpi	r18, 0x02	; 2
    2418:	31 05       	cpc	r19, r1
    241a:	2c f4       	brge	.+10     	; 0x2426 <LCD_goToRowColumn+0x3a>
    241c:	8c 81       	ldd	r24, Y+4	; 0x04
    241e:	9d 81       	ldd	r25, Y+5	; 0x05
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	61 f0       	breq	.+24     	; 0x243c <LCD_goToRowColumn+0x50>
    2424:	19 c0       	rjmp	.+50     	; 0x2458 <LCD_goToRowColumn+0x6c>
    2426:	2c 81       	ldd	r18, Y+4	; 0x04
    2428:	3d 81       	ldd	r19, Y+5	; 0x05
    242a:	22 30       	cpi	r18, 0x02	; 2
    242c:	31 05       	cpc	r19, r1
    242e:	69 f0       	breq	.+26     	; 0x244a <LCD_goToRowColumn+0x5e>
    2430:	8c 81       	ldd	r24, Y+4	; 0x04
    2432:	9d 81       	ldd	r25, Y+5	; 0x05
    2434:	83 30       	cpi	r24, 0x03	; 3
    2436:	91 05       	cpc	r25, r1
    2438:	61 f0       	breq	.+24     	; 0x2452 <LCD_goToRowColumn+0x66>
    243a:	0e c0       	rjmp	.+28     	; 0x2458 <LCD_goToRowColumn+0x6c>
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	0b c0       	rjmp	.+22     	; 0x2458 <LCD_goToRowColumn+0x6c>
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	80 5c       	subi	r24, 0xC0	; 192
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	07 c0       	rjmp	.+14     	; 0x2458 <LCD_goToRowColumn+0x6c>
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	80 5f       	subi	r24, 0xF0	; 240
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	03 c0       	rjmp	.+6      	; 0x2458 <LCD_goToRowColumn+0x6c>
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	80 5b       	subi	r24, 0xB0	; 176
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	80 68       	ori	r24, 0x80	; 128
    245c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <LCD_sendCommand>
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <LCD_displayStringRowColumn>:
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	00 d0       	rcall	.+0      	; 0x2476 <LCD_displayStringRowColumn+0x6>
    2476:	00 d0       	rcall	.+0      	; 0x2478 <LCD_displayStringRowColumn+0x8>
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	6a 83       	std	Y+2, r22	; 0x02
    2480:	5c 83       	std	Y+4, r21	; 0x04
    2482:	4b 83       	std	Y+3, r20	; 0x03
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	6a 81       	ldd	r22, Y+2	; 0x02
    2488:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_goToRowColumn>
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	9c 81       	ldd	r25, Y+4	; 0x04
    2490:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_displayString>
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <LCD_intgerToString>:
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	62 97       	sbiw	r28, 0x12	; 18
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
    24b6:	9a 8b       	std	Y+18, r25	; 0x12
    24b8:	89 8b       	std	Y+17, r24	; 0x11
    24ba:	89 89       	ldd	r24, Y+17	; 0x11
    24bc:	9a 89       	ldd	r25, Y+18	; 0x12
    24be:	9e 01       	movw	r18, r28
    24c0:	2f 5f       	subi	r18, 0xFF	; 255
    24c2:	3f 4f       	sbci	r19, 0xFF	; 255
    24c4:	b9 01       	movw	r22, r18
    24c6:	4a e0       	ldi	r20, 0x0A	; 10
    24c8:	50 e0       	ldi	r21, 0x00	; 0
    24ca:	0e 94 99 1c 	call	0x3932	; 0x3932 <itoa>
    24ce:	ce 01       	movw	r24, r28
    24d0:	01 96       	adiw	r24, 0x01	; 1
    24d2:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_displayString>
    24d6:	62 96       	adiw	r28, 0x12	; 18
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <LCD_clearScreen>:
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <LCD_sendCommand>
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <main>:
void welcome_screen();

unsigned char access_allowed = 0;

int main(void)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	2e 97       	sbiw	r28, 0x0e	; 14
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
DDRD |= (1<<3) | (1<<4);
    2510:	a1 e3       	ldi	r26, 0x31	; 49
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e1 e3       	ldi	r30, 0x31	; 49
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	88 61       	ori	r24, 0x18	; 24
    251c:	8c 93       	st	X, r24

adc0_init();
    251e:	0e 94 49 00 	call	0x92	; 0x92 <adc0_init>
PWM_init0();
    2522:	0e 94 a7 00 	call	0x14e	; 0x14e <PWM_init0>
LCD_init();
    2526:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <LCD_init>

Usonic_init();
    252a:	0e 94 f7 13 	call	0x27ee	; 0x27ee <Usonic_init>
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	a0 ef       	ldi	r26, 0xF0	; 240
    2534:	b1 e4       	ldi	r27, 0x41	; 65
    2536:	8b 87       	std	Y+11, r24	; 0x0b
    2538:	9c 87       	std	Y+12, r25	; 0x0c
    253a:	ad 87       	std	Y+13, r26	; 0x0d
    253c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2540:	7c 85       	ldd	r23, Y+12	; 0x0c
    2542:	8d 85       	ldd	r24, Y+13	; 0x0d
    2544:	9e 85       	ldd	r25, Y+14	; 0x0e
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	4a e7       	ldi	r20, 0x7A	; 122
    254c:	55 e4       	ldi	r21, 0x45	; 69
    254e:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	8f 83       	std	Y+7, r24	; 0x07
    2558:	98 87       	std	Y+8, r25	; 0x08
    255a:	a9 87       	std	Y+9, r26	; 0x09
    255c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e8       	ldi	r20, 0x80	; 128
    256c:	5f e3       	ldi	r21, 0x3F	; 63
    256e:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    2572:	88 23       	and	r24, r24
    2574:	2c f4       	brge	.+10     	; 0x2580 <main+0x84>
		__ticks = 1;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9e 83       	std	Y+6, r25	; 0x06
    257c:	8d 83       	std	Y+5, r24	; 0x05
    257e:	3f c0       	rjmp	.+126    	; 0x25fe <main+0x102>
	else if (__tmp > 65535)
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	3f ef       	ldi	r19, 0xFF	; 255
    258c:	4f e7       	ldi	r20, 0x7F	; 127
    258e:	57 e4       	ldi	r21, 0x47	; 71
    2590:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    2594:	18 16       	cp	r1, r24
    2596:	4c f5       	brge	.+82     	; 0x25ea <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2598:	6b 85       	ldd	r22, Y+11	; 0x0b
    259a:	7c 85       	ldd	r23, Y+12	; 0x0c
    259c:	8d 85       	ldd	r24, Y+13	; 0x0d
    259e:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e2       	ldi	r20, 0x20	; 32
    25a6:	51 e4       	ldi	r21, 0x41	; 65
    25a8:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	0f c0       	rjmp	.+30     	; 0x25e0 <main+0xe4>
    25c2:	80 e9       	ldi	r24, 0x90	; 144
    25c4:	91 e0       	ldi	r25, 0x01	; 1
    25c6:	9c 83       	std	Y+4, r25	; 0x04
    25c8:	8b 83       	std	Y+3, r24	; 0x03
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	9c 81       	ldd	r25, Y+4	; 0x04
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <main+0xd2>
    25d2:	9c 83       	std	Y+4, r25	; 0x04
    25d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	69 f7       	brne	.-38     	; 0x25c2 <main+0xc6>
    25e8:	14 c0       	rjmp	.+40     	; 0x2612 <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2600:	9e 81       	ldd	r25, Y+6	; 0x06
    2602:	9a 83       	std	Y+2, r25	; 0x02
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <main+0x10e>
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(30);

while(1)
{

Usonic_trigger();
    2612:	0e 94 1b 14 	call	0x2836	; 0x2836 <Usonic_trigger>

if(count_a<60)
    2616:	80 91 21 02 	lds	r24, 0x0221
    261a:	90 91 22 02 	lds	r25, 0x0222
    261e:	8c 33       	cpi	r24, 0x3C	; 60
    2620:	91 05       	cpc	r25, r1
    2622:	bc f7       	brge	.-18     	; 0x2612 <main+0x116>
{
    welcome_screen();
    2624:	0e 94 21 13 	call	0x2642	; 0x2642 <welcome_screen>
    default_screen();
    2628:	0e 94 0a 07 	call	0xe14	; 0xe14 <default_screen>
    while(1)
    {
        access_allowed = keypad_entry();
    262c:	0e 94 cc 02 	call	0x598	; 0x598 <keypad_entry>
    2630:	80 93 1e 02 	sts	0x021E, r24
        if(access_allowed == 1) break;
    2634:	80 91 1e 02 	lds	r24, 0x021E
    2638:	81 30       	cpi	r24, 0x01	; 1
    263a:	c1 f7       	brne	.-16     	; 0x262c <main+0x130>
        else if(access_allowed == 0) continue;
    }
    LCD_clearScreen();
    263c:	0e 94 74 12 	call	0x24e8	; 0x24e8 <LCD_clearScreen>
    2640:	e8 cf       	rjmp	.-48     	; 0x2612 <main+0x116>

00002642 <welcome_screen>:




void welcome_screen()
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	ac 97       	sbiw	r28, 0x2c	; 44
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    //unsigned char wel[8] = "Welcome!";
    unsigned char wel[22] = "!emocleW                 "; // 8 7
    2656:	ce 01       	movw	r24, r28
    2658:	42 96       	adiw	r24, 0x12	; 18
    265a:	99 a7       	std	Y+41, r25	; 0x29
    265c:	88 a7       	std	Y+40, r24	; 0x28
    265e:	ee ee       	ldi	r30, 0xEE	; 238
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	fb a7       	std	Y+43, r31	; 0x2b
    2664:	ea a7       	std	Y+42, r30	; 0x2a
    2666:	f6 e1       	ldi	r31, 0x16	; 22
    2668:	fc a7       	std	Y+44, r31	; 0x2c
    266a:	ea a5       	ldd	r30, Y+42	; 0x2a
    266c:	fb a5       	ldd	r31, Y+43	; 0x2b
    266e:	00 80       	ld	r0, Z
    2670:	8a a5       	ldd	r24, Y+42	; 0x2a
    2672:	9b a5       	ldd	r25, Y+43	; 0x2b
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	9b a7       	std	Y+43, r25	; 0x2b
    2678:	8a a7       	std	Y+42, r24	; 0x2a
    267a:	e8 a5       	ldd	r30, Y+40	; 0x28
    267c:	f9 a5       	ldd	r31, Y+41	; 0x29
    267e:	00 82       	st	Z, r0
    2680:	88 a5       	ldd	r24, Y+40	; 0x28
    2682:	99 a5       	ldd	r25, Y+41	; 0x29
    2684:	01 96       	adiw	r24, 0x01	; 1
    2686:	99 a7       	std	Y+41, r25	; 0x29
    2688:	88 a7       	std	Y+40, r24	; 0x28
    268a:	9c a5       	ldd	r25, Y+44	; 0x2c
    268c:	91 50       	subi	r25, 0x01	; 1
    268e:	9c a7       	std	Y+44, r25	; 0x2c
    2690:	ec a5       	ldd	r30, Y+44	; 0x2c
    2692:	ee 23       	and	r30, r30
    2694:	51 f7       	brne	.-44     	; 0x266a <welcome_screen+0x28>
    unsigned char a=0, s=0, d=0;
    2696:	19 8a       	std	Y+17, r1	; 0x11
    2698:	18 8a       	std	Y+16, r1	; 0x10
    269a:	1f 86       	std	Y+15, r1	; 0x0f

for(a=1 ; a<25 ;a++)
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	89 8b       	std	Y+17, r24	; 0x11
    26a0:	99 c0       	rjmp	.+306    	; 0x27d4 <welcome_screen+0x192>
    {
    LCD_clearScreen();
    26a2:	0e 94 74 12 	call	0x24e8	; 0x24e8 <LCD_clearScreen>
    LCD_goToRowColumn(0,0);
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_goToRowColumn>
    d = a;
    26ae:	89 89       	ldd	r24, Y+17	; 0x11
    26b0:	8f 87       	std	Y+15, r24	; 0x0f
    for(s=0 ; s<16 ;s++)
    26b2:	18 8a       	std	Y+16, r1	; 0x10
    26b4:	17 c0       	rjmp	.+46     	; 0x26e4 <welcome_screen+0xa2>
        {
        LCD_displayCharacter(wel[d-1]);
    26b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b8:	88 2f       	mov	r24, r24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9c 01       	movw	r18, r24
    26be:	21 50       	subi	r18, 0x01	; 1
    26c0:	30 40       	sbci	r19, 0x00	; 0
    26c2:	ce 01       	movw	r24, r28
    26c4:	42 96       	adiw	r24, 0x12	; 18
    26c6:	fc 01       	movw	r30, r24
    26c8:	e2 0f       	add	r30, r18
    26ca:	f3 1f       	adc	r31, r19
    26cc:	80 81       	ld	r24, Z
    26ce:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LCD_displayCharacter>
        d--;
    26d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d4:	81 50       	subi	r24, 0x01	; 1
    26d6:	8f 87       	std	Y+15, r24	; 0x0f
        if(d==0) break;
    26d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26da:	88 23       	and	r24, r24
    26dc:	31 f0       	breq	.+12     	; 0x26ea <welcome_screen+0xa8>
for(a=1 ; a<25 ;a++)
    {
    LCD_clearScreen();
    LCD_goToRowColumn(0,0);
    d = a;
    for(s=0 ; s<16 ;s++)
    26de:	88 89       	ldd	r24, Y+16	; 0x10
    26e0:	8f 5f       	subi	r24, 0xFF	; 255
    26e2:	88 8b       	std	Y+16, r24	; 0x10
    26e4:	88 89       	ldd	r24, Y+16	; 0x10
    26e6:	80 31       	cpi	r24, 0x10	; 16
    26e8:	30 f3       	brcs	.-52     	; 0x26b6 <welcome_screen+0x74>
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	a8 ec       	ldi	r26, 0xC8	; 200
    26f0:	b2 e4       	ldi	r27, 0x42	; 66
    26f2:	8b 87       	std	Y+11, r24	; 0x0b
    26f4:	9c 87       	std	Y+12, r25	; 0x0c
    26f6:	ad 87       	std	Y+13, r26	; 0x0d
    26f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    26fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2700:	9e 85       	ldd	r25, Y+14	; 0x0e
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	4a e7       	ldi	r20, 0x7A	; 122
    2708:	55 e4       	ldi	r21, 0x45	; 69
    270a:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	8f 83       	std	Y+7, r24	; 0x07
    2714:	98 87       	std	Y+8, r25	; 0x08
    2716:	a9 87       	std	Y+9, r26	; 0x09
    2718:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    271a:	6f 81       	ldd	r22, Y+7	; 0x07
    271c:	78 85       	ldd	r23, Y+8	; 0x08
    271e:	89 85       	ldd	r24, Y+9	; 0x09
    2720:	9a 85       	ldd	r25, Y+10	; 0x0a
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e8       	ldi	r20, 0x80	; 128
    2728:	5f e3       	ldi	r21, 0x3F	; 63
    272a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    272e:	88 23       	and	r24, r24
    2730:	2c f4       	brge	.+10     	; 0x273c <welcome_screen+0xfa>
		__ticks = 1;
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	9e 83       	std	Y+6, r25	; 0x06
    2738:	8d 83       	std	Y+5, r24	; 0x05
    273a:	3f c0       	rjmp	.+126    	; 0x27ba <welcome_screen+0x178>
	else if (__tmp > 65535)
    273c:	6f 81       	ldd	r22, Y+7	; 0x07
    273e:	78 85       	ldd	r23, Y+8	; 0x08
    2740:	89 85       	ldd	r24, Y+9	; 0x09
    2742:	9a 85       	ldd	r25, Y+10	; 0x0a
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	3f ef       	ldi	r19, 0xFF	; 255
    2748:	4f e7       	ldi	r20, 0x7F	; 127
    274a:	57 e4       	ldi	r21, 0x47	; 71
    274c:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    2750:	18 16       	cp	r1, r24
    2752:	4c f5       	brge	.+82     	; 0x27a6 <welcome_screen+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2754:	6b 85       	ldd	r22, Y+11	; 0x0b
    2756:	7c 85       	ldd	r23, Y+12	; 0x0c
    2758:	8d 85       	ldd	r24, Y+13	; 0x0d
    275a:	9e 85       	ldd	r25, Y+14	; 0x0e
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e2       	ldi	r20, 0x20	; 32
    2762:	51 e4       	ldi	r21, 0x41	; 65
    2764:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	bc 01       	movw	r22, r24
    276e:	cd 01       	movw	r24, r26
    2770:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	9e 83       	std	Y+6, r25	; 0x06
    277a:	8d 83       	std	Y+5, r24	; 0x05
    277c:	0f c0       	rjmp	.+30     	; 0x279c <welcome_screen+0x15a>
    277e:	80 e9       	ldi	r24, 0x90	; 144
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	9c 83       	std	Y+4, r25	; 0x04
    2784:	8b 83       	std	Y+3, r24	; 0x03
    2786:	8b 81       	ldd	r24, Y+3	; 0x03
    2788:	9c 81       	ldd	r25, Y+4	; 0x04
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <welcome_screen+0x148>
    278e:	9c 83       	std	Y+4, r25	; 0x04
    2790:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2792:	8d 81       	ldd	r24, Y+5	; 0x05
    2794:	9e 81       	ldd	r25, Y+6	; 0x06
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	9e 83       	std	Y+6, r25	; 0x06
    279a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	9e 81       	ldd	r25, Y+6	; 0x06
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	69 f7       	brne	.-38     	; 0x277e <welcome_screen+0x13c>
    27a4:	14 c0       	rjmp	.+40     	; 0x27ce <welcome_screen+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a6:	6f 81       	ldd	r22, Y+7	; 0x07
    27a8:	78 85       	ldd	r23, Y+8	; 0x08
    27aa:	89 85       	ldd	r24, Y+9	; 0x09
    27ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ae:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	9e 83       	std	Y+6, r25	; 0x06
    27b8:	8d 83       	std	Y+5, r24	; 0x05
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	9e 81       	ldd	r25, Y+6	; 0x06
    27be:	9a 83       	std	Y+2, r25	; 0x02
    27c0:	89 83       	std	Y+1, r24	; 0x01
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	9a 81       	ldd	r25, Y+2	; 0x02
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <welcome_screen+0x184>
    27ca:	9a 83       	std	Y+2, r25	; 0x02
    27cc:	89 83       	std	Y+1, r24	; 0x01
{
    //unsigned char wel[8] = "Welcome!";
    unsigned char wel[22] = "!emocleW                 "; // 8 7
    unsigned char a=0, s=0, d=0;

for(a=1 ; a<25 ;a++)
    27ce:	89 89       	ldd	r24, Y+17	; 0x11
    27d0:	8f 5f       	subi	r24, 0xFF	; 255
    27d2:	89 8b       	std	Y+17, r24	; 0x11
    27d4:	89 89       	ldd	r24, Y+17	; 0x11
    27d6:	89 31       	cpi	r24, 0x19	; 25
    27d8:	08 f4       	brcc	.+2      	; 0x27dc <welcome_screen+0x19a>
    27da:	63 cf       	rjmp	.-314    	; 0x26a2 <welcome_screen+0x60>
        if(d==0) break;
        }
        _delay_ms(100);
    }

}
    27dc:	ac 96       	adiw	r28, 0x2c	; 44
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <Usonic_init>:
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	a1 e3       	ldi	r26, 0x31	; 49
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	e1 e3       	ldi	r30, 0x31	; 49
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	82 60       	ori	r24, 0x02	; 2
    2802:	8c 93       	st	X, r24
    2804:	a1 e3       	ldi	r26, 0x31	; 49
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e1 e3       	ldi	r30, 0x31	; 49
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	8b 7f       	andi	r24, 0xFB	; 251
    2810:	8c 93       	st	X, r24
    2812:	ab e5       	ldi	r26, 0x5B	; 91
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	eb e5       	ldi	r30, 0x5B	; 91
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	80 64       	ori	r24, 0x40	; 64
    281e:	8c 93       	st	X, r24
    2820:	a5 e5       	ldi	r26, 0x55	; 85
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	e5 e5       	ldi	r30, 0x55	; 85
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	81 60       	ori	r24, 0x01	; 1
    282c:	8c 93       	st	X, r24
    282e:	78 94       	sei
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <Usonic_trigger>:
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	2e 97       	sbiw	r28, 0x0e	; 14
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	a2 e3       	ldi	r26, 0x32	; 50
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e2 e3       	ldi	r30, 0x32	; 50
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	82 60       	ori	r24, 0x02	; 2
    2856:	8c 93       	st	X, r24
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a0 e7       	ldi	r26, 0x70	; 112
    285e:	b1 e4       	ldi	r27, 0x41	; 65
    2860:	8b 87       	std	Y+11, r24	; 0x0b
    2862:	9c 87       	std	Y+12, r25	; 0x0c
    2864:	ad 87       	std	Y+13, r26	; 0x0d
    2866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2868:	6b 85       	ldd	r22, Y+11	; 0x0b
    286a:	7c 85       	ldd	r23, Y+12	; 0x0c
    286c:	8d 85       	ldd	r24, Y+13	; 0x0d
    286e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4a e7       	ldi	r20, 0x7A	; 122
    2876:	55 e4       	ldi	r21, 0x45	; 69
    2878:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	8f 83       	std	Y+7, r24	; 0x07
    2882:	98 87       	std	Y+8, r25	; 0x08
    2884:	a9 87       	std	Y+9, r26	; 0x09
    2886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2888:	6f 81       	ldd	r22, Y+7	; 0x07
    288a:	78 85       	ldd	r23, Y+8	; 0x08
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e8       	ldi	r20, 0x80	; 128
    2896:	5f e3       	ldi	r21, 0x3F	; 63
    2898:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__ltsf2>
    289c:	88 23       	and	r24, r24
    289e:	2c f4       	brge	.+10     	; 0x28aa <Usonic_trigger+0x74>
		__ticks = 1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	3f c0       	rjmp	.+126    	; 0x2928 <Usonic_trigger+0xf2>
	else if (__tmp > 65535)
    28aa:	6f 81       	ldd	r22, Y+7	; 0x07
    28ac:	78 85       	ldd	r23, Y+8	; 0x08
    28ae:	89 85       	ldd	r24, Y+9	; 0x09
    28b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 8b 18 	call	0x3116	; 0x3116 <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	4c f5       	brge	.+82     	; 0x2914 <Usonic_trigger+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e2       	ldi	r20, 0x20	; 32
    28d0:	51 e4       	ldi	r21, 0x41	; 65
    28d2:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	bc 01       	movw	r22, r24
    28dc:	cd 01       	movw	r24, r26
    28de:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <Usonic_trigger+0xd4>
    28ec:	80 e9       	ldi	r24, 0x90	; 144
    28ee:	91 e0       	ldi	r25, 0x01	; 1
    28f0:	9c 83       	std	Y+4, r25	; 0x04
    28f2:	8b 83       	std	Y+3, r24	; 0x03
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	9c 81       	ldd	r25, Y+4	; 0x04
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <Usonic_trigger+0xc2>
    28fc:	9c 83       	std	Y+4, r25	; 0x04
    28fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	8d 81       	ldd	r24, Y+5	; 0x05
    2902:	9e 81       	ldd	r25, Y+6	; 0x06
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	69 f7       	brne	.-38     	; 0x28ec <Usonic_trigger+0xb6>
    2912:	14 c0       	rjmp	.+40     	; 0x293c <Usonic_trigger+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2914:	6f 81       	ldd	r22, Y+7	; 0x07
    2916:	78 85       	ldd	r23, Y+8	; 0x08
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <Usonic_trigger+0xfe>
    2938:	9a 83       	std	Y+2, r25	; 0x02
    293a:	89 83       	std	Y+1, r24	; 0x01
    293c:	a2 e3       	ldi	r26, 0x32	; 50
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	e2 e3       	ldi	r30, 0x32	; 50
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	8d 7f       	andi	r24, 0xFD	; 253
    2948:	8c 93       	st	X, r24
    294a:	2e 96       	adiw	r28, 0x0e	; 14
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	08 95       	ret

0000295c <__vector_1>:
    295c:	1f 92       	push	r1
    295e:	0f 92       	push	r0
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	0f 92       	push	r0
    2964:	11 24       	eor	r1, r1
    2966:	2f 93       	push	r18
    2968:	3f 93       	push	r19
    296a:	5f 93       	push	r21
    296c:	6f 93       	push	r22
    296e:	7f 93       	push	r23
    2970:	8f 93       	push	r24
    2972:	9f 93       	push	r25
    2974:	af 93       	push	r26
    2976:	bf 93       	push	r27
    2978:	ef 93       	push	r30
    297a:	ff 93       	push	r31
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
    2984:	80 91 23 02 	lds	r24, 0x0223
    2988:	90 91 24 02 	lds	r25, 0x0224
    298c:	81 30       	cpi	r24, 0x01	; 1
    298e:	91 05       	cpc	r25, r1
    2990:	99 f4       	brne	.+38     	; 0x29b8 <__vector_1+0x5c>
    2992:	ee e4       	ldi	r30, 0x4E	; 78
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	10 82       	st	Z, r1
    2998:	ec e4       	ldi	r30, 0x4C	; 76
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	91 81       	ldd	r25, Z+1	; 0x01
    29a0:	90 93 20 02 	sts	0x0220, r25
    29a4:	80 93 1f 02 	sts	0x021F, r24
    29a8:	ec e4       	ldi	r30, 0x4C	; 76
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	11 82       	std	Z+1, r1	; 0x01
    29ae:	10 82       	st	Z, r1
    29b0:	10 92 24 02 	sts	0x0224, r1
    29b4:	10 92 23 02 	sts	0x0223, r1
    29b8:	80 91 23 02 	lds	r24, 0x0223
    29bc:	90 91 24 02 	lds	r25, 0x0224
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	69 f4       	brne	.+26     	; 0x29de <__vector_1+0x82>
    29c4:	ae e4       	ldi	r26, 0x4E	; 78
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	ee e4       	ldi	r30, 0x4E	; 78
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	81 60       	ori	r24, 0x01	; 1
    29d0:	8c 93       	st	X, r24
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	90 93 24 02 	sts	0x0224, r25
    29da:	80 93 23 02 	sts	0x0223, r24
    29de:	80 91 1f 02 	lds	r24, 0x021F
    29e2:	90 91 20 02 	lds	r25, 0x0220
    29e6:	2a e3       	ldi	r18, 0x3A	; 58
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	b9 01       	movw	r22, r18
    29ec:	0e 94 3b 1c 	call	0x3876	; 0x3876 <__divmodhi4>
    29f0:	cb 01       	movw	r24, r22
    29f2:	90 93 22 02 	sts	0x0222, r25
    29f6:	80 93 21 02 	sts	0x0221, r24
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	ff 91       	pop	r31
    2a00:	ef 91       	pop	r30
    2a02:	bf 91       	pop	r27
    2a04:	af 91       	pop	r26
    2a06:	9f 91       	pop	r25
    2a08:	8f 91       	pop	r24
    2a0a:	7f 91       	pop	r23
    2a0c:	6f 91       	pop	r22
    2a0e:	5f 91       	pop	r21
    2a10:	3f 91       	pop	r19
    2a12:	2f 91       	pop	r18
    2a14:	0f 90       	pop	r0
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	0f 90       	pop	r0
    2a1a:	1f 90       	pop	r1
    2a1c:	18 95       	reti

00002a1e <__fixunssfsi>:
    2a1e:	ef 92       	push	r14
    2a20:	ff 92       	push	r15
    2a22:	0f 93       	push	r16
    2a24:	1f 93       	push	r17
    2a26:	7b 01       	movw	r14, r22
    2a28:	8c 01       	movw	r16, r24
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	5f e4       	ldi	r21, 0x4F	; 79
    2a32:	0e 94 bb 18 	call	0x3176	; 0x3176 <__gesf2>
    2a36:	88 23       	and	r24, r24
    2a38:	8c f0       	brlt	.+34     	; 0x2a5c <__fixunssfsi+0x3e>
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	b7 01       	movw	r22, r14
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e0       	ldi	r20, 0x00	; 0
    2a44:	5f e4       	ldi	r21, 0x4F	; 79
    2a46:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__subsf3>
    2a4a:	0e 94 79 19 	call	0x32f2	; 0x32f2 <__fixsfsi>
    2a4e:	9b 01       	movw	r18, r22
    2a50:	ac 01       	movw	r20, r24
    2a52:	20 50       	subi	r18, 0x00	; 0
    2a54:	30 40       	sbci	r19, 0x00	; 0
    2a56:	40 40       	sbci	r20, 0x00	; 0
    2a58:	50 48       	sbci	r21, 0x80	; 128
    2a5a:	06 c0       	rjmp	.+12     	; 0x2a68 <__fixunssfsi+0x4a>
    2a5c:	c8 01       	movw	r24, r16
    2a5e:	b7 01       	movw	r22, r14
    2a60:	0e 94 79 19 	call	0x32f2	; 0x32f2 <__fixsfsi>
    2a64:	9b 01       	movw	r18, r22
    2a66:	ac 01       	movw	r20, r24
    2a68:	b9 01       	movw	r22, r18
    2a6a:	ca 01       	movw	r24, r20
    2a6c:	1f 91       	pop	r17
    2a6e:	0f 91       	pop	r16
    2a70:	ff 90       	pop	r15
    2a72:	ef 90       	pop	r14
    2a74:	08 95       	ret

00002a76 <_fpadd_parts>:
    2a76:	a0 e0       	ldi	r26, 0x00	; 0
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	e1 e4       	ldi	r30, 0x41	; 65
    2a7c:	f5 e1       	ldi	r31, 0x15	; 21
    2a7e:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__prologue_saves__>
    2a82:	dc 01       	movw	r26, r24
    2a84:	2b 01       	movw	r4, r22
    2a86:	fa 01       	movw	r30, r20
    2a88:	9c 91       	ld	r25, X
    2a8a:	92 30       	cpi	r25, 0x02	; 2
    2a8c:	08 f4       	brcc	.+2      	; 0x2a90 <_fpadd_parts+0x1a>
    2a8e:	39 c1       	rjmp	.+626    	; 0x2d02 <_fpadd_parts+0x28c>
    2a90:	eb 01       	movw	r28, r22
    2a92:	88 81       	ld	r24, Y
    2a94:	82 30       	cpi	r24, 0x02	; 2
    2a96:	08 f4       	brcc	.+2      	; 0x2a9a <_fpadd_parts+0x24>
    2a98:	33 c1       	rjmp	.+614    	; 0x2d00 <_fpadd_parts+0x28a>
    2a9a:	94 30       	cpi	r25, 0x04	; 4
    2a9c:	69 f4       	brne	.+26     	; 0x2ab8 <_fpadd_parts+0x42>
    2a9e:	84 30       	cpi	r24, 0x04	; 4
    2aa0:	09 f0       	breq	.+2      	; 0x2aa4 <_fpadd_parts+0x2e>
    2aa2:	2f c1       	rjmp	.+606    	; 0x2d02 <_fpadd_parts+0x28c>
    2aa4:	11 96       	adiw	r26, 0x01	; 1
    2aa6:	9c 91       	ld	r25, X
    2aa8:	11 97       	sbiw	r26, 0x01	; 1
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	98 17       	cp	r25, r24
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <_fpadd_parts+0x3c>
    2ab0:	28 c1       	rjmp	.+592    	; 0x2d02 <_fpadd_parts+0x28c>
    2ab2:	a8 e0       	ldi	r26, 0x08	; 8
    2ab4:	b1 e0       	ldi	r27, 0x01	; 1
    2ab6:	25 c1       	rjmp	.+586    	; 0x2d02 <_fpadd_parts+0x28c>
    2ab8:	84 30       	cpi	r24, 0x04	; 4
    2aba:	09 f4       	brne	.+2      	; 0x2abe <_fpadd_parts+0x48>
    2abc:	21 c1       	rjmp	.+578    	; 0x2d00 <_fpadd_parts+0x28a>
    2abe:	82 30       	cpi	r24, 0x02	; 2
    2ac0:	a9 f4       	brne	.+42     	; 0x2aec <_fpadd_parts+0x76>
    2ac2:	92 30       	cpi	r25, 0x02	; 2
    2ac4:	09 f0       	breq	.+2      	; 0x2ac8 <_fpadd_parts+0x52>
    2ac6:	1d c1       	rjmp	.+570    	; 0x2d02 <_fpadd_parts+0x28c>
    2ac8:	9a 01       	movw	r18, r20
    2aca:	ad 01       	movw	r20, r26
    2acc:	88 e0       	ldi	r24, 0x08	; 8
    2ace:	ea 01       	movw	r28, r20
    2ad0:	09 90       	ld	r0, Y+
    2ad2:	ae 01       	movw	r20, r28
    2ad4:	e9 01       	movw	r28, r18
    2ad6:	09 92       	st	Y+, r0
    2ad8:	9e 01       	movw	r18, r28
    2ada:	81 50       	subi	r24, 0x01	; 1
    2adc:	c1 f7       	brne	.-16     	; 0x2ace <_fpadd_parts+0x58>
    2ade:	e2 01       	movw	r28, r4
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	11 96       	adiw	r26, 0x01	; 1
    2ae4:	9c 91       	ld	r25, X
    2ae6:	89 23       	and	r24, r25
    2ae8:	81 83       	std	Z+1, r24	; 0x01
    2aea:	08 c1       	rjmp	.+528    	; 0x2cfc <_fpadd_parts+0x286>
    2aec:	92 30       	cpi	r25, 0x02	; 2
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <_fpadd_parts+0x7c>
    2af0:	07 c1       	rjmp	.+526    	; 0x2d00 <_fpadd_parts+0x28a>
    2af2:	12 96       	adiw	r26, 0x02	; 2
    2af4:	2d 90       	ld	r2, X+
    2af6:	3c 90       	ld	r3, X
    2af8:	13 97       	sbiw	r26, 0x03	; 3
    2afa:	eb 01       	movw	r28, r22
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	9b 81       	ldd	r25, Y+3	; 0x03
    2b00:	14 96       	adiw	r26, 0x04	; 4
    2b02:	ad 90       	ld	r10, X+
    2b04:	bd 90       	ld	r11, X+
    2b06:	cd 90       	ld	r12, X+
    2b08:	dc 90       	ld	r13, X
    2b0a:	17 97       	sbiw	r26, 0x07	; 7
    2b0c:	ec 80       	ldd	r14, Y+4	; 0x04
    2b0e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b10:	0e 81       	ldd	r16, Y+6	; 0x06
    2b12:	1f 81       	ldd	r17, Y+7	; 0x07
    2b14:	91 01       	movw	r18, r2
    2b16:	28 1b       	sub	r18, r24
    2b18:	39 0b       	sbc	r19, r25
    2b1a:	b9 01       	movw	r22, r18
    2b1c:	37 ff       	sbrs	r19, 7
    2b1e:	04 c0       	rjmp	.+8      	; 0x2b28 <_fpadd_parts+0xb2>
    2b20:	66 27       	eor	r22, r22
    2b22:	77 27       	eor	r23, r23
    2b24:	62 1b       	sub	r22, r18
    2b26:	73 0b       	sbc	r23, r19
    2b28:	60 32       	cpi	r22, 0x20	; 32
    2b2a:	71 05       	cpc	r23, r1
    2b2c:	0c f0       	brlt	.+2      	; 0x2b30 <_fpadd_parts+0xba>
    2b2e:	61 c0       	rjmp	.+194    	; 0x2bf2 <_fpadd_parts+0x17c>
    2b30:	12 16       	cp	r1, r18
    2b32:	13 06       	cpc	r1, r19
    2b34:	6c f5       	brge	.+90     	; 0x2b90 <_fpadd_parts+0x11a>
    2b36:	37 01       	movw	r6, r14
    2b38:	48 01       	movw	r8, r16
    2b3a:	06 2e       	mov	r0, r22
    2b3c:	04 c0       	rjmp	.+8      	; 0x2b46 <_fpadd_parts+0xd0>
    2b3e:	96 94       	lsr	r9
    2b40:	87 94       	ror	r8
    2b42:	77 94       	ror	r7
    2b44:	67 94       	ror	r6
    2b46:	0a 94       	dec	r0
    2b48:	d2 f7       	brpl	.-12     	; 0x2b3e <_fpadd_parts+0xc8>
    2b4a:	21 e0       	ldi	r18, 0x01	; 1
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e0       	ldi	r20, 0x00	; 0
    2b50:	50 e0       	ldi	r21, 0x00	; 0
    2b52:	04 c0       	rjmp	.+8      	; 0x2b5c <_fpadd_parts+0xe6>
    2b54:	22 0f       	add	r18, r18
    2b56:	33 1f       	adc	r19, r19
    2b58:	44 1f       	adc	r20, r20
    2b5a:	55 1f       	adc	r21, r21
    2b5c:	6a 95       	dec	r22
    2b5e:	d2 f7       	brpl	.-12     	; 0x2b54 <_fpadd_parts+0xde>
    2b60:	21 50       	subi	r18, 0x01	; 1
    2b62:	30 40       	sbci	r19, 0x00	; 0
    2b64:	40 40       	sbci	r20, 0x00	; 0
    2b66:	50 40       	sbci	r21, 0x00	; 0
    2b68:	2e 21       	and	r18, r14
    2b6a:	3f 21       	and	r19, r15
    2b6c:	40 23       	and	r20, r16
    2b6e:	51 23       	and	r21, r17
    2b70:	21 15       	cp	r18, r1
    2b72:	31 05       	cpc	r19, r1
    2b74:	41 05       	cpc	r20, r1
    2b76:	51 05       	cpc	r21, r1
    2b78:	21 f0       	breq	.+8      	; 0x2b82 <_fpadd_parts+0x10c>
    2b7a:	21 e0       	ldi	r18, 0x01	; 1
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	79 01       	movw	r14, r18
    2b84:	8a 01       	movw	r16, r20
    2b86:	e6 28       	or	r14, r6
    2b88:	f7 28       	or	r15, r7
    2b8a:	08 29       	or	r16, r8
    2b8c:	19 29       	or	r17, r9
    2b8e:	3c c0       	rjmp	.+120    	; 0x2c08 <_fpadd_parts+0x192>
    2b90:	23 2b       	or	r18, r19
    2b92:	d1 f1       	breq	.+116    	; 0x2c08 <_fpadd_parts+0x192>
    2b94:	26 0e       	add	r2, r22
    2b96:	37 1e       	adc	r3, r23
    2b98:	35 01       	movw	r6, r10
    2b9a:	46 01       	movw	r8, r12
    2b9c:	06 2e       	mov	r0, r22
    2b9e:	04 c0       	rjmp	.+8      	; 0x2ba8 <_fpadd_parts+0x132>
    2ba0:	96 94       	lsr	r9
    2ba2:	87 94       	ror	r8
    2ba4:	77 94       	ror	r7
    2ba6:	67 94       	ror	r6
    2ba8:	0a 94       	dec	r0
    2baa:	d2 f7       	brpl	.-12     	; 0x2ba0 <_fpadd_parts+0x12a>
    2bac:	21 e0       	ldi	r18, 0x01	; 1
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e0       	ldi	r20, 0x00	; 0
    2bb2:	50 e0       	ldi	r21, 0x00	; 0
    2bb4:	04 c0       	rjmp	.+8      	; 0x2bbe <_fpadd_parts+0x148>
    2bb6:	22 0f       	add	r18, r18
    2bb8:	33 1f       	adc	r19, r19
    2bba:	44 1f       	adc	r20, r20
    2bbc:	55 1f       	adc	r21, r21
    2bbe:	6a 95       	dec	r22
    2bc0:	d2 f7       	brpl	.-12     	; 0x2bb6 <_fpadd_parts+0x140>
    2bc2:	21 50       	subi	r18, 0x01	; 1
    2bc4:	30 40       	sbci	r19, 0x00	; 0
    2bc6:	40 40       	sbci	r20, 0x00	; 0
    2bc8:	50 40       	sbci	r21, 0x00	; 0
    2bca:	2a 21       	and	r18, r10
    2bcc:	3b 21       	and	r19, r11
    2bce:	4c 21       	and	r20, r12
    2bd0:	5d 21       	and	r21, r13
    2bd2:	21 15       	cp	r18, r1
    2bd4:	31 05       	cpc	r19, r1
    2bd6:	41 05       	cpc	r20, r1
    2bd8:	51 05       	cpc	r21, r1
    2bda:	21 f0       	breq	.+8      	; 0x2be4 <_fpadd_parts+0x16e>
    2bdc:	21 e0       	ldi	r18, 0x01	; 1
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	50 e0       	ldi	r21, 0x00	; 0
    2be4:	59 01       	movw	r10, r18
    2be6:	6a 01       	movw	r12, r20
    2be8:	a6 28       	or	r10, r6
    2bea:	b7 28       	or	r11, r7
    2bec:	c8 28       	or	r12, r8
    2bee:	d9 28       	or	r13, r9
    2bf0:	0b c0       	rjmp	.+22     	; 0x2c08 <_fpadd_parts+0x192>
    2bf2:	82 15       	cp	r24, r2
    2bf4:	93 05       	cpc	r25, r3
    2bf6:	2c f0       	brlt	.+10     	; 0x2c02 <_fpadd_parts+0x18c>
    2bf8:	1c 01       	movw	r2, r24
    2bfa:	aa 24       	eor	r10, r10
    2bfc:	bb 24       	eor	r11, r11
    2bfe:	65 01       	movw	r12, r10
    2c00:	03 c0       	rjmp	.+6      	; 0x2c08 <_fpadd_parts+0x192>
    2c02:	ee 24       	eor	r14, r14
    2c04:	ff 24       	eor	r15, r15
    2c06:	87 01       	movw	r16, r14
    2c08:	11 96       	adiw	r26, 0x01	; 1
    2c0a:	9c 91       	ld	r25, X
    2c0c:	d2 01       	movw	r26, r4
    2c0e:	11 96       	adiw	r26, 0x01	; 1
    2c10:	8c 91       	ld	r24, X
    2c12:	98 17       	cp	r25, r24
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <_fpadd_parts+0x1a2>
    2c16:	45 c0       	rjmp	.+138    	; 0x2ca2 <_fpadd_parts+0x22c>
    2c18:	99 23       	and	r25, r25
    2c1a:	39 f0       	breq	.+14     	; 0x2c2a <_fpadd_parts+0x1b4>
    2c1c:	a8 01       	movw	r20, r16
    2c1e:	97 01       	movw	r18, r14
    2c20:	2a 19       	sub	r18, r10
    2c22:	3b 09       	sbc	r19, r11
    2c24:	4c 09       	sbc	r20, r12
    2c26:	5d 09       	sbc	r21, r13
    2c28:	06 c0       	rjmp	.+12     	; 0x2c36 <_fpadd_parts+0x1c0>
    2c2a:	a6 01       	movw	r20, r12
    2c2c:	95 01       	movw	r18, r10
    2c2e:	2e 19       	sub	r18, r14
    2c30:	3f 09       	sbc	r19, r15
    2c32:	40 0b       	sbc	r20, r16
    2c34:	51 0b       	sbc	r21, r17
    2c36:	57 fd       	sbrc	r21, 7
    2c38:	08 c0       	rjmp	.+16     	; 0x2c4a <_fpadd_parts+0x1d4>
    2c3a:	11 82       	std	Z+1, r1	; 0x01
    2c3c:	33 82       	std	Z+3, r3	; 0x03
    2c3e:	22 82       	std	Z+2, r2	; 0x02
    2c40:	24 83       	std	Z+4, r18	; 0x04
    2c42:	35 83       	std	Z+5, r19	; 0x05
    2c44:	46 83       	std	Z+6, r20	; 0x06
    2c46:	57 83       	std	Z+7, r21	; 0x07
    2c48:	1d c0       	rjmp	.+58     	; 0x2c84 <_fpadd_parts+0x20e>
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	81 83       	std	Z+1, r24	; 0x01
    2c4e:	33 82       	std	Z+3, r3	; 0x03
    2c50:	22 82       	std	Z+2, r2	; 0x02
    2c52:	88 27       	eor	r24, r24
    2c54:	99 27       	eor	r25, r25
    2c56:	dc 01       	movw	r26, r24
    2c58:	82 1b       	sub	r24, r18
    2c5a:	93 0b       	sbc	r25, r19
    2c5c:	a4 0b       	sbc	r26, r20
    2c5e:	b5 0b       	sbc	r27, r21
    2c60:	84 83       	std	Z+4, r24	; 0x04
    2c62:	95 83       	std	Z+5, r25	; 0x05
    2c64:	a6 83       	std	Z+6, r26	; 0x06
    2c66:	b7 83       	std	Z+7, r27	; 0x07
    2c68:	0d c0       	rjmp	.+26     	; 0x2c84 <_fpadd_parts+0x20e>
    2c6a:	22 0f       	add	r18, r18
    2c6c:	33 1f       	adc	r19, r19
    2c6e:	44 1f       	adc	r20, r20
    2c70:	55 1f       	adc	r21, r21
    2c72:	24 83       	std	Z+4, r18	; 0x04
    2c74:	35 83       	std	Z+5, r19	; 0x05
    2c76:	46 83       	std	Z+6, r20	; 0x06
    2c78:	57 83       	std	Z+7, r21	; 0x07
    2c7a:	82 81       	ldd	r24, Z+2	; 0x02
    2c7c:	93 81       	ldd	r25, Z+3	; 0x03
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	93 83       	std	Z+3, r25	; 0x03
    2c82:	82 83       	std	Z+2, r24	; 0x02
    2c84:	24 81       	ldd	r18, Z+4	; 0x04
    2c86:	35 81       	ldd	r19, Z+5	; 0x05
    2c88:	46 81       	ldd	r20, Z+6	; 0x06
    2c8a:	57 81       	ldd	r21, Z+7	; 0x07
    2c8c:	da 01       	movw	r26, r20
    2c8e:	c9 01       	movw	r24, r18
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	a1 09       	sbc	r26, r1
    2c94:	b1 09       	sbc	r27, r1
    2c96:	8f 5f       	subi	r24, 0xFF	; 255
    2c98:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9a:	af 4f       	sbci	r26, 0xFF	; 255
    2c9c:	bf 43       	sbci	r27, 0x3F	; 63
    2c9e:	28 f3       	brcs	.-54     	; 0x2c6a <_fpadd_parts+0x1f4>
    2ca0:	0b c0       	rjmp	.+22     	; 0x2cb8 <_fpadd_parts+0x242>
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	33 82       	std	Z+3, r3	; 0x03
    2ca6:	22 82       	std	Z+2, r2	; 0x02
    2ca8:	ea 0c       	add	r14, r10
    2caa:	fb 1c       	adc	r15, r11
    2cac:	0c 1d       	adc	r16, r12
    2cae:	1d 1d       	adc	r17, r13
    2cb0:	e4 82       	std	Z+4, r14	; 0x04
    2cb2:	f5 82       	std	Z+5, r15	; 0x05
    2cb4:	06 83       	std	Z+6, r16	; 0x06
    2cb6:	17 83       	std	Z+7, r17	; 0x07
    2cb8:	83 e0       	ldi	r24, 0x03	; 3
    2cba:	80 83       	st	Z, r24
    2cbc:	24 81       	ldd	r18, Z+4	; 0x04
    2cbe:	35 81       	ldd	r19, Z+5	; 0x05
    2cc0:	46 81       	ldd	r20, Z+6	; 0x06
    2cc2:	57 81       	ldd	r21, Z+7	; 0x07
    2cc4:	57 ff       	sbrs	r21, 7
    2cc6:	1a c0       	rjmp	.+52     	; 0x2cfc <_fpadd_parts+0x286>
    2cc8:	c9 01       	movw	r24, r18
    2cca:	aa 27       	eor	r26, r26
    2ccc:	97 fd       	sbrc	r25, 7
    2cce:	a0 95       	com	r26
    2cd0:	ba 2f       	mov	r27, r26
    2cd2:	81 70       	andi	r24, 0x01	; 1
    2cd4:	90 70       	andi	r25, 0x00	; 0
    2cd6:	a0 70       	andi	r26, 0x00	; 0
    2cd8:	b0 70       	andi	r27, 0x00	; 0
    2cda:	56 95       	lsr	r21
    2cdc:	47 95       	ror	r20
    2cde:	37 95       	ror	r19
    2ce0:	27 95       	ror	r18
    2ce2:	82 2b       	or	r24, r18
    2ce4:	93 2b       	or	r25, r19
    2ce6:	a4 2b       	or	r26, r20
    2ce8:	b5 2b       	or	r27, r21
    2cea:	84 83       	std	Z+4, r24	; 0x04
    2cec:	95 83       	std	Z+5, r25	; 0x05
    2cee:	a6 83       	std	Z+6, r26	; 0x06
    2cf0:	b7 83       	std	Z+7, r27	; 0x07
    2cf2:	82 81       	ldd	r24, Z+2	; 0x02
    2cf4:	93 81       	ldd	r25, Z+3	; 0x03
    2cf6:	01 96       	adiw	r24, 0x01	; 1
    2cf8:	93 83       	std	Z+3, r25	; 0x03
    2cfa:	82 83       	std	Z+2, r24	; 0x02
    2cfc:	df 01       	movw	r26, r30
    2cfe:	01 c0       	rjmp	.+2      	; 0x2d02 <_fpadd_parts+0x28c>
    2d00:	d2 01       	movw	r26, r4
    2d02:	cd 01       	movw	r24, r26
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	e2 e1       	ldi	r30, 0x12	; 18
    2d0a:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <__epilogue_restores__>

00002d0e <__subsf3>:
    2d0e:	a0 e2       	ldi	r26, 0x20	; 32
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	ed e8       	ldi	r30, 0x8D	; 141
    2d14:	f6 e1       	ldi	r31, 0x16	; 22
    2d16:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__prologue_saves__+0x18>
    2d1a:	69 83       	std	Y+1, r22	; 0x01
    2d1c:	7a 83       	std	Y+2, r23	; 0x02
    2d1e:	8b 83       	std	Y+3, r24	; 0x03
    2d20:	9c 83       	std	Y+4, r25	; 0x04
    2d22:	2d 83       	std	Y+5, r18	; 0x05
    2d24:	3e 83       	std	Y+6, r19	; 0x06
    2d26:	4f 83       	std	Y+7, r20	; 0x07
    2d28:	58 87       	std	Y+8, r21	; 0x08
    2d2a:	e9 e0       	ldi	r30, 0x09	; 9
    2d2c:	ee 2e       	mov	r14, r30
    2d2e:	f1 2c       	mov	r15, r1
    2d30:	ec 0e       	add	r14, r28
    2d32:	fd 1e       	adc	r15, r29
    2d34:	ce 01       	movw	r24, r28
    2d36:	01 96       	adiw	r24, 0x01	; 1
    2d38:	b7 01       	movw	r22, r14
    2d3a:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    2d3e:	8e 01       	movw	r16, r28
    2d40:	0f 5e       	subi	r16, 0xEF	; 239
    2d42:	1f 4f       	sbci	r17, 0xFF	; 255
    2d44:	ce 01       	movw	r24, r28
    2d46:	05 96       	adiw	r24, 0x05	; 5
    2d48:	b8 01       	movw	r22, r16
    2d4a:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    2d4e:	8a 89       	ldd	r24, Y+18	; 0x12
    2d50:	91 e0       	ldi	r25, 0x01	; 1
    2d52:	89 27       	eor	r24, r25
    2d54:	8a 8b       	std	Y+18, r24	; 0x12
    2d56:	c7 01       	movw	r24, r14
    2d58:	b8 01       	movw	r22, r16
    2d5a:	ae 01       	movw	r20, r28
    2d5c:	47 5e       	subi	r20, 0xE7	; 231
    2d5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d60:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_fpadd_parts>
    2d64:	0e 94 95 1a 	call	0x352a	; 0x352a <__pack_f>
    2d68:	a0 96       	adiw	r28, 0x20	; 32
    2d6a:	e6 e0       	ldi	r30, 0x06	; 6
    2d6c:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <__epilogue_restores__+0x18>

00002d70 <__addsf3>:
    2d70:	a0 e2       	ldi	r26, 0x20	; 32
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	ee eb       	ldi	r30, 0xBE	; 190
    2d76:	f6 e1       	ldi	r31, 0x16	; 22
    2d78:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__prologue_saves__+0x18>
    2d7c:	69 83       	std	Y+1, r22	; 0x01
    2d7e:	7a 83       	std	Y+2, r23	; 0x02
    2d80:	8b 83       	std	Y+3, r24	; 0x03
    2d82:	9c 83       	std	Y+4, r25	; 0x04
    2d84:	2d 83       	std	Y+5, r18	; 0x05
    2d86:	3e 83       	std	Y+6, r19	; 0x06
    2d88:	4f 83       	std	Y+7, r20	; 0x07
    2d8a:	58 87       	std	Y+8, r21	; 0x08
    2d8c:	f9 e0       	ldi	r31, 0x09	; 9
    2d8e:	ef 2e       	mov	r14, r31
    2d90:	f1 2c       	mov	r15, r1
    2d92:	ec 0e       	add	r14, r28
    2d94:	fd 1e       	adc	r15, r29
    2d96:	ce 01       	movw	r24, r28
    2d98:	01 96       	adiw	r24, 0x01	; 1
    2d9a:	b7 01       	movw	r22, r14
    2d9c:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    2da0:	8e 01       	movw	r16, r28
    2da2:	0f 5e       	subi	r16, 0xEF	; 239
    2da4:	1f 4f       	sbci	r17, 0xFF	; 255
    2da6:	ce 01       	movw	r24, r28
    2da8:	05 96       	adiw	r24, 0x05	; 5
    2daa:	b8 01       	movw	r22, r16
    2dac:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    2db0:	c7 01       	movw	r24, r14
    2db2:	b8 01       	movw	r22, r16
    2db4:	ae 01       	movw	r20, r28
    2db6:	47 5e       	subi	r20, 0xE7	; 231
    2db8:	5f 4f       	sbci	r21, 0xFF	; 255
    2dba:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_fpadd_parts>
    2dbe:	0e 94 95 1a 	call	0x352a	; 0x352a <__pack_f>
    2dc2:	a0 96       	adiw	r28, 0x20	; 32
    2dc4:	e6 e0       	ldi	r30, 0x06	; 6
    2dc6:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <__epilogue_restores__+0x18>

00002dca <__mulsf3>:
    2dca:	a0 e2       	ldi	r26, 0x20	; 32
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	eb ee       	ldi	r30, 0xEB	; 235
    2dd0:	f6 e1       	ldi	r31, 0x16	; 22
    2dd2:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__prologue_saves__>
    2dd6:	69 83       	std	Y+1, r22	; 0x01
    2dd8:	7a 83       	std	Y+2, r23	; 0x02
    2dda:	8b 83       	std	Y+3, r24	; 0x03
    2ddc:	9c 83       	std	Y+4, r25	; 0x04
    2dde:	2d 83       	std	Y+5, r18	; 0x05
    2de0:	3e 83       	std	Y+6, r19	; 0x06
    2de2:	4f 83       	std	Y+7, r20	; 0x07
    2de4:	58 87       	std	Y+8, r21	; 0x08
    2de6:	ce 01       	movw	r24, r28
    2de8:	01 96       	adiw	r24, 0x01	; 1
    2dea:	be 01       	movw	r22, r28
    2dec:	67 5f       	subi	r22, 0xF7	; 247
    2dee:	7f 4f       	sbci	r23, 0xFF	; 255
    2df0:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    2df4:	ce 01       	movw	r24, r28
    2df6:	05 96       	adiw	r24, 0x05	; 5
    2df8:	be 01       	movw	r22, r28
    2dfa:	6f 5e       	subi	r22, 0xEF	; 239
    2dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfe:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    2e02:	99 85       	ldd	r25, Y+9	; 0x09
    2e04:	92 30       	cpi	r25, 0x02	; 2
    2e06:	88 f0       	brcs	.+34     	; 0x2e2a <__mulsf3+0x60>
    2e08:	89 89       	ldd	r24, Y+17	; 0x11
    2e0a:	82 30       	cpi	r24, 0x02	; 2
    2e0c:	c8 f0       	brcs	.+50     	; 0x2e40 <__mulsf3+0x76>
    2e0e:	94 30       	cpi	r25, 0x04	; 4
    2e10:	19 f4       	brne	.+6      	; 0x2e18 <__mulsf3+0x4e>
    2e12:	82 30       	cpi	r24, 0x02	; 2
    2e14:	51 f4       	brne	.+20     	; 0x2e2a <__mulsf3+0x60>
    2e16:	04 c0       	rjmp	.+8      	; 0x2e20 <__mulsf3+0x56>
    2e18:	84 30       	cpi	r24, 0x04	; 4
    2e1a:	29 f4       	brne	.+10     	; 0x2e26 <__mulsf3+0x5c>
    2e1c:	92 30       	cpi	r25, 0x02	; 2
    2e1e:	81 f4       	brne	.+32     	; 0x2e40 <__mulsf3+0x76>
    2e20:	88 e0       	ldi	r24, 0x08	; 8
    2e22:	91 e0       	ldi	r25, 0x01	; 1
    2e24:	c6 c0       	rjmp	.+396    	; 0x2fb2 <__mulsf3+0x1e8>
    2e26:	92 30       	cpi	r25, 0x02	; 2
    2e28:	49 f4       	brne	.+18     	; 0x2e3c <__mulsf3+0x72>
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2e:	8a 89       	ldd	r24, Y+18	; 0x12
    2e30:	98 13       	cpse	r25, r24
    2e32:	21 e0       	ldi	r18, 0x01	; 1
    2e34:	2a 87       	std	Y+10, r18	; 0x0a
    2e36:	ce 01       	movw	r24, r28
    2e38:	09 96       	adiw	r24, 0x09	; 9
    2e3a:	bb c0       	rjmp	.+374    	; 0x2fb2 <__mulsf3+0x1e8>
    2e3c:	82 30       	cpi	r24, 0x02	; 2
    2e3e:	49 f4       	brne	.+18     	; 0x2e52 <__mulsf3+0x88>
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e44:	8a 89       	ldd	r24, Y+18	; 0x12
    2e46:	98 13       	cpse	r25, r24
    2e48:	21 e0       	ldi	r18, 0x01	; 1
    2e4a:	2a 8b       	std	Y+18, r18	; 0x12
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	41 96       	adiw	r24, 0x11	; 17
    2e50:	b0 c0       	rjmp	.+352    	; 0x2fb2 <__mulsf3+0x1e8>
    2e52:	2d 84       	ldd	r2, Y+13	; 0x0d
    2e54:	3e 84       	ldd	r3, Y+14	; 0x0e
    2e56:	4f 84       	ldd	r4, Y+15	; 0x0f
    2e58:	58 88       	ldd	r5, Y+16	; 0x10
    2e5a:	6d 88       	ldd	r6, Y+21	; 0x15
    2e5c:	7e 88       	ldd	r7, Y+22	; 0x16
    2e5e:	8f 88       	ldd	r8, Y+23	; 0x17
    2e60:	98 8c       	ldd	r9, Y+24	; 0x18
    2e62:	ee 24       	eor	r14, r14
    2e64:	ff 24       	eor	r15, r15
    2e66:	87 01       	movw	r16, r14
    2e68:	aa 24       	eor	r10, r10
    2e6a:	bb 24       	eor	r11, r11
    2e6c:	65 01       	movw	r12, r10
    2e6e:	40 e0       	ldi	r20, 0x00	; 0
    2e70:	50 e0       	ldi	r21, 0x00	; 0
    2e72:	60 e0       	ldi	r22, 0x00	; 0
    2e74:	70 e0       	ldi	r23, 0x00	; 0
    2e76:	e0 e0       	ldi	r30, 0x00	; 0
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	c1 01       	movw	r24, r2
    2e7c:	81 70       	andi	r24, 0x01	; 1
    2e7e:	90 70       	andi	r25, 0x00	; 0
    2e80:	89 2b       	or	r24, r25
    2e82:	e9 f0       	breq	.+58     	; 0x2ebe <__mulsf3+0xf4>
    2e84:	e6 0c       	add	r14, r6
    2e86:	f7 1c       	adc	r15, r7
    2e88:	08 1d       	adc	r16, r8
    2e8a:	19 1d       	adc	r17, r9
    2e8c:	9a 01       	movw	r18, r20
    2e8e:	ab 01       	movw	r20, r22
    2e90:	2a 0d       	add	r18, r10
    2e92:	3b 1d       	adc	r19, r11
    2e94:	4c 1d       	adc	r20, r12
    2e96:	5d 1d       	adc	r21, r13
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	a0 e0       	ldi	r26, 0x00	; 0
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	e6 14       	cp	r14, r6
    2ea2:	f7 04       	cpc	r15, r7
    2ea4:	08 05       	cpc	r16, r8
    2ea6:	19 05       	cpc	r17, r9
    2ea8:	20 f4       	brcc	.+8      	; 0x2eb2 <__mulsf3+0xe8>
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	a0 e0       	ldi	r26, 0x00	; 0
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	ba 01       	movw	r22, r20
    2eb4:	a9 01       	movw	r20, r18
    2eb6:	48 0f       	add	r20, r24
    2eb8:	59 1f       	adc	r21, r25
    2eba:	6a 1f       	adc	r22, r26
    2ebc:	7b 1f       	adc	r23, r27
    2ebe:	aa 0c       	add	r10, r10
    2ec0:	bb 1c       	adc	r11, r11
    2ec2:	cc 1c       	adc	r12, r12
    2ec4:	dd 1c       	adc	r13, r13
    2ec6:	97 fe       	sbrs	r9, 7
    2ec8:	08 c0       	rjmp	.+16     	; 0x2eda <__mulsf3+0x110>
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	a0 e0       	ldi	r26, 0x00	; 0
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	a8 2a       	or	r10, r24
    2ed4:	b9 2a       	or	r11, r25
    2ed6:	ca 2a       	or	r12, r26
    2ed8:	db 2a       	or	r13, r27
    2eda:	31 96       	adiw	r30, 0x01	; 1
    2edc:	e0 32       	cpi	r30, 0x20	; 32
    2ede:	f1 05       	cpc	r31, r1
    2ee0:	49 f0       	breq	.+18     	; 0x2ef4 <__mulsf3+0x12a>
    2ee2:	66 0c       	add	r6, r6
    2ee4:	77 1c       	adc	r7, r7
    2ee6:	88 1c       	adc	r8, r8
    2ee8:	99 1c       	adc	r9, r9
    2eea:	56 94       	lsr	r5
    2eec:	47 94       	ror	r4
    2eee:	37 94       	ror	r3
    2ef0:	27 94       	ror	r2
    2ef2:	c3 cf       	rjmp	.-122    	; 0x2e7a <__mulsf3+0xb0>
    2ef4:	fa 85       	ldd	r31, Y+10	; 0x0a
    2ef6:	ea 89       	ldd	r30, Y+18	; 0x12
    2ef8:	2b 89       	ldd	r18, Y+19	; 0x13
    2efa:	3c 89       	ldd	r19, Y+20	; 0x14
    2efc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2efe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f00:	28 0f       	add	r18, r24
    2f02:	39 1f       	adc	r19, r25
    2f04:	2e 5f       	subi	r18, 0xFE	; 254
    2f06:	3f 4f       	sbci	r19, 0xFF	; 255
    2f08:	17 c0       	rjmp	.+46     	; 0x2f38 <__mulsf3+0x16e>
    2f0a:	ca 01       	movw	r24, r20
    2f0c:	81 70       	andi	r24, 0x01	; 1
    2f0e:	90 70       	andi	r25, 0x00	; 0
    2f10:	89 2b       	or	r24, r25
    2f12:	61 f0       	breq	.+24     	; 0x2f2c <__mulsf3+0x162>
    2f14:	16 95       	lsr	r17
    2f16:	07 95       	ror	r16
    2f18:	f7 94       	ror	r15
    2f1a:	e7 94       	ror	r14
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	a0 e0       	ldi	r26, 0x00	; 0
    2f22:	b0 e8       	ldi	r27, 0x80	; 128
    2f24:	e8 2a       	or	r14, r24
    2f26:	f9 2a       	or	r15, r25
    2f28:	0a 2b       	or	r16, r26
    2f2a:	1b 2b       	or	r17, r27
    2f2c:	76 95       	lsr	r23
    2f2e:	67 95       	ror	r22
    2f30:	57 95       	ror	r21
    2f32:	47 95       	ror	r20
    2f34:	2f 5f       	subi	r18, 0xFF	; 255
    2f36:	3f 4f       	sbci	r19, 0xFF	; 255
    2f38:	77 fd       	sbrc	r23, 7
    2f3a:	e7 cf       	rjmp	.-50     	; 0x2f0a <__mulsf3+0x140>
    2f3c:	0c c0       	rjmp	.+24     	; 0x2f56 <__mulsf3+0x18c>
    2f3e:	44 0f       	add	r20, r20
    2f40:	55 1f       	adc	r21, r21
    2f42:	66 1f       	adc	r22, r22
    2f44:	77 1f       	adc	r23, r23
    2f46:	17 fd       	sbrc	r17, 7
    2f48:	41 60       	ori	r20, 0x01	; 1
    2f4a:	ee 0c       	add	r14, r14
    2f4c:	ff 1c       	adc	r15, r15
    2f4e:	00 1f       	adc	r16, r16
    2f50:	11 1f       	adc	r17, r17
    2f52:	21 50       	subi	r18, 0x01	; 1
    2f54:	30 40       	sbci	r19, 0x00	; 0
    2f56:	40 30       	cpi	r20, 0x00	; 0
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	59 07       	cpc	r21, r25
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	69 07       	cpc	r22, r25
    2f60:	90 e4       	ldi	r25, 0x40	; 64
    2f62:	79 07       	cpc	r23, r25
    2f64:	60 f3       	brcs	.-40     	; 0x2f3e <__mulsf3+0x174>
    2f66:	2b 8f       	std	Y+27, r18	; 0x1b
    2f68:	3c 8f       	std	Y+28, r19	; 0x1c
    2f6a:	db 01       	movw	r26, r22
    2f6c:	ca 01       	movw	r24, r20
    2f6e:	8f 77       	andi	r24, 0x7F	; 127
    2f70:	90 70       	andi	r25, 0x00	; 0
    2f72:	a0 70       	andi	r26, 0x00	; 0
    2f74:	b0 70       	andi	r27, 0x00	; 0
    2f76:	80 34       	cpi	r24, 0x40	; 64
    2f78:	91 05       	cpc	r25, r1
    2f7a:	a1 05       	cpc	r26, r1
    2f7c:	b1 05       	cpc	r27, r1
    2f7e:	61 f4       	brne	.+24     	; 0x2f98 <__mulsf3+0x1ce>
    2f80:	47 fd       	sbrc	r20, 7
    2f82:	0a c0       	rjmp	.+20     	; 0x2f98 <__mulsf3+0x1ce>
    2f84:	e1 14       	cp	r14, r1
    2f86:	f1 04       	cpc	r15, r1
    2f88:	01 05       	cpc	r16, r1
    2f8a:	11 05       	cpc	r17, r1
    2f8c:	29 f0       	breq	.+10     	; 0x2f98 <__mulsf3+0x1ce>
    2f8e:	40 5c       	subi	r20, 0xC0	; 192
    2f90:	5f 4f       	sbci	r21, 0xFF	; 255
    2f92:	6f 4f       	sbci	r22, 0xFF	; 255
    2f94:	7f 4f       	sbci	r23, 0xFF	; 255
    2f96:	40 78       	andi	r20, 0x80	; 128
    2f98:	1a 8e       	std	Y+26, r1	; 0x1a
    2f9a:	fe 17       	cp	r31, r30
    2f9c:	11 f0       	breq	.+4      	; 0x2fa2 <__mulsf3+0x1d8>
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	8a 8f       	std	Y+26, r24	; 0x1a
    2fa2:	4d 8f       	std	Y+29, r20	; 0x1d
    2fa4:	5e 8f       	std	Y+30, r21	; 0x1e
    2fa6:	6f 8f       	std	Y+31, r22	; 0x1f
    2fa8:	78 a3       	std	Y+32, r23	; 0x20
    2faa:	83 e0       	ldi	r24, 0x03	; 3
    2fac:	89 8f       	std	Y+25, r24	; 0x19
    2fae:	ce 01       	movw	r24, r28
    2fb0:	49 96       	adiw	r24, 0x19	; 25
    2fb2:	0e 94 95 1a 	call	0x352a	; 0x352a <__pack_f>
    2fb6:	a0 96       	adiw	r28, 0x20	; 32
    2fb8:	e2 e1       	ldi	r30, 0x12	; 18
    2fba:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <__epilogue_restores__>

00002fbe <__divsf3>:
    2fbe:	a8 e1       	ldi	r26, 0x18	; 24
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	e5 ee       	ldi	r30, 0xE5	; 229
    2fc4:	f7 e1       	ldi	r31, 0x17	; 23
    2fc6:	0c 94 6a 1c 	jmp	0x38d4	; 0x38d4 <__prologue_saves__+0x10>
    2fca:	69 83       	std	Y+1, r22	; 0x01
    2fcc:	7a 83       	std	Y+2, r23	; 0x02
    2fce:	8b 83       	std	Y+3, r24	; 0x03
    2fd0:	9c 83       	std	Y+4, r25	; 0x04
    2fd2:	2d 83       	std	Y+5, r18	; 0x05
    2fd4:	3e 83       	std	Y+6, r19	; 0x06
    2fd6:	4f 83       	std	Y+7, r20	; 0x07
    2fd8:	58 87       	std	Y+8, r21	; 0x08
    2fda:	b9 e0       	ldi	r27, 0x09	; 9
    2fdc:	eb 2e       	mov	r14, r27
    2fde:	f1 2c       	mov	r15, r1
    2fe0:	ec 0e       	add	r14, r28
    2fe2:	fd 1e       	adc	r15, r29
    2fe4:	ce 01       	movw	r24, r28
    2fe6:	01 96       	adiw	r24, 0x01	; 1
    2fe8:	b7 01       	movw	r22, r14
    2fea:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    2fee:	8e 01       	movw	r16, r28
    2ff0:	0f 5e       	subi	r16, 0xEF	; 239
    2ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff4:	ce 01       	movw	r24, r28
    2ff6:	05 96       	adiw	r24, 0x05	; 5
    2ff8:	b8 01       	movw	r22, r16
    2ffa:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    2ffe:	29 85       	ldd	r18, Y+9	; 0x09
    3000:	22 30       	cpi	r18, 0x02	; 2
    3002:	08 f4       	brcc	.+2      	; 0x3006 <__divsf3+0x48>
    3004:	7e c0       	rjmp	.+252    	; 0x3102 <__divsf3+0x144>
    3006:	39 89       	ldd	r19, Y+17	; 0x11
    3008:	32 30       	cpi	r19, 0x02	; 2
    300a:	10 f4       	brcc	.+4      	; 0x3010 <__divsf3+0x52>
    300c:	b8 01       	movw	r22, r16
    300e:	7c c0       	rjmp	.+248    	; 0x3108 <__divsf3+0x14a>
    3010:	8a 85       	ldd	r24, Y+10	; 0x0a
    3012:	9a 89       	ldd	r25, Y+18	; 0x12
    3014:	89 27       	eor	r24, r25
    3016:	8a 87       	std	Y+10, r24	; 0x0a
    3018:	24 30       	cpi	r18, 0x04	; 4
    301a:	11 f0       	breq	.+4      	; 0x3020 <__divsf3+0x62>
    301c:	22 30       	cpi	r18, 0x02	; 2
    301e:	31 f4       	brne	.+12     	; 0x302c <__divsf3+0x6e>
    3020:	23 17       	cp	r18, r19
    3022:	09 f0       	breq	.+2      	; 0x3026 <__divsf3+0x68>
    3024:	6e c0       	rjmp	.+220    	; 0x3102 <__divsf3+0x144>
    3026:	68 e0       	ldi	r22, 0x08	; 8
    3028:	71 e0       	ldi	r23, 0x01	; 1
    302a:	6e c0       	rjmp	.+220    	; 0x3108 <__divsf3+0x14a>
    302c:	34 30       	cpi	r19, 0x04	; 4
    302e:	39 f4       	brne	.+14     	; 0x303e <__divsf3+0x80>
    3030:	1d 86       	std	Y+13, r1	; 0x0d
    3032:	1e 86       	std	Y+14, r1	; 0x0e
    3034:	1f 86       	std	Y+15, r1	; 0x0f
    3036:	18 8a       	std	Y+16, r1	; 0x10
    3038:	1c 86       	std	Y+12, r1	; 0x0c
    303a:	1b 86       	std	Y+11, r1	; 0x0b
    303c:	04 c0       	rjmp	.+8      	; 0x3046 <__divsf3+0x88>
    303e:	32 30       	cpi	r19, 0x02	; 2
    3040:	21 f4       	brne	.+8      	; 0x304a <__divsf3+0x8c>
    3042:	84 e0       	ldi	r24, 0x04	; 4
    3044:	89 87       	std	Y+9, r24	; 0x09
    3046:	b7 01       	movw	r22, r14
    3048:	5f c0       	rjmp	.+190    	; 0x3108 <__divsf3+0x14a>
    304a:	2b 85       	ldd	r18, Y+11	; 0x0b
    304c:	3c 85       	ldd	r19, Y+12	; 0x0c
    304e:	8b 89       	ldd	r24, Y+19	; 0x13
    3050:	9c 89       	ldd	r25, Y+20	; 0x14
    3052:	28 1b       	sub	r18, r24
    3054:	39 0b       	sbc	r19, r25
    3056:	3c 87       	std	Y+12, r19	; 0x0c
    3058:	2b 87       	std	Y+11, r18	; 0x0b
    305a:	ed 84       	ldd	r14, Y+13	; 0x0d
    305c:	fe 84       	ldd	r15, Y+14	; 0x0e
    305e:	0f 85       	ldd	r16, Y+15	; 0x0f
    3060:	18 89       	ldd	r17, Y+16	; 0x10
    3062:	ad 88       	ldd	r10, Y+21	; 0x15
    3064:	be 88       	ldd	r11, Y+22	; 0x16
    3066:	cf 88       	ldd	r12, Y+23	; 0x17
    3068:	d8 8c       	ldd	r13, Y+24	; 0x18
    306a:	ea 14       	cp	r14, r10
    306c:	fb 04       	cpc	r15, r11
    306e:	0c 05       	cpc	r16, r12
    3070:	1d 05       	cpc	r17, r13
    3072:	40 f4       	brcc	.+16     	; 0x3084 <__divsf3+0xc6>
    3074:	ee 0c       	add	r14, r14
    3076:	ff 1c       	adc	r15, r15
    3078:	00 1f       	adc	r16, r16
    307a:	11 1f       	adc	r17, r17
    307c:	21 50       	subi	r18, 0x01	; 1
    307e:	30 40       	sbci	r19, 0x00	; 0
    3080:	3c 87       	std	Y+12, r19	; 0x0c
    3082:	2b 87       	std	Y+11, r18	; 0x0b
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	50 e0       	ldi	r21, 0x00	; 0
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	a0 e0       	ldi	r26, 0x00	; 0
    3092:	b0 e4       	ldi	r27, 0x40	; 64
    3094:	60 e0       	ldi	r22, 0x00	; 0
    3096:	70 e0       	ldi	r23, 0x00	; 0
    3098:	ea 14       	cp	r14, r10
    309a:	fb 04       	cpc	r15, r11
    309c:	0c 05       	cpc	r16, r12
    309e:	1d 05       	cpc	r17, r13
    30a0:	40 f0       	brcs	.+16     	; 0x30b2 <__divsf3+0xf4>
    30a2:	28 2b       	or	r18, r24
    30a4:	39 2b       	or	r19, r25
    30a6:	4a 2b       	or	r20, r26
    30a8:	5b 2b       	or	r21, r27
    30aa:	ea 18       	sub	r14, r10
    30ac:	fb 08       	sbc	r15, r11
    30ae:	0c 09       	sbc	r16, r12
    30b0:	1d 09       	sbc	r17, r13
    30b2:	b6 95       	lsr	r27
    30b4:	a7 95       	ror	r26
    30b6:	97 95       	ror	r25
    30b8:	87 95       	ror	r24
    30ba:	ee 0c       	add	r14, r14
    30bc:	ff 1c       	adc	r15, r15
    30be:	00 1f       	adc	r16, r16
    30c0:	11 1f       	adc	r17, r17
    30c2:	6f 5f       	subi	r22, 0xFF	; 255
    30c4:	7f 4f       	sbci	r23, 0xFF	; 255
    30c6:	6f 31       	cpi	r22, 0x1F	; 31
    30c8:	71 05       	cpc	r23, r1
    30ca:	31 f7       	brne	.-52     	; 0x3098 <__divsf3+0xda>
    30cc:	da 01       	movw	r26, r20
    30ce:	c9 01       	movw	r24, r18
    30d0:	8f 77       	andi	r24, 0x7F	; 127
    30d2:	90 70       	andi	r25, 0x00	; 0
    30d4:	a0 70       	andi	r26, 0x00	; 0
    30d6:	b0 70       	andi	r27, 0x00	; 0
    30d8:	80 34       	cpi	r24, 0x40	; 64
    30da:	91 05       	cpc	r25, r1
    30dc:	a1 05       	cpc	r26, r1
    30de:	b1 05       	cpc	r27, r1
    30e0:	61 f4       	brne	.+24     	; 0x30fa <__divsf3+0x13c>
    30e2:	27 fd       	sbrc	r18, 7
    30e4:	0a c0       	rjmp	.+20     	; 0x30fa <__divsf3+0x13c>
    30e6:	e1 14       	cp	r14, r1
    30e8:	f1 04       	cpc	r15, r1
    30ea:	01 05       	cpc	r16, r1
    30ec:	11 05       	cpc	r17, r1
    30ee:	29 f0       	breq	.+10     	; 0x30fa <__divsf3+0x13c>
    30f0:	20 5c       	subi	r18, 0xC0	; 192
    30f2:	3f 4f       	sbci	r19, 0xFF	; 255
    30f4:	4f 4f       	sbci	r20, 0xFF	; 255
    30f6:	5f 4f       	sbci	r21, 0xFF	; 255
    30f8:	20 78       	andi	r18, 0x80	; 128
    30fa:	2d 87       	std	Y+13, r18	; 0x0d
    30fc:	3e 87       	std	Y+14, r19	; 0x0e
    30fe:	4f 87       	std	Y+15, r20	; 0x0f
    3100:	58 8b       	std	Y+16, r21	; 0x10
    3102:	be 01       	movw	r22, r28
    3104:	67 5f       	subi	r22, 0xF7	; 247
    3106:	7f 4f       	sbci	r23, 0xFF	; 255
    3108:	cb 01       	movw	r24, r22
    310a:	0e 94 95 1a 	call	0x352a	; 0x352a <__pack_f>
    310e:	68 96       	adiw	r28, 0x18	; 24
    3110:	ea e0       	ldi	r30, 0x0A	; 10
    3112:	0c 94 86 1c 	jmp	0x390c	; 0x390c <__epilogue_restores__+0x10>

00003116 <__gtsf2>:
    3116:	a8 e1       	ldi	r26, 0x18	; 24
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	e1 e9       	ldi	r30, 0x91	; 145
    311c:	f8 e1       	ldi	r31, 0x18	; 24
    311e:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__prologue_saves__+0x18>
    3122:	69 83       	std	Y+1, r22	; 0x01
    3124:	7a 83       	std	Y+2, r23	; 0x02
    3126:	8b 83       	std	Y+3, r24	; 0x03
    3128:	9c 83       	std	Y+4, r25	; 0x04
    312a:	2d 83       	std	Y+5, r18	; 0x05
    312c:	3e 83       	std	Y+6, r19	; 0x06
    312e:	4f 83       	std	Y+7, r20	; 0x07
    3130:	58 87       	std	Y+8, r21	; 0x08
    3132:	89 e0       	ldi	r24, 0x09	; 9
    3134:	e8 2e       	mov	r14, r24
    3136:	f1 2c       	mov	r15, r1
    3138:	ec 0e       	add	r14, r28
    313a:	fd 1e       	adc	r15, r29
    313c:	ce 01       	movw	r24, r28
    313e:	01 96       	adiw	r24, 0x01	; 1
    3140:	b7 01       	movw	r22, r14
    3142:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    3146:	8e 01       	movw	r16, r28
    3148:	0f 5e       	subi	r16, 0xEF	; 239
    314a:	1f 4f       	sbci	r17, 0xFF	; 255
    314c:	ce 01       	movw	r24, r28
    314e:	05 96       	adiw	r24, 0x05	; 5
    3150:	b8 01       	movw	r22, r16
    3152:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    3156:	89 85       	ldd	r24, Y+9	; 0x09
    3158:	82 30       	cpi	r24, 0x02	; 2
    315a:	40 f0       	brcs	.+16     	; 0x316c <__gtsf2+0x56>
    315c:	89 89       	ldd	r24, Y+17	; 0x11
    315e:	82 30       	cpi	r24, 0x02	; 2
    3160:	28 f0       	brcs	.+10     	; 0x316c <__gtsf2+0x56>
    3162:	c7 01       	movw	r24, r14
    3164:	b8 01       	movw	r22, r16
    3166:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__fpcmp_parts_f>
    316a:	01 c0       	rjmp	.+2      	; 0x316e <__gtsf2+0x58>
    316c:	8f ef       	ldi	r24, 0xFF	; 255
    316e:	68 96       	adiw	r28, 0x18	; 24
    3170:	e6 e0       	ldi	r30, 0x06	; 6
    3172:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <__epilogue_restores__+0x18>

00003176 <__gesf2>:
    3176:	a8 e1       	ldi	r26, 0x18	; 24
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	e1 ec       	ldi	r30, 0xC1	; 193
    317c:	f8 e1       	ldi	r31, 0x18	; 24
    317e:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__prologue_saves__+0x18>
    3182:	69 83       	std	Y+1, r22	; 0x01
    3184:	7a 83       	std	Y+2, r23	; 0x02
    3186:	8b 83       	std	Y+3, r24	; 0x03
    3188:	9c 83       	std	Y+4, r25	; 0x04
    318a:	2d 83       	std	Y+5, r18	; 0x05
    318c:	3e 83       	std	Y+6, r19	; 0x06
    318e:	4f 83       	std	Y+7, r20	; 0x07
    3190:	58 87       	std	Y+8, r21	; 0x08
    3192:	89 e0       	ldi	r24, 0x09	; 9
    3194:	e8 2e       	mov	r14, r24
    3196:	f1 2c       	mov	r15, r1
    3198:	ec 0e       	add	r14, r28
    319a:	fd 1e       	adc	r15, r29
    319c:	ce 01       	movw	r24, r28
    319e:	01 96       	adiw	r24, 0x01	; 1
    31a0:	b7 01       	movw	r22, r14
    31a2:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    31a6:	8e 01       	movw	r16, r28
    31a8:	0f 5e       	subi	r16, 0xEF	; 239
    31aa:	1f 4f       	sbci	r17, 0xFF	; 255
    31ac:	ce 01       	movw	r24, r28
    31ae:	05 96       	adiw	r24, 0x05	; 5
    31b0:	b8 01       	movw	r22, r16
    31b2:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    31b6:	89 85       	ldd	r24, Y+9	; 0x09
    31b8:	82 30       	cpi	r24, 0x02	; 2
    31ba:	40 f0       	brcs	.+16     	; 0x31cc <__gesf2+0x56>
    31bc:	89 89       	ldd	r24, Y+17	; 0x11
    31be:	82 30       	cpi	r24, 0x02	; 2
    31c0:	28 f0       	brcs	.+10     	; 0x31cc <__gesf2+0x56>
    31c2:	c7 01       	movw	r24, r14
    31c4:	b8 01       	movw	r22, r16
    31c6:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__fpcmp_parts_f>
    31ca:	01 c0       	rjmp	.+2      	; 0x31ce <__gesf2+0x58>
    31cc:	8f ef       	ldi	r24, 0xFF	; 255
    31ce:	68 96       	adiw	r28, 0x18	; 24
    31d0:	e6 e0       	ldi	r30, 0x06	; 6
    31d2:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <__epilogue_restores__+0x18>

000031d6 <__ltsf2>:
    31d6:	a8 e1       	ldi	r26, 0x18	; 24
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	e1 ef       	ldi	r30, 0xF1	; 241
    31dc:	f8 e1       	ldi	r31, 0x18	; 24
    31de:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__prologue_saves__+0x18>
    31e2:	69 83       	std	Y+1, r22	; 0x01
    31e4:	7a 83       	std	Y+2, r23	; 0x02
    31e6:	8b 83       	std	Y+3, r24	; 0x03
    31e8:	9c 83       	std	Y+4, r25	; 0x04
    31ea:	2d 83       	std	Y+5, r18	; 0x05
    31ec:	3e 83       	std	Y+6, r19	; 0x06
    31ee:	4f 83       	std	Y+7, r20	; 0x07
    31f0:	58 87       	std	Y+8, r21	; 0x08
    31f2:	89 e0       	ldi	r24, 0x09	; 9
    31f4:	e8 2e       	mov	r14, r24
    31f6:	f1 2c       	mov	r15, r1
    31f8:	ec 0e       	add	r14, r28
    31fa:	fd 1e       	adc	r15, r29
    31fc:	ce 01       	movw	r24, r28
    31fe:	01 96       	adiw	r24, 0x01	; 1
    3200:	b7 01       	movw	r22, r14
    3202:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    3206:	8e 01       	movw	r16, r28
    3208:	0f 5e       	subi	r16, 0xEF	; 239
    320a:	1f 4f       	sbci	r17, 0xFF	; 255
    320c:	ce 01       	movw	r24, r28
    320e:	05 96       	adiw	r24, 0x05	; 5
    3210:	b8 01       	movw	r22, r16
    3212:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    3216:	89 85       	ldd	r24, Y+9	; 0x09
    3218:	82 30       	cpi	r24, 0x02	; 2
    321a:	40 f0       	brcs	.+16     	; 0x322c <__ltsf2+0x56>
    321c:	89 89       	ldd	r24, Y+17	; 0x11
    321e:	82 30       	cpi	r24, 0x02	; 2
    3220:	28 f0       	brcs	.+10     	; 0x322c <__ltsf2+0x56>
    3222:	c7 01       	movw	r24, r14
    3224:	b8 01       	movw	r22, r16
    3226:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__fpcmp_parts_f>
    322a:	01 c0       	rjmp	.+2      	; 0x322e <__ltsf2+0x58>
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	68 96       	adiw	r28, 0x18	; 24
    3230:	e6 e0       	ldi	r30, 0x06	; 6
    3232:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <__epilogue_restores__+0x18>

00003236 <__floatsisf>:
    3236:	a8 e0       	ldi	r26, 0x08	; 8
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	e1 e2       	ldi	r30, 0x21	; 33
    323c:	f9 e1       	ldi	r31, 0x19	; 25
    323e:	0c 94 6b 1c 	jmp	0x38d6	; 0x38d6 <__prologue_saves__+0x12>
    3242:	9b 01       	movw	r18, r22
    3244:	ac 01       	movw	r20, r24
    3246:	83 e0       	ldi	r24, 0x03	; 3
    3248:	89 83       	std	Y+1, r24	; 0x01
    324a:	da 01       	movw	r26, r20
    324c:	c9 01       	movw	r24, r18
    324e:	88 27       	eor	r24, r24
    3250:	b7 fd       	sbrc	r27, 7
    3252:	83 95       	inc	r24
    3254:	99 27       	eor	r25, r25
    3256:	aa 27       	eor	r26, r26
    3258:	bb 27       	eor	r27, r27
    325a:	b8 2e       	mov	r11, r24
    325c:	21 15       	cp	r18, r1
    325e:	31 05       	cpc	r19, r1
    3260:	41 05       	cpc	r20, r1
    3262:	51 05       	cpc	r21, r1
    3264:	19 f4       	brne	.+6      	; 0x326c <__floatsisf+0x36>
    3266:	82 e0       	ldi	r24, 0x02	; 2
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	3a c0       	rjmp	.+116    	; 0x32e0 <__floatsisf+0xaa>
    326c:	88 23       	and	r24, r24
    326e:	a9 f0       	breq	.+42     	; 0x329a <__floatsisf+0x64>
    3270:	20 30       	cpi	r18, 0x00	; 0
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	38 07       	cpc	r19, r24
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	48 07       	cpc	r20, r24
    327a:	80 e8       	ldi	r24, 0x80	; 128
    327c:	58 07       	cpc	r21, r24
    327e:	29 f4       	brne	.+10     	; 0x328a <__floatsisf+0x54>
    3280:	60 e0       	ldi	r22, 0x00	; 0
    3282:	70 e0       	ldi	r23, 0x00	; 0
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	9f ec       	ldi	r25, 0xCF	; 207
    3288:	30 c0       	rjmp	.+96     	; 0x32ea <__floatsisf+0xb4>
    328a:	ee 24       	eor	r14, r14
    328c:	ff 24       	eor	r15, r15
    328e:	87 01       	movw	r16, r14
    3290:	e2 1a       	sub	r14, r18
    3292:	f3 0a       	sbc	r15, r19
    3294:	04 0b       	sbc	r16, r20
    3296:	15 0b       	sbc	r17, r21
    3298:	02 c0       	rjmp	.+4      	; 0x329e <__floatsisf+0x68>
    329a:	79 01       	movw	r14, r18
    329c:	8a 01       	movw	r16, r20
    329e:	8e e1       	ldi	r24, 0x1E	; 30
    32a0:	c8 2e       	mov	r12, r24
    32a2:	d1 2c       	mov	r13, r1
    32a4:	dc 82       	std	Y+4, r13	; 0x04
    32a6:	cb 82       	std	Y+3, r12	; 0x03
    32a8:	ed 82       	std	Y+5, r14	; 0x05
    32aa:	fe 82       	std	Y+6, r15	; 0x06
    32ac:	0f 83       	std	Y+7, r16	; 0x07
    32ae:	18 87       	std	Y+8, r17	; 0x08
    32b0:	c8 01       	movw	r24, r16
    32b2:	b7 01       	movw	r22, r14
    32b4:	0e 94 46 1a 	call	0x348c	; 0x348c <__clzsi2>
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	18 16       	cp	r1, r24
    32bc:	19 06       	cpc	r1, r25
    32be:	84 f4       	brge	.+32     	; 0x32e0 <__floatsisf+0xaa>
    32c0:	08 2e       	mov	r0, r24
    32c2:	04 c0       	rjmp	.+8      	; 0x32cc <__floatsisf+0x96>
    32c4:	ee 0c       	add	r14, r14
    32c6:	ff 1c       	adc	r15, r15
    32c8:	00 1f       	adc	r16, r16
    32ca:	11 1f       	adc	r17, r17
    32cc:	0a 94       	dec	r0
    32ce:	d2 f7       	brpl	.-12     	; 0x32c4 <__floatsisf+0x8e>
    32d0:	ed 82       	std	Y+5, r14	; 0x05
    32d2:	fe 82       	std	Y+6, r15	; 0x06
    32d4:	0f 83       	std	Y+7, r16	; 0x07
    32d6:	18 87       	std	Y+8, r17	; 0x08
    32d8:	c8 1a       	sub	r12, r24
    32da:	d9 0a       	sbc	r13, r25
    32dc:	dc 82       	std	Y+4, r13	; 0x04
    32de:	cb 82       	std	Y+3, r12	; 0x03
    32e0:	ba 82       	std	Y+2, r11	; 0x02
    32e2:	ce 01       	movw	r24, r28
    32e4:	01 96       	adiw	r24, 0x01	; 1
    32e6:	0e 94 95 1a 	call	0x352a	; 0x352a <__pack_f>
    32ea:	28 96       	adiw	r28, 0x08	; 8
    32ec:	e9 e0       	ldi	r30, 0x09	; 9
    32ee:	0c 94 87 1c 	jmp	0x390e	; 0x390e <__epilogue_restores__+0x12>

000032f2 <__fixsfsi>:
    32f2:	ac e0       	ldi	r26, 0x0C	; 12
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	ef e7       	ldi	r30, 0x7F	; 127
    32f8:	f9 e1       	ldi	r31, 0x19	; 25
    32fa:	0c 94 72 1c 	jmp	0x38e4	; 0x38e4 <__prologue_saves__+0x20>
    32fe:	69 83       	std	Y+1, r22	; 0x01
    3300:	7a 83       	std	Y+2, r23	; 0x02
    3302:	8b 83       	std	Y+3, r24	; 0x03
    3304:	9c 83       	std	Y+4, r25	; 0x04
    3306:	ce 01       	movw	r24, r28
    3308:	01 96       	adiw	r24, 0x01	; 1
    330a:	be 01       	movw	r22, r28
    330c:	6b 5f       	subi	r22, 0xFB	; 251
    330e:	7f 4f       	sbci	r23, 0xFF	; 255
    3310:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__unpack_f>
    3314:	8d 81       	ldd	r24, Y+5	; 0x05
    3316:	82 30       	cpi	r24, 0x02	; 2
    3318:	61 f1       	breq	.+88     	; 0x3372 <__fixsfsi+0x80>
    331a:	82 30       	cpi	r24, 0x02	; 2
    331c:	50 f1       	brcs	.+84     	; 0x3372 <__fixsfsi+0x80>
    331e:	84 30       	cpi	r24, 0x04	; 4
    3320:	21 f4       	brne	.+8      	; 0x332a <__fixsfsi+0x38>
    3322:	8e 81       	ldd	r24, Y+6	; 0x06
    3324:	88 23       	and	r24, r24
    3326:	51 f1       	breq	.+84     	; 0x337c <__fixsfsi+0x8a>
    3328:	2e c0       	rjmp	.+92     	; 0x3386 <__fixsfsi+0x94>
    332a:	2f 81       	ldd	r18, Y+7	; 0x07
    332c:	38 85       	ldd	r19, Y+8	; 0x08
    332e:	37 fd       	sbrc	r19, 7
    3330:	20 c0       	rjmp	.+64     	; 0x3372 <__fixsfsi+0x80>
    3332:	6e 81       	ldd	r22, Y+6	; 0x06
    3334:	2f 31       	cpi	r18, 0x1F	; 31
    3336:	31 05       	cpc	r19, r1
    3338:	1c f0       	brlt	.+6      	; 0x3340 <__fixsfsi+0x4e>
    333a:	66 23       	and	r22, r22
    333c:	f9 f0       	breq	.+62     	; 0x337c <__fixsfsi+0x8a>
    333e:	23 c0       	rjmp	.+70     	; 0x3386 <__fixsfsi+0x94>
    3340:	8e e1       	ldi	r24, 0x1E	; 30
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	82 1b       	sub	r24, r18
    3346:	93 0b       	sbc	r25, r19
    3348:	29 85       	ldd	r18, Y+9	; 0x09
    334a:	3a 85       	ldd	r19, Y+10	; 0x0a
    334c:	4b 85       	ldd	r20, Y+11	; 0x0b
    334e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3350:	04 c0       	rjmp	.+8      	; 0x335a <__fixsfsi+0x68>
    3352:	56 95       	lsr	r21
    3354:	47 95       	ror	r20
    3356:	37 95       	ror	r19
    3358:	27 95       	ror	r18
    335a:	8a 95       	dec	r24
    335c:	d2 f7       	brpl	.-12     	; 0x3352 <__fixsfsi+0x60>
    335e:	66 23       	and	r22, r22
    3360:	b1 f0       	breq	.+44     	; 0x338e <__fixsfsi+0x9c>
    3362:	50 95       	com	r21
    3364:	40 95       	com	r20
    3366:	30 95       	com	r19
    3368:	21 95       	neg	r18
    336a:	3f 4f       	sbci	r19, 0xFF	; 255
    336c:	4f 4f       	sbci	r20, 0xFF	; 255
    336e:	5f 4f       	sbci	r21, 0xFF	; 255
    3370:	0e c0       	rjmp	.+28     	; 0x338e <__fixsfsi+0x9c>
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	40 e0       	ldi	r20, 0x00	; 0
    3378:	50 e0       	ldi	r21, 0x00	; 0
    337a:	09 c0       	rjmp	.+18     	; 0x338e <__fixsfsi+0x9c>
    337c:	2f ef       	ldi	r18, 0xFF	; 255
    337e:	3f ef       	ldi	r19, 0xFF	; 255
    3380:	4f ef       	ldi	r20, 0xFF	; 255
    3382:	5f e7       	ldi	r21, 0x7F	; 127
    3384:	04 c0       	rjmp	.+8      	; 0x338e <__fixsfsi+0x9c>
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	40 e0       	ldi	r20, 0x00	; 0
    338c:	50 e8       	ldi	r21, 0x80	; 128
    338e:	b9 01       	movw	r22, r18
    3390:	ca 01       	movw	r24, r20
    3392:	2c 96       	adiw	r28, 0x0c	; 12
    3394:	e2 e0       	ldi	r30, 0x02	; 2
    3396:	0c 94 8e 1c 	jmp	0x391c	; 0x391c <__epilogue_restores__+0x20>

0000339a <__floatunsisf>:
    339a:	a8 e0       	ldi	r26, 0x08	; 8
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	e3 ed       	ldi	r30, 0xD3	; 211
    33a0:	f9 e1       	ldi	r31, 0x19	; 25
    33a2:	0c 94 6a 1c 	jmp	0x38d4	; 0x38d4 <__prologue_saves__+0x10>
    33a6:	7b 01       	movw	r14, r22
    33a8:	8c 01       	movw	r16, r24
    33aa:	61 15       	cp	r22, r1
    33ac:	71 05       	cpc	r23, r1
    33ae:	81 05       	cpc	r24, r1
    33b0:	91 05       	cpc	r25, r1
    33b2:	19 f4       	brne	.+6      	; 0x33ba <__floatunsisf+0x20>
    33b4:	82 e0       	ldi	r24, 0x02	; 2
    33b6:	89 83       	std	Y+1, r24	; 0x01
    33b8:	60 c0       	rjmp	.+192    	; 0x347a <__floatunsisf+0xe0>
    33ba:	83 e0       	ldi	r24, 0x03	; 3
    33bc:	89 83       	std	Y+1, r24	; 0x01
    33be:	8e e1       	ldi	r24, 0x1E	; 30
    33c0:	c8 2e       	mov	r12, r24
    33c2:	d1 2c       	mov	r13, r1
    33c4:	dc 82       	std	Y+4, r13	; 0x04
    33c6:	cb 82       	std	Y+3, r12	; 0x03
    33c8:	ed 82       	std	Y+5, r14	; 0x05
    33ca:	fe 82       	std	Y+6, r15	; 0x06
    33cc:	0f 83       	std	Y+7, r16	; 0x07
    33ce:	18 87       	std	Y+8, r17	; 0x08
    33d0:	c8 01       	movw	r24, r16
    33d2:	b7 01       	movw	r22, r14
    33d4:	0e 94 46 1a 	call	0x348c	; 0x348c <__clzsi2>
    33d8:	fc 01       	movw	r30, r24
    33da:	31 97       	sbiw	r30, 0x01	; 1
    33dc:	f7 ff       	sbrs	r31, 7
    33de:	3b c0       	rjmp	.+118    	; 0x3456 <__floatunsisf+0xbc>
    33e0:	22 27       	eor	r18, r18
    33e2:	33 27       	eor	r19, r19
    33e4:	2e 1b       	sub	r18, r30
    33e6:	3f 0b       	sbc	r19, r31
    33e8:	57 01       	movw	r10, r14
    33ea:	68 01       	movw	r12, r16
    33ec:	02 2e       	mov	r0, r18
    33ee:	04 c0       	rjmp	.+8      	; 0x33f8 <__floatunsisf+0x5e>
    33f0:	d6 94       	lsr	r13
    33f2:	c7 94       	ror	r12
    33f4:	b7 94       	ror	r11
    33f6:	a7 94       	ror	r10
    33f8:	0a 94       	dec	r0
    33fa:	d2 f7       	brpl	.-12     	; 0x33f0 <__floatunsisf+0x56>
    33fc:	40 e0       	ldi	r20, 0x00	; 0
    33fe:	50 e0       	ldi	r21, 0x00	; 0
    3400:	60 e0       	ldi	r22, 0x00	; 0
    3402:	70 e0       	ldi	r23, 0x00	; 0
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	a0 e0       	ldi	r26, 0x00	; 0
    340a:	b0 e0       	ldi	r27, 0x00	; 0
    340c:	04 c0       	rjmp	.+8      	; 0x3416 <__floatunsisf+0x7c>
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	aa 1f       	adc	r26, r26
    3414:	bb 1f       	adc	r27, r27
    3416:	2a 95       	dec	r18
    3418:	d2 f7       	brpl	.-12     	; 0x340e <__floatunsisf+0x74>
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	a1 09       	sbc	r26, r1
    341e:	b1 09       	sbc	r27, r1
    3420:	8e 21       	and	r24, r14
    3422:	9f 21       	and	r25, r15
    3424:	a0 23       	and	r26, r16
    3426:	b1 23       	and	r27, r17
    3428:	00 97       	sbiw	r24, 0x00	; 0
    342a:	a1 05       	cpc	r26, r1
    342c:	b1 05       	cpc	r27, r1
    342e:	21 f0       	breq	.+8      	; 0x3438 <__floatunsisf+0x9e>
    3430:	41 e0       	ldi	r20, 0x01	; 1
    3432:	50 e0       	ldi	r21, 0x00	; 0
    3434:	60 e0       	ldi	r22, 0x00	; 0
    3436:	70 e0       	ldi	r23, 0x00	; 0
    3438:	4a 29       	or	r20, r10
    343a:	5b 29       	or	r21, r11
    343c:	6c 29       	or	r22, r12
    343e:	7d 29       	or	r23, r13
    3440:	4d 83       	std	Y+5, r20	; 0x05
    3442:	5e 83       	std	Y+6, r21	; 0x06
    3444:	6f 83       	std	Y+7, r22	; 0x07
    3446:	78 87       	std	Y+8, r23	; 0x08
    3448:	8e e1       	ldi	r24, 0x1E	; 30
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	8e 1b       	sub	r24, r30
    344e:	9f 0b       	sbc	r25, r31
    3450:	9c 83       	std	Y+4, r25	; 0x04
    3452:	8b 83       	std	Y+3, r24	; 0x03
    3454:	12 c0       	rjmp	.+36     	; 0x347a <__floatunsisf+0xe0>
    3456:	30 97       	sbiw	r30, 0x00	; 0
    3458:	81 f0       	breq	.+32     	; 0x347a <__floatunsisf+0xe0>
    345a:	0e 2e       	mov	r0, r30
    345c:	04 c0       	rjmp	.+8      	; 0x3466 <__floatunsisf+0xcc>
    345e:	ee 0c       	add	r14, r14
    3460:	ff 1c       	adc	r15, r15
    3462:	00 1f       	adc	r16, r16
    3464:	11 1f       	adc	r17, r17
    3466:	0a 94       	dec	r0
    3468:	d2 f7       	brpl	.-12     	; 0x345e <__floatunsisf+0xc4>
    346a:	ed 82       	std	Y+5, r14	; 0x05
    346c:	fe 82       	std	Y+6, r15	; 0x06
    346e:	0f 83       	std	Y+7, r16	; 0x07
    3470:	18 87       	std	Y+8, r17	; 0x08
    3472:	ce 1a       	sub	r12, r30
    3474:	df 0a       	sbc	r13, r31
    3476:	dc 82       	std	Y+4, r13	; 0x04
    3478:	cb 82       	std	Y+3, r12	; 0x03
    347a:	1a 82       	std	Y+2, r1	; 0x02
    347c:	ce 01       	movw	r24, r28
    347e:	01 96       	adiw	r24, 0x01	; 1
    3480:	0e 94 95 1a 	call	0x352a	; 0x352a <__pack_f>
    3484:	28 96       	adiw	r28, 0x08	; 8
    3486:	ea e0       	ldi	r30, 0x0A	; 10
    3488:	0c 94 86 1c 	jmp	0x390c	; 0x390c <__epilogue_restores__+0x10>

0000348c <__clzsi2>:
    348c:	ef 92       	push	r14
    348e:	ff 92       	push	r15
    3490:	0f 93       	push	r16
    3492:	1f 93       	push	r17
    3494:	7b 01       	movw	r14, r22
    3496:	8c 01       	movw	r16, r24
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	e8 16       	cp	r14, r24
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	f8 06       	cpc	r15, r24
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	08 07       	cpc	r16, r24
    34a4:	80 e0       	ldi	r24, 0x00	; 0
    34a6:	18 07       	cpc	r17, r24
    34a8:	88 f4       	brcc	.+34     	; 0x34cc <__clzsi2+0x40>
    34aa:	8f ef       	ldi	r24, 0xFF	; 255
    34ac:	e8 16       	cp	r14, r24
    34ae:	f1 04       	cpc	r15, r1
    34b0:	01 05       	cpc	r16, r1
    34b2:	11 05       	cpc	r17, r1
    34b4:	31 f0       	breq	.+12     	; 0x34c2 <__clzsi2+0x36>
    34b6:	28 f0       	brcs	.+10     	; 0x34c2 <__clzsi2+0x36>
    34b8:	88 e0       	ldi	r24, 0x08	; 8
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	a0 e0       	ldi	r26, 0x00	; 0
    34be:	b0 e0       	ldi	r27, 0x00	; 0
    34c0:	17 c0       	rjmp	.+46     	; 0x34f0 <__clzsi2+0x64>
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	a0 e0       	ldi	r26, 0x00	; 0
    34c8:	b0 e0       	ldi	r27, 0x00	; 0
    34ca:	12 c0       	rjmp	.+36     	; 0x34f0 <__clzsi2+0x64>
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	e8 16       	cp	r14, r24
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	f8 06       	cpc	r15, r24
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	08 07       	cpc	r16, r24
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	18 07       	cpc	r17, r24
    34dc:	28 f0       	brcs	.+10     	; 0x34e8 <__clzsi2+0x5c>
    34de:	88 e1       	ldi	r24, 0x18	; 24
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	a0 e0       	ldi	r26, 0x00	; 0
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	04 c0       	rjmp	.+8      	; 0x34f0 <__clzsi2+0x64>
    34e8:	80 e1       	ldi	r24, 0x10	; 16
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	a0 e0       	ldi	r26, 0x00	; 0
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	20 e2       	ldi	r18, 0x20	; 32
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	40 e0       	ldi	r20, 0x00	; 0
    34f6:	50 e0       	ldi	r21, 0x00	; 0
    34f8:	28 1b       	sub	r18, r24
    34fa:	39 0b       	sbc	r19, r25
    34fc:	4a 0b       	sbc	r20, r26
    34fe:	5b 0b       	sbc	r21, r27
    3500:	04 c0       	rjmp	.+8      	; 0x350a <__clzsi2+0x7e>
    3502:	16 95       	lsr	r17
    3504:	07 95       	ror	r16
    3506:	f7 94       	ror	r15
    3508:	e7 94       	ror	r14
    350a:	8a 95       	dec	r24
    350c:	d2 f7       	brpl	.-12     	; 0x3502 <__clzsi2+0x76>
    350e:	f7 01       	movw	r30, r14
    3510:	e0 5f       	subi	r30, 0xF0	; 240
    3512:	fe 4f       	sbci	r31, 0xFE	; 254
    3514:	80 81       	ld	r24, Z
    3516:	28 1b       	sub	r18, r24
    3518:	31 09       	sbc	r19, r1
    351a:	41 09       	sbc	r20, r1
    351c:	51 09       	sbc	r21, r1
    351e:	c9 01       	movw	r24, r18
    3520:	1f 91       	pop	r17
    3522:	0f 91       	pop	r16
    3524:	ff 90       	pop	r15
    3526:	ef 90       	pop	r14
    3528:	08 95       	ret

0000352a <__pack_f>:
    352a:	df 92       	push	r13
    352c:	ef 92       	push	r14
    352e:	ff 92       	push	r15
    3530:	0f 93       	push	r16
    3532:	1f 93       	push	r17
    3534:	fc 01       	movw	r30, r24
    3536:	e4 80       	ldd	r14, Z+4	; 0x04
    3538:	f5 80       	ldd	r15, Z+5	; 0x05
    353a:	06 81       	ldd	r16, Z+6	; 0x06
    353c:	17 81       	ldd	r17, Z+7	; 0x07
    353e:	d1 80       	ldd	r13, Z+1	; 0x01
    3540:	80 81       	ld	r24, Z
    3542:	82 30       	cpi	r24, 0x02	; 2
    3544:	48 f4       	brcc	.+18     	; 0x3558 <__pack_f+0x2e>
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	a0 e1       	ldi	r26, 0x10	; 16
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	e8 2a       	or	r14, r24
    3550:	f9 2a       	or	r15, r25
    3552:	0a 2b       	or	r16, r26
    3554:	1b 2b       	or	r17, r27
    3556:	a5 c0       	rjmp	.+330    	; 0x36a2 <__pack_f+0x178>
    3558:	84 30       	cpi	r24, 0x04	; 4
    355a:	09 f4       	brne	.+2      	; 0x355e <__pack_f+0x34>
    355c:	9f c0       	rjmp	.+318    	; 0x369c <__pack_f+0x172>
    355e:	82 30       	cpi	r24, 0x02	; 2
    3560:	21 f4       	brne	.+8      	; 0x356a <__pack_f+0x40>
    3562:	ee 24       	eor	r14, r14
    3564:	ff 24       	eor	r15, r15
    3566:	87 01       	movw	r16, r14
    3568:	05 c0       	rjmp	.+10     	; 0x3574 <__pack_f+0x4a>
    356a:	e1 14       	cp	r14, r1
    356c:	f1 04       	cpc	r15, r1
    356e:	01 05       	cpc	r16, r1
    3570:	11 05       	cpc	r17, r1
    3572:	19 f4       	brne	.+6      	; 0x357a <__pack_f+0x50>
    3574:	e0 e0       	ldi	r30, 0x00	; 0
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	96 c0       	rjmp	.+300    	; 0x36a6 <__pack_f+0x17c>
    357a:	62 81       	ldd	r22, Z+2	; 0x02
    357c:	73 81       	ldd	r23, Z+3	; 0x03
    357e:	9f ef       	ldi	r25, 0xFF	; 255
    3580:	62 38       	cpi	r22, 0x82	; 130
    3582:	79 07       	cpc	r23, r25
    3584:	0c f0       	brlt	.+2      	; 0x3588 <__pack_f+0x5e>
    3586:	5b c0       	rjmp	.+182    	; 0x363e <__pack_f+0x114>
    3588:	22 e8       	ldi	r18, 0x82	; 130
    358a:	3f ef       	ldi	r19, 0xFF	; 255
    358c:	26 1b       	sub	r18, r22
    358e:	37 0b       	sbc	r19, r23
    3590:	2a 31       	cpi	r18, 0x1A	; 26
    3592:	31 05       	cpc	r19, r1
    3594:	2c f0       	brlt	.+10     	; 0x35a0 <__pack_f+0x76>
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	40 e0       	ldi	r20, 0x00	; 0
    359c:	50 e0       	ldi	r21, 0x00	; 0
    359e:	2a c0       	rjmp	.+84     	; 0x35f4 <__pack_f+0xca>
    35a0:	b8 01       	movw	r22, r16
    35a2:	a7 01       	movw	r20, r14
    35a4:	02 2e       	mov	r0, r18
    35a6:	04 c0       	rjmp	.+8      	; 0x35b0 <__pack_f+0x86>
    35a8:	76 95       	lsr	r23
    35aa:	67 95       	ror	r22
    35ac:	57 95       	ror	r21
    35ae:	47 95       	ror	r20
    35b0:	0a 94       	dec	r0
    35b2:	d2 f7       	brpl	.-12     	; 0x35a8 <__pack_f+0x7e>
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	a0 e0       	ldi	r26, 0x00	; 0
    35ba:	b0 e0       	ldi	r27, 0x00	; 0
    35bc:	04 c0       	rjmp	.+8      	; 0x35c6 <__pack_f+0x9c>
    35be:	88 0f       	add	r24, r24
    35c0:	99 1f       	adc	r25, r25
    35c2:	aa 1f       	adc	r26, r26
    35c4:	bb 1f       	adc	r27, r27
    35c6:	2a 95       	dec	r18
    35c8:	d2 f7       	brpl	.-12     	; 0x35be <__pack_f+0x94>
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	a1 09       	sbc	r26, r1
    35ce:	b1 09       	sbc	r27, r1
    35d0:	8e 21       	and	r24, r14
    35d2:	9f 21       	and	r25, r15
    35d4:	a0 23       	and	r26, r16
    35d6:	b1 23       	and	r27, r17
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	a1 05       	cpc	r26, r1
    35dc:	b1 05       	cpc	r27, r1
    35de:	21 f0       	breq	.+8      	; 0x35e8 <__pack_f+0xbe>
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	a0 e0       	ldi	r26, 0x00	; 0
    35e6:	b0 e0       	ldi	r27, 0x00	; 0
    35e8:	9a 01       	movw	r18, r20
    35ea:	ab 01       	movw	r20, r22
    35ec:	28 2b       	or	r18, r24
    35ee:	39 2b       	or	r19, r25
    35f0:	4a 2b       	or	r20, r26
    35f2:	5b 2b       	or	r21, r27
    35f4:	da 01       	movw	r26, r20
    35f6:	c9 01       	movw	r24, r18
    35f8:	8f 77       	andi	r24, 0x7F	; 127
    35fa:	90 70       	andi	r25, 0x00	; 0
    35fc:	a0 70       	andi	r26, 0x00	; 0
    35fe:	b0 70       	andi	r27, 0x00	; 0
    3600:	80 34       	cpi	r24, 0x40	; 64
    3602:	91 05       	cpc	r25, r1
    3604:	a1 05       	cpc	r26, r1
    3606:	b1 05       	cpc	r27, r1
    3608:	39 f4       	brne	.+14     	; 0x3618 <__pack_f+0xee>
    360a:	27 ff       	sbrs	r18, 7
    360c:	09 c0       	rjmp	.+18     	; 0x3620 <__pack_f+0xf6>
    360e:	20 5c       	subi	r18, 0xC0	; 192
    3610:	3f 4f       	sbci	r19, 0xFF	; 255
    3612:	4f 4f       	sbci	r20, 0xFF	; 255
    3614:	5f 4f       	sbci	r21, 0xFF	; 255
    3616:	04 c0       	rjmp	.+8      	; 0x3620 <__pack_f+0xf6>
    3618:	21 5c       	subi	r18, 0xC1	; 193
    361a:	3f 4f       	sbci	r19, 0xFF	; 255
    361c:	4f 4f       	sbci	r20, 0xFF	; 255
    361e:	5f 4f       	sbci	r21, 0xFF	; 255
    3620:	e0 e0       	ldi	r30, 0x00	; 0
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	20 30       	cpi	r18, 0x00	; 0
    3626:	a0 e0       	ldi	r26, 0x00	; 0
    3628:	3a 07       	cpc	r19, r26
    362a:	a0 e0       	ldi	r26, 0x00	; 0
    362c:	4a 07       	cpc	r20, r26
    362e:	a0 e4       	ldi	r26, 0x40	; 64
    3630:	5a 07       	cpc	r21, r26
    3632:	10 f0       	brcs	.+4      	; 0x3638 <__pack_f+0x10e>
    3634:	e1 e0       	ldi	r30, 0x01	; 1
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	79 01       	movw	r14, r18
    363a:	8a 01       	movw	r16, r20
    363c:	27 c0       	rjmp	.+78     	; 0x368c <__pack_f+0x162>
    363e:	60 38       	cpi	r22, 0x80	; 128
    3640:	71 05       	cpc	r23, r1
    3642:	64 f5       	brge	.+88     	; 0x369c <__pack_f+0x172>
    3644:	fb 01       	movw	r30, r22
    3646:	e1 58       	subi	r30, 0x81	; 129
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	d8 01       	movw	r26, r16
    364c:	c7 01       	movw	r24, r14
    364e:	8f 77       	andi	r24, 0x7F	; 127
    3650:	90 70       	andi	r25, 0x00	; 0
    3652:	a0 70       	andi	r26, 0x00	; 0
    3654:	b0 70       	andi	r27, 0x00	; 0
    3656:	80 34       	cpi	r24, 0x40	; 64
    3658:	91 05       	cpc	r25, r1
    365a:	a1 05       	cpc	r26, r1
    365c:	b1 05       	cpc	r27, r1
    365e:	39 f4       	brne	.+14     	; 0x366e <__pack_f+0x144>
    3660:	e7 fe       	sbrs	r14, 7
    3662:	0d c0       	rjmp	.+26     	; 0x367e <__pack_f+0x154>
    3664:	80 e4       	ldi	r24, 0x40	; 64
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	a0 e0       	ldi	r26, 0x00	; 0
    366a:	b0 e0       	ldi	r27, 0x00	; 0
    366c:	04 c0       	rjmp	.+8      	; 0x3676 <__pack_f+0x14c>
    366e:	8f e3       	ldi	r24, 0x3F	; 63
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	a0 e0       	ldi	r26, 0x00	; 0
    3674:	b0 e0       	ldi	r27, 0x00	; 0
    3676:	e8 0e       	add	r14, r24
    3678:	f9 1e       	adc	r15, r25
    367a:	0a 1f       	adc	r16, r26
    367c:	1b 1f       	adc	r17, r27
    367e:	17 ff       	sbrs	r17, 7
    3680:	05 c0       	rjmp	.+10     	; 0x368c <__pack_f+0x162>
    3682:	16 95       	lsr	r17
    3684:	07 95       	ror	r16
    3686:	f7 94       	ror	r15
    3688:	e7 94       	ror	r14
    368a:	31 96       	adiw	r30, 0x01	; 1
    368c:	87 e0       	ldi	r24, 0x07	; 7
    368e:	16 95       	lsr	r17
    3690:	07 95       	ror	r16
    3692:	f7 94       	ror	r15
    3694:	e7 94       	ror	r14
    3696:	8a 95       	dec	r24
    3698:	d1 f7       	brne	.-12     	; 0x368e <__pack_f+0x164>
    369a:	05 c0       	rjmp	.+10     	; 0x36a6 <__pack_f+0x17c>
    369c:	ee 24       	eor	r14, r14
    369e:	ff 24       	eor	r15, r15
    36a0:	87 01       	movw	r16, r14
    36a2:	ef ef       	ldi	r30, 0xFF	; 255
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	6e 2f       	mov	r22, r30
    36a8:	67 95       	ror	r22
    36aa:	66 27       	eor	r22, r22
    36ac:	67 95       	ror	r22
    36ae:	90 2f       	mov	r25, r16
    36b0:	9f 77       	andi	r25, 0x7F	; 127
    36b2:	d7 94       	ror	r13
    36b4:	dd 24       	eor	r13, r13
    36b6:	d7 94       	ror	r13
    36b8:	8e 2f       	mov	r24, r30
    36ba:	86 95       	lsr	r24
    36bc:	49 2f       	mov	r20, r25
    36be:	46 2b       	or	r20, r22
    36c0:	58 2f       	mov	r21, r24
    36c2:	5d 29       	or	r21, r13
    36c4:	b7 01       	movw	r22, r14
    36c6:	ca 01       	movw	r24, r20
    36c8:	1f 91       	pop	r17
    36ca:	0f 91       	pop	r16
    36cc:	ff 90       	pop	r15
    36ce:	ef 90       	pop	r14
    36d0:	df 90       	pop	r13
    36d2:	08 95       	ret

000036d4 <__unpack_f>:
    36d4:	fc 01       	movw	r30, r24
    36d6:	db 01       	movw	r26, r22
    36d8:	40 81       	ld	r20, Z
    36da:	51 81       	ldd	r21, Z+1	; 0x01
    36dc:	22 81       	ldd	r18, Z+2	; 0x02
    36de:	62 2f       	mov	r22, r18
    36e0:	6f 77       	andi	r22, 0x7F	; 127
    36e2:	70 e0       	ldi	r23, 0x00	; 0
    36e4:	22 1f       	adc	r18, r18
    36e6:	22 27       	eor	r18, r18
    36e8:	22 1f       	adc	r18, r18
    36ea:	93 81       	ldd	r25, Z+3	; 0x03
    36ec:	89 2f       	mov	r24, r25
    36ee:	88 0f       	add	r24, r24
    36f0:	82 2b       	or	r24, r18
    36f2:	28 2f       	mov	r18, r24
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	99 1f       	adc	r25, r25
    36f8:	99 27       	eor	r25, r25
    36fa:	99 1f       	adc	r25, r25
    36fc:	11 96       	adiw	r26, 0x01	; 1
    36fe:	9c 93       	st	X, r25
    3700:	11 97       	sbiw	r26, 0x01	; 1
    3702:	21 15       	cp	r18, r1
    3704:	31 05       	cpc	r19, r1
    3706:	a9 f5       	brne	.+106    	; 0x3772 <__unpack_f+0x9e>
    3708:	41 15       	cp	r20, r1
    370a:	51 05       	cpc	r21, r1
    370c:	61 05       	cpc	r22, r1
    370e:	71 05       	cpc	r23, r1
    3710:	11 f4       	brne	.+4      	; 0x3716 <__unpack_f+0x42>
    3712:	82 e0       	ldi	r24, 0x02	; 2
    3714:	37 c0       	rjmp	.+110    	; 0x3784 <__unpack_f+0xb0>
    3716:	82 e8       	ldi	r24, 0x82	; 130
    3718:	9f ef       	ldi	r25, 0xFF	; 255
    371a:	13 96       	adiw	r26, 0x03	; 3
    371c:	9c 93       	st	X, r25
    371e:	8e 93       	st	-X, r24
    3720:	12 97       	sbiw	r26, 0x02	; 2
    3722:	9a 01       	movw	r18, r20
    3724:	ab 01       	movw	r20, r22
    3726:	67 e0       	ldi	r22, 0x07	; 7
    3728:	22 0f       	add	r18, r18
    372a:	33 1f       	adc	r19, r19
    372c:	44 1f       	adc	r20, r20
    372e:	55 1f       	adc	r21, r21
    3730:	6a 95       	dec	r22
    3732:	d1 f7       	brne	.-12     	; 0x3728 <__unpack_f+0x54>
    3734:	83 e0       	ldi	r24, 0x03	; 3
    3736:	8c 93       	st	X, r24
    3738:	0d c0       	rjmp	.+26     	; 0x3754 <__unpack_f+0x80>
    373a:	22 0f       	add	r18, r18
    373c:	33 1f       	adc	r19, r19
    373e:	44 1f       	adc	r20, r20
    3740:	55 1f       	adc	r21, r21
    3742:	12 96       	adiw	r26, 0x02	; 2
    3744:	8d 91       	ld	r24, X+
    3746:	9c 91       	ld	r25, X
    3748:	13 97       	sbiw	r26, 0x03	; 3
    374a:	01 97       	sbiw	r24, 0x01	; 1
    374c:	13 96       	adiw	r26, 0x03	; 3
    374e:	9c 93       	st	X, r25
    3750:	8e 93       	st	-X, r24
    3752:	12 97       	sbiw	r26, 0x02	; 2
    3754:	20 30       	cpi	r18, 0x00	; 0
    3756:	80 e0       	ldi	r24, 0x00	; 0
    3758:	38 07       	cpc	r19, r24
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	48 07       	cpc	r20, r24
    375e:	80 e4       	ldi	r24, 0x40	; 64
    3760:	58 07       	cpc	r21, r24
    3762:	58 f3       	brcs	.-42     	; 0x373a <__unpack_f+0x66>
    3764:	14 96       	adiw	r26, 0x04	; 4
    3766:	2d 93       	st	X+, r18
    3768:	3d 93       	st	X+, r19
    376a:	4d 93       	st	X+, r20
    376c:	5c 93       	st	X, r21
    376e:	17 97       	sbiw	r26, 0x07	; 7
    3770:	08 95       	ret
    3772:	2f 3f       	cpi	r18, 0xFF	; 255
    3774:	31 05       	cpc	r19, r1
    3776:	79 f4       	brne	.+30     	; 0x3796 <__unpack_f+0xc2>
    3778:	41 15       	cp	r20, r1
    377a:	51 05       	cpc	r21, r1
    377c:	61 05       	cpc	r22, r1
    377e:	71 05       	cpc	r23, r1
    3780:	19 f4       	brne	.+6      	; 0x3788 <__unpack_f+0xb4>
    3782:	84 e0       	ldi	r24, 0x04	; 4
    3784:	8c 93       	st	X, r24
    3786:	08 95       	ret
    3788:	64 ff       	sbrs	r22, 4
    378a:	03 c0       	rjmp	.+6      	; 0x3792 <__unpack_f+0xbe>
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	8c 93       	st	X, r24
    3790:	12 c0       	rjmp	.+36     	; 0x37b6 <__unpack_f+0xe2>
    3792:	1c 92       	st	X, r1
    3794:	10 c0       	rjmp	.+32     	; 0x37b6 <__unpack_f+0xe2>
    3796:	2f 57       	subi	r18, 0x7F	; 127
    3798:	30 40       	sbci	r19, 0x00	; 0
    379a:	13 96       	adiw	r26, 0x03	; 3
    379c:	3c 93       	st	X, r19
    379e:	2e 93       	st	-X, r18
    37a0:	12 97       	sbiw	r26, 0x02	; 2
    37a2:	83 e0       	ldi	r24, 0x03	; 3
    37a4:	8c 93       	st	X, r24
    37a6:	87 e0       	ldi	r24, 0x07	; 7
    37a8:	44 0f       	add	r20, r20
    37aa:	55 1f       	adc	r21, r21
    37ac:	66 1f       	adc	r22, r22
    37ae:	77 1f       	adc	r23, r23
    37b0:	8a 95       	dec	r24
    37b2:	d1 f7       	brne	.-12     	; 0x37a8 <__unpack_f+0xd4>
    37b4:	70 64       	ori	r23, 0x40	; 64
    37b6:	14 96       	adiw	r26, 0x04	; 4
    37b8:	4d 93       	st	X+, r20
    37ba:	5d 93       	st	X+, r21
    37bc:	6d 93       	st	X+, r22
    37be:	7c 93       	st	X, r23
    37c0:	17 97       	sbiw	r26, 0x07	; 7
    37c2:	08 95       	ret

000037c4 <__fpcmp_parts_f>:
    37c4:	1f 93       	push	r17
    37c6:	dc 01       	movw	r26, r24
    37c8:	fb 01       	movw	r30, r22
    37ca:	9c 91       	ld	r25, X
    37cc:	92 30       	cpi	r25, 0x02	; 2
    37ce:	08 f4       	brcc	.+2      	; 0x37d2 <__fpcmp_parts_f+0xe>
    37d0:	47 c0       	rjmp	.+142    	; 0x3860 <__fpcmp_parts_f+0x9c>
    37d2:	80 81       	ld	r24, Z
    37d4:	82 30       	cpi	r24, 0x02	; 2
    37d6:	08 f4       	brcc	.+2      	; 0x37da <__fpcmp_parts_f+0x16>
    37d8:	43 c0       	rjmp	.+134    	; 0x3860 <__fpcmp_parts_f+0x9c>
    37da:	94 30       	cpi	r25, 0x04	; 4
    37dc:	51 f4       	brne	.+20     	; 0x37f2 <__fpcmp_parts_f+0x2e>
    37de:	11 96       	adiw	r26, 0x01	; 1
    37e0:	1c 91       	ld	r17, X
    37e2:	84 30       	cpi	r24, 0x04	; 4
    37e4:	99 f5       	brne	.+102    	; 0x384c <__fpcmp_parts_f+0x88>
    37e6:	81 81       	ldd	r24, Z+1	; 0x01
    37e8:	68 2f       	mov	r22, r24
    37ea:	70 e0       	ldi	r23, 0x00	; 0
    37ec:	61 1b       	sub	r22, r17
    37ee:	71 09       	sbc	r23, r1
    37f0:	3f c0       	rjmp	.+126    	; 0x3870 <__fpcmp_parts_f+0xac>
    37f2:	84 30       	cpi	r24, 0x04	; 4
    37f4:	21 f0       	breq	.+8      	; 0x37fe <__fpcmp_parts_f+0x3a>
    37f6:	92 30       	cpi	r25, 0x02	; 2
    37f8:	31 f4       	brne	.+12     	; 0x3806 <__fpcmp_parts_f+0x42>
    37fa:	82 30       	cpi	r24, 0x02	; 2
    37fc:	b9 f1       	breq	.+110    	; 0x386c <__fpcmp_parts_f+0xa8>
    37fe:	81 81       	ldd	r24, Z+1	; 0x01
    3800:	88 23       	and	r24, r24
    3802:	89 f1       	breq	.+98     	; 0x3866 <__fpcmp_parts_f+0xa2>
    3804:	2d c0       	rjmp	.+90     	; 0x3860 <__fpcmp_parts_f+0x9c>
    3806:	11 96       	adiw	r26, 0x01	; 1
    3808:	1c 91       	ld	r17, X
    380a:	11 97       	sbiw	r26, 0x01	; 1
    380c:	82 30       	cpi	r24, 0x02	; 2
    380e:	f1 f0       	breq	.+60     	; 0x384c <__fpcmp_parts_f+0x88>
    3810:	81 81       	ldd	r24, Z+1	; 0x01
    3812:	18 17       	cp	r17, r24
    3814:	d9 f4       	brne	.+54     	; 0x384c <__fpcmp_parts_f+0x88>
    3816:	12 96       	adiw	r26, 0x02	; 2
    3818:	2d 91       	ld	r18, X+
    381a:	3c 91       	ld	r19, X
    381c:	13 97       	sbiw	r26, 0x03	; 3
    381e:	82 81       	ldd	r24, Z+2	; 0x02
    3820:	93 81       	ldd	r25, Z+3	; 0x03
    3822:	82 17       	cp	r24, r18
    3824:	93 07       	cpc	r25, r19
    3826:	94 f0       	brlt	.+36     	; 0x384c <__fpcmp_parts_f+0x88>
    3828:	28 17       	cp	r18, r24
    382a:	39 07       	cpc	r19, r25
    382c:	bc f0       	brlt	.+46     	; 0x385c <__fpcmp_parts_f+0x98>
    382e:	14 96       	adiw	r26, 0x04	; 4
    3830:	8d 91       	ld	r24, X+
    3832:	9d 91       	ld	r25, X+
    3834:	0d 90       	ld	r0, X+
    3836:	bc 91       	ld	r27, X
    3838:	a0 2d       	mov	r26, r0
    383a:	24 81       	ldd	r18, Z+4	; 0x04
    383c:	35 81       	ldd	r19, Z+5	; 0x05
    383e:	46 81       	ldd	r20, Z+6	; 0x06
    3840:	57 81       	ldd	r21, Z+7	; 0x07
    3842:	28 17       	cp	r18, r24
    3844:	39 07       	cpc	r19, r25
    3846:	4a 07       	cpc	r20, r26
    3848:	5b 07       	cpc	r21, r27
    384a:	18 f4       	brcc	.+6      	; 0x3852 <__fpcmp_parts_f+0x8e>
    384c:	11 23       	and	r17, r17
    384e:	41 f0       	breq	.+16     	; 0x3860 <__fpcmp_parts_f+0x9c>
    3850:	0a c0       	rjmp	.+20     	; 0x3866 <__fpcmp_parts_f+0xa2>
    3852:	82 17       	cp	r24, r18
    3854:	93 07       	cpc	r25, r19
    3856:	a4 07       	cpc	r26, r20
    3858:	b5 07       	cpc	r27, r21
    385a:	40 f4       	brcc	.+16     	; 0x386c <__fpcmp_parts_f+0xa8>
    385c:	11 23       	and	r17, r17
    385e:	19 f0       	breq	.+6      	; 0x3866 <__fpcmp_parts_f+0xa2>
    3860:	61 e0       	ldi	r22, 0x01	; 1
    3862:	70 e0       	ldi	r23, 0x00	; 0
    3864:	05 c0       	rjmp	.+10     	; 0x3870 <__fpcmp_parts_f+0xac>
    3866:	6f ef       	ldi	r22, 0xFF	; 255
    3868:	7f ef       	ldi	r23, 0xFF	; 255
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <__fpcmp_parts_f+0xac>
    386c:	60 e0       	ldi	r22, 0x00	; 0
    386e:	70 e0       	ldi	r23, 0x00	; 0
    3870:	cb 01       	movw	r24, r22
    3872:	1f 91       	pop	r17
    3874:	08 95       	ret

00003876 <__divmodhi4>:
    3876:	97 fb       	bst	r25, 7
    3878:	09 2e       	mov	r0, r25
    387a:	07 26       	eor	r0, r23
    387c:	0a d0       	rcall	.+20     	; 0x3892 <__divmodhi4_neg1>
    387e:	77 fd       	sbrc	r23, 7
    3880:	04 d0       	rcall	.+8      	; 0x388a <__divmodhi4_neg2>
    3882:	0c d0       	rcall	.+24     	; 0x389c <__udivmodhi4>
    3884:	06 d0       	rcall	.+12     	; 0x3892 <__divmodhi4_neg1>
    3886:	00 20       	and	r0, r0
    3888:	1a f4       	brpl	.+6      	; 0x3890 <__divmodhi4_exit>

0000388a <__divmodhi4_neg2>:
    388a:	70 95       	com	r23
    388c:	61 95       	neg	r22
    388e:	7f 4f       	sbci	r23, 0xFF	; 255

00003890 <__divmodhi4_exit>:
    3890:	08 95       	ret

00003892 <__divmodhi4_neg1>:
    3892:	f6 f7       	brtc	.-4      	; 0x3890 <__divmodhi4_exit>
    3894:	90 95       	com	r25
    3896:	81 95       	neg	r24
    3898:	9f 4f       	sbci	r25, 0xFF	; 255
    389a:	08 95       	ret

0000389c <__udivmodhi4>:
    389c:	aa 1b       	sub	r26, r26
    389e:	bb 1b       	sub	r27, r27
    38a0:	51 e1       	ldi	r21, 0x11	; 17
    38a2:	07 c0       	rjmp	.+14     	; 0x38b2 <__udivmodhi4_ep>

000038a4 <__udivmodhi4_loop>:
    38a4:	aa 1f       	adc	r26, r26
    38a6:	bb 1f       	adc	r27, r27
    38a8:	a6 17       	cp	r26, r22
    38aa:	b7 07       	cpc	r27, r23
    38ac:	10 f0       	brcs	.+4      	; 0x38b2 <__udivmodhi4_ep>
    38ae:	a6 1b       	sub	r26, r22
    38b0:	b7 0b       	sbc	r27, r23

000038b2 <__udivmodhi4_ep>:
    38b2:	88 1f       	adc	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	5a 95       	dec	r21
    38b8:	a9 f7       	brne	.-22     	; 0x38a4 <__udivmodhi4_loop>
    38ba:	80 95       	com	r24
    38bc:	90 95       	com	r25
    38be:	bc 01       	movw	r22, r24
    38c0:	cd 01       	movw	r24, r26
    38c2:	08 95       	ret

000038c4 <__prologue_saves__>:
    38c4:	2f 92       	push	r2
    38c6:	3f 92       	push	r3
    38c8:	4f 92       	push	r4
    38ca:	5f 92       	push	r5
    38cc:	6f 92       	push	r6
    38ce:	7f 92       	push	r7
    38d0:	8f 92       	push	r8
    38d2:	9f 92       	push	r9
    38d4:	af 92       	push	r10
    38d6:	bf 92       	push	r11
    38d8:	cf 92       	push	r12
    38da:	df 92       	push	r13
    38dc:	ef 92       	push	r14
    38de:	ff 92       	push	r15
    38e0:	0f 93       	push	r16
    38e2:	1f 93       	push	r17
    38e4:	cf 93       	push	r28
    38e6:	df 93       	push	r29
    38e8:	cd b7       	in	r28, 0x3d	; 61
    38ea:	de b7       	in	r29, 0x3e	; 62
    38ec:	ca 1b       	sub	r28, r26
    38ee:	db 0b       	sbc	r29, r27
    38f0:	0f b6       	in	r0, 0x3f	; 63
    38f2:	f8 94       	cli
    38f4:	de bf       	out	0x3e, r29	; 62
    38f6:	0f be       	out	0x3f, r0	; 63
    38f8:	cd bf       	out	0x3d, r28	; 61
    38fa:	09 94       	ijmp

000038fc <__epilogue_restores__>:
    38fc:	2a 88       	ldd	r2, Y+18	; 0x12
    38fe:	39 88       	ldd	r3, Y+17	; 0x11
    3900:	48 88       	ldd	r4, Y+16	; 0x10
    3902:	5f 84       	ldd	r5, Y+15	; 0x0f
    3904:	6e 84       	ldd	r6, Y+14	; 0x0e
    3906:	7d 84       	ldd	r7, Y+13	; 0x0d
    3908:	8c 84       	ldd	r8, Y+12	; 0x0c
    390a:	9b 84       	ldd	r9, Y+11	; 0x0b
    390c:	aa 84       	ldd	r10, Y+10	; 0x0a
    390e:	b9 84       	ldd	r11, Y+9	; 0x09
    3910:	c8 84       	ldd	r12, Y+8	; 0x08
    3912:	df 80       	ldd	r13, Y+7	; 0x07
    3914:	ee 80       	ldd	r14, Y+6	; 0x06
    3916:	fd 80       	ldd	r15, Y+5	; 0x05
    3918:	0c 81       	ldd	r16, Y+4	; 0x04
    391a:	1b 81       	ldd	r17, Y+3	; 0x03
    391c:	aa 81       	ldd	r26, Y+2	; 0x02
    391e:	b9 81       	ldd	r27, Y+1	; 0x01
    3920:	ce 0f       	add	r28, r30
    3922:	d1 1d       	adc	r29, r1
    3924:	0f b6       	in	r0, 0x3f	; 63
    3926:	f8 94       	cli
    3928:	de bf       	out	0x3e, r29	; 62
    392a:	0f be       	out	0x3f, r0	; 63
    392c:	cd bf       	out	0x3d, r28	; 61
    392e:	ed 01       	movw	r28, r26
    3930:	08 95       	ret

00003932 <itoa>:
    3932:	e6 2f       	mov	r30, r22
    3934:	f7 2f       	mov	r31, r23
    3936:	2e 2f       	mov	r18, r30
    3938:	3f 2f       	mov	r19, r31
    393a:	e8 94       	clt
    393c:	42 30       	cpi	r20, 0x02	; 2
    393e:	c4 f0       	brlt	.+48     	; 0x3970 <itoa+0x3e>
    3940:	45 32       	cpi	r20, 0x25	; 37
    3942:	b4 f4       	brge	.+44     	; 0x3970 <itoa+0x3e>
    3944:	4a 30       	cpi	r20, 0x0A	; 10
    3946:	29 f4       	brne	.+10     	; 0x3952 <itoa+0x20>
    3948:	97 fb       	bst	r25, 7
    394a:	1e f4       	brtc	.+6      	; 0x3952 <itoa+0x20>
    394c:	90 95       	com	r25
    394e:	81 95       	neg	r24
    3950:	9f 4f       	sbci	r25, 0xFF	; 255
    3952:	64 2f       	mov	r22, r20
    3954:	77 27       	eor	r23, r23
    3956:	a2 df       	rcall	.-188    	; 0x389c <__udivmodhi4>
    3958:	80 5d       	subi	r24, 0xD0	; 208
    395a:	8a 33       	cpi	r24, 0x3A	; 58
    395c:	0c f0       	brlt	.+2      	; 0x3960 <itoa+0x2e>
    395e:	89 5d       	subi	r24, 0xD9	; 217
    3960:	81 93       	st	Z+, r24
    3962:	86 2f       	mov	r24, r22
    3964:	97 2f       	mov	r25, r23
    3966:	00 97       	sbiw	r24, 0x00	; 0
    3968:	a1 f7       	brne	.-24     	; 0x3952 <itoa+0x20>
    396a:	16 f4       	brtc	.+4      	; 0x3970 <itoa+0x3e>
    396c:	5d e2       	ldi	r21, 0x2D	; 45
    396e:	51 93       	st	Z+, r21
    3970:	10 82       	st	Z, r1
    3972:	82 2f       	mov	r24, r18
    3974:	93 2f       	mov	r25, r19
    3976:	00 c0       	rjmp	.+0      	; 0x3978 <strrev>

00003978 <strrev>:
    3978:	a8 2f       	mov	r26, r24
    397a:	b9 2f       	mov	r27, r25
    397c:	e8 2f       	mov	r30, r24
    397e:	f9 2f       	mov	r31, r25
    3980:	67 2f       	mov	r22, r23
    3982:	71 91       	ld	r23, Z+
    3984:	77 23       	and	r23, r23
    3986:	e1 f7       	brne	.-8      	; 0x3980 <strrev+0x8>
    3988:	32 97       	sbiw	r30, 0x02	; 2
    398a:	04 c0       	rjmp	.+8      	; 0x3994 <strrev+0x1c>
    398c:	7c 91       	ld	r23, X
    398e:	6d 93       	st	X+, r22
    3990:	70 83       	st	Z, r23
    3992:	62 91       	ld	r22, -Z
    3994:	ae 17       	cp	r26, r30
    3996:	bf 07       	cpc	r27, r31
    3998:	c8 f3       	brcs	.-14     	; 0x398c <strrev+0x14>
    399a:	08 95       	ret

0000399c <_exit>:
    399c:	f8 94       	cli

0000399e <__stop_program>:
    399e:	ff cf       	rjmp	.-2      	; 0x399e <__stop_program>
